// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpExportMissingDocs;
import java.util.Calendar;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DdpExportMissingDocs_Roo_Finder {
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisAppNameEquals(String misAppName) {
        if (misAppName == null || misAppName.length() == 0) throw new IllegalArgumentException("The misAppName argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misAppName = :misAppName", DdpExportMissingDocs.class);
        q.setParameter("misAppName", misAppName);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisAppNameIsNull() {
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misAppName IS NULL", DdpExportMissingDocs.class);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisConsignmentIdEquals(String misConsignmentId) {
        if (misConsignmentId == null || misConsignmentId.length() == 0) throw new IllegalArgumentException("The misConsignmentId argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misConsignmentId = :misConsignmentId", DdpExportMissingDocs.class);
        q.setParameter("misConsignmentId", misConsignmentId);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisCreatedDateBetween(Calendar minMisCreatedDate, Calendar maxMisCreatedDate) {
        if (minMisCreatedDate == null) throw new IllegalArgumentException("The minMisCreatedDate argument is required");
        if (maxMisCreatedDate == null) throw new IllegalArgumentException("The maxMisCreatedDate argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misCreatedDate BETWEEN :minMisCreatedDate AND :maxMisCreatedDate", DdpExportMissingDocs.class);
        q.setParameter("minMisCreatedDate", minMisCreatedDate);
        q.setParameter("maxMisCreatedDate", maxMisCreatedDate);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisCreatedDateGreaterThan(Calendar misCreatedDate) {
        if (misCreatedDate == null) throw new IllegalArgumentException("The misCreatedDate argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misCreatedDate > :misCreatedDate", DdpExportMissingDocs.class);
        q.setParameter("misCreatedDate", misCreatedDate);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisDocTypeEquals(String misDocType) {
        if (misDocType == null || misDocType.length() == 0) throw new IllegalArgumentException("The misDocType argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misDocType = :misDocType", DdpExportMissingDocs.class);
        q.setParameter("misDocType", misDocType);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisEntryNoEquals(String misEntryNo) {
        if (misEntryNo == null || misEntryNo.length() == 0) throw new IllegalArgumentException("The misEntryNo argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misEntryNo = :misEntryNo", DdpExportMissingDocs.class);
        q.setParameter("misEntryNo", misEntryNo);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisEntryTypeEquals(String misEntryType) {
        if (misEntryType == null || misEntryType.length() == 0) throw new IllegalArgumentException("The misEntryType argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misEntryType = :misEntryType", DdpExportMissingDocs.class);
        q.setParameter("misEntryType", misEntryType);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisExpRuleIdEquals(Integer misExpRuleId) {
        if (misExpRuleId == null) throw new IllegalArgumentException("The misExpRuleId argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misExpRuleId = :misExpRuleId", DdpExportMissingDocs.class);
        q.setParameter("misExpRuleId", misExpRuleId);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisJobNumberEquals(String misJobNumber) {
        if (misJobNumber == null || misJobNumber.length() == 0) throw new IllegalArgumentException("The misJobNumber argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misJobNumber = :misJobNumber", DdpExportMissingDocs.class);
        q.setParameter("misJobNumber", misJobNumber);
        return q;
    }
    
    public static TypedQuery<DdpExportMissingDocs> DdpExportMissingDocs.findDdpExportMissingDocsesByMisStatusEquals(Integer misStatus) {
        if (misStatus == null) throw new IllegalArgumentException("The misStatus argument is required");
        EntityManager em = DdpExportMissingDocs.entityManager();
        TypedQuery<DdpExportMissingDocs> q = em.createQuery("SELECT o FROM DdpExportMissingDocs AS o WHERE o.misStatus = :misStatus", DdpExportMissingDocs.class);
        q.setParameter("misStatus", misStatus);
        return q;
    }
    
}
