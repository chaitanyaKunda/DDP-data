// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpUser;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DdpUser_Roo_Finder {
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrBranchCodeEquals(String usrBranchCode) {
        if (usrBranchCode == null || usrBranchCode.length() == 0) throw new IllegalArgumentException("The usrBranchCode argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrBranchCode = :usrBranchCode", DdpUser.class);
        q.setParameter("usrBranchCode", usrBranchCode);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrBranchCodeLike(String usrBranchCode) {
        if (usrBranchCode == null || usrBranchCode.length() == 0) throw new IllegalArgumentException("The usrBranchCode argument is required");
        usrBranchCode = usrBranchCode.replace('*', '%');
        if (usrBranchCode.charAt(0) != '%') {
            usrBranchCode = "%" + usrBranchCode;
        }
        if (usrBranchCode.charAt(usrBranchCode.length() - 1) != '%') {
            usrBranchCode = usrBranchCode + "%";
        }
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE LOWER(o.usrBranchCode) LIKE LOWER(:usrBranchCode)", DdpUser.class);
        q.setParameter("usrBranchCode", usrBranchCode);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrBranchCodeNotEquals(String usrBranchCode) {
        if (usrBranchCode == null || usrBranchCode.length() == 0) throw new IllegalArgumentException("The usrBranchCode argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrBranchCode != :usrBranchCode", DdpUser.class);
        q.setParameter("usrBranchCode", usrBranchCode);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrCompanyCodeEquals(String usrCompanyCode) {
        if (usrCompanyCode == null || usrCompanyCode.length() == 0) throw new IllegalArgumentException("The usrCompanyCode argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrCompanyCode = :usrCompanyCode", DdpUser.class);
        q.setParameter("usrCompanyCode", usrCompanyCode);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrCompanyCodeLike(String usrCompanyCode) {
        if (usrCompanyCode == null || usrCompanyCode.length() == 0) throw new IllegalArgumentException("The usrCompanyCode argument is required");
        usrCompanyCode = usrCompanyCode.replace('*', '%');
        if (usrCompanyCode.charAt(0) != '%') {
            usrCompanyCode = "%" + usrCompanyCode;
        }
        if (usrCompanyCode.charAt(usrCompanyCode.length() - 1) != '%') {
            usrCompanyCode = usrCompanyCode + "%";
        }
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE LOWER(o.usrCompanyCode) LIKE LOWER(:usrCompanyCode)", DdpUser.class);
        q.setParameter("usrCompanyCode", usrCompanyCode);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrCountryEquals(String usrCountry) {
        if (usrCountry == null || usrCountry.length() == 0) throw new IllegalArgumentException("The usrCountry argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrCountry = :usrCountry", DdpUser.class);
        q.setParameter("usrCountry", usrCountry);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrCountryLike(String usrCountry) {
        if (usrCountry == null || usrCountry.length() == 0) throw new IllegalArgumentException("The usrCountry argument is required");
        usrCountry = usrCountry.replace('*', '%');
        if (usrCountry.charAt(0) != '%') {
            usrCountry = "%" + usrCountry;
        }
        if (usrCountry.charAt(usrCountry.length() - 1) != '%') {
            usrCountry = usrCountry + "%";
        }
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE LOWER(o.usrCountry) LIKE LOWER(:usrCountry)", DdpUser.class);
        q.setParameter("usrCountry", usrCountry);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrCountryNotEquals(String usrCountry) {
        if (usrCountry == null || usrCountry.length() == 0) throw new IllegalArgumentException("The usrCountry argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrCountry != :usrCountry", DdpUser.class);
        q.setParameter("usrCountry", usrCountry);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrDisplayNameEquals(String usrDisplayName) {
        if (usrDisplayName == null || usrDisplayName.length() == 0) throw new IllegalArgumentException("The usrDisplayName argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrDisplayName = :usrDisplayName", DdpUser.class);
        q.setParameter("usrDisplayName", usrDisplayName);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrDisplayNameLike(String usrDisplayName) {
        if (usrDisplayName == null || usrDisplayName.length() == 0) throw new IllegalArgumentException("The usrDisplayName argument is required");
        usrDisplayName = usrDisplayName.replace('*', '%');
        if (usrDisplayName.charAt(0) != '%') {
            usrDisplayName = "%" + usrDisplayName;
        }
        if (usrDisplayName.charAt(usrDisplayName.length() - 1) != '%') {
            usrDisplayName = usrDisplayName + "%";
        }
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE LOWER(o.usrDisplayName) LIKE LOWER(:usrDisplayName)", DdpUser.class);
        q.setParameter("usrDisplayName", usrDisplayName);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrFirstNameEquals(String usrFirstName) {
        if (usrFirstName == null || usrFirstName.length() == 0) throw new IllegalArgumentException("The usrFirstName argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrFirstName = :usrFirstName", DdpUser.class);
        q.setParameter("usrFirstName", usrFirstName);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrFirstNameLike(String usrFirstName) {
        if (usrFirstName == null || usrFirstName.length() == 0) throw new IllegalArgumentException("The usrFirstName argument is required");
        usrFirstName = usrFirstName.replace('*', '%');
        if (usrFirstName.charAt(0) != '%') {
            usrFirstName = "%" + usrFirstName;
        }
        if (usrFirstName.charAt(usrFirstName.length() - 1) != '%') {
            usrFirstName = usrFirstName + "%";
        }
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE LOWER(o.usrFirstName) LIKE LOWER(:usrFirstName)", DdpUser.class);
        q.setParameter("usrFirstName", usrFirstName);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrLoginIdEquals(String usrLoginId) {
        if (usrLoginId == null || usrLoginId.length() == 0) throw new IllegalArgumentException("The usrLoginId argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrLoginId = :usrLoginId", DdpUser.class);
        q.setParameter("usrLoginId", usrLoginId);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrLoginIdLike(String usrLoginId) {
        if (usrLoginId == null || usrLoginId.length() == 0) throw new IllegalArgumentException("The usrLoginId argument is required");
        usrLoginId = usrLoginId.replace('*', '%');
        if (usrLoginId.charAt(0) != '%') {
            usrLoginId = "%" + usrLoginId;
        }
        if (usrLoginId.charAt(usrLoginId.length() - 1) != '%') {
            usrLoginId = usrLoginId + "%";
        }
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE LOWER(o.usrLoginId) LIKE LOWER(:usrLoginId)", DdpUser.class);
        q.setParameter("usrLoginId", usrLoginId);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrRegionEquals(String usrRegion) {
        if (usrRegion == null || usrRegion.length() == 0) throw new IllegalArgumentException("The usrRegion argument is required");
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE o.usrRegion = :usrRegion", DdpUser.class);
        q.setParameter("usrRegion", usrRegion);
        return q;
    }
    
    public static TypedQuery<DdpUser> DdpUser.findDdpUsersByUsrRegionLike(String usrRegion) {
        if (usrRegion == null || usrRegion.length() == 0) throw new IllegalArgumentException("The usrRegion argument is required");
        usrRegion = usrRegion.replace('*', '%');
        if (usrRegion.charAt(0) != '%') {
            usrRegion = "%" + usrRegion;
        }
        if (usrRegion.charAt(usrRegion.length() - 1) != '%') {
            usrRegion = usrRegion + "%";
        }
        EntityManager em = DdpUser.entityManager();
        TypedQuery<DdpUser> q = em.createQuery("SELECT o FROM DdpUser AS o WHERE LOWER(o.usrRegion) LIKE LOWER(:usrRegion)", DdpUser.class);
        q.setParameter("usrRegion", usrRegion);
        return q;
    }
    
}
