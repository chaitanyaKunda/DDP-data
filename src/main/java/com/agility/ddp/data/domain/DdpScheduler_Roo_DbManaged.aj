// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedRule;
import com.agility.ddp.data.domain.DdpExportRule;
import com.agility.ddp.data.domain.DdpMultiAedRule;
import com.agility.ddp.data.domain.DdpRuleDetail;
import com.agility.ddp.data.domain.DdpScheduler;
import java.util.Calendar;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.OneToMany;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import org.springframework.format.annotation.DateTimeFormat;

privileged aspect DdpScheduler_Roo_DbManaged {
    
    @OneToMany(mappedBy = "aedSchedulerId")
    private Set<DdpAedRule> DdpScheduler.ddpAedRules;
    
    @OneToMany(mappedBy = "expSchedulerId")
    private Set<DdpExportRule> DdpScheduler.ddpExportRules;
    
    @OneToMany(mappedBy = "maedSchedulerId")
    private Set<DdpMultiAedRule> DdpScheduler.ddpMultiAedRules;
    
    @OneToMany(mappedBy = "rdtSchedulerId")
    private Set<DdpRuleDetail> DdpScheduler.ddpRuleDetails;
    
    @Column(name = "SCH_START_DATE")
    @NotNull
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar DdpScheduler.schStartDate;
    
    @Column(name = "SCH_END_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar DdpScheduler.schEndDate;
    
    @Column(name = "SCH_TIME_INTERVAL", length = 16)
    @NotNull
    private String DdpScheduler.schTimeInterval;
    
    @Column(name = "SCH_REPEAT_COUNT", length = 16)
    private String DdpScheduler.schRepeatCount;
    
    @Column(name = "SCH_NOTIFICATION_ID")
    @NotNull
    private Integer DdpScheduler.schNotificationId;
    
    @Column(name = "SCH_STATUS")
    @NotNull
    private Integer DdpScheduler.schStatus;
    
    @Column(name = "SCH_CREATED_BY", length = 120)
    @NotNull
    private String DdpScheduler.schCreatedBy;
    
    @Column(name = "SCH_CREATED_DATE")
    @NotNull
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar DdpScheduler.schCreatedDate;
    
    @Column(name = "SCH_MODIFIED_BY", length = 120)
    @NotNull
    private String DdpScheduler.schModifiedBy;
    
    @Column(name = "SCH_MODIFIED_DATE")
    @NotNull
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar DdpScheduler.schModifiedDate;
    
    @Column(name = "SCH_IS_RUNNING")
    private Integer DdpScheduler.schIsRunning;
    
    @Column(name = "SCH_TYPE", length = 32)
    private String DdpScheduler.schType;
    
    @Column(name = "SCH_CRON_EXPRESSIONS", length = 120)
    private String DdpScheduler.schCronExpressions;
    
    @Column(name = "SCH_LAST_RUN")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar DdpScheduler.schLastRun;
    
    @Column(name = "SCH_NEXT_RUN")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar DdpScheduler.schNextRun;
    
    @Column(name = "SCH_LAST_RUN_STATUS", length = 250)
    private String DdpScheduler.schLastRunStatus;
    
    @Column(name = "SCH_SUCCESS_COUNT")
    private Integer DdpScheduler.schSuccessCount;
    
    @Column(name = "SCH_FAILED_COUNT")
    private Integer DdpScheduler.schFailedCount;
    
    @Column(name = "SCH_PROCESSING_STATUS")
    private Integer DdpScheduler.schProcessingStatus;
    
    @Column(name = "SCH_LAST_SUCCESS_RUN")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar DdpScheduler.schLastSuccessRun;
    
    @Column(name = "SCH_LAST_FAILED_RUN")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "MM")
    private Calendar DdpScheduler.schLastFailedRun;
    
    @Column(name = "SCH_RULE_TYPE", length = 64)
    private String DdpScheduler.schRuleType;
    
    @Column(name = "SCH_RULE_CATEGORY", length = 64)
    private String DdpScheduler.schRuleCategory;
    
    @Column(name = "SCH_CHOOSEN_TYPE")
    private Integer DdpScheduler.schChoosenType;
    
    @Column(name = "SCH_BATCHING_CRITERIA", length = 32)
    private String DdpScheduler.schBatchingCriteria;
    
    @Column(name = "SCH_DELAY_IN", length = 32)
    private String DdpScheduler.schDelayIn;
    
    @Column(name = "SCH_DELAY_COUNT")
    private Integer DdpScheduler.schDelayCount;
    
    @Column(name = "SCH_REPORT_FREQUENCY", length = 32)
    private String DdpScheduler.schReportFrequency;
    
    @Column(name = "SCH_REPORT_EMAIL_TO", length = 256)
    private String DdpScheduler.schReportEmailTo;
    
    @Column(name = "SCH_REPORT_EMAIL_CC", length = 256)
    private String DdpScheduler.schReportEmailCc;
    
    @Column(name = "SCH_QUERY_SOURCE")
    private Integer DdpScheduler.schQuerySource;
    
    public Set<DdpAedRule> DdpScheduler.getDdpAedRules() {
        return ddpAedRules;
    }
    
    public void DdpScheduler.setDdpAedRules(Set<DdpAedRule> ddpAedRules) {
        this.ddpAedRules = ddpAedRules;
    }
    
    public Set<DdpExportRule> DdpScheduler.getDdpExportRules() {
        return ddpExportRules;
    }
    
    public void DdpScheduler.setDdpExportRules(Set<DdpExportRule> ddpExportRules) {
        this.ddpExportRules = ddpExportRules;
    }
    
    public Set<DdpMultiAedRule> DdpScheduler.getDdpMultiAedRules() {
        return ddpMultiAedRules;
    }
    
    public void DdpScheduler.setDdpMultiAedRules(Set<DdpMultiAedRule> ddpMultiAedRules) {
        this.ddpMultiAedRules = ddpMultiAedRules;
    }
    
    public Set<DdpRuleDetail> DdpScheduler.getDdpRuleDetails() {
        return ddpRuleDetails;
    }
    
    public void DdpScheduler.setDdpRuleDetails(Set<DdpRuleDetail> ddpRuleDetails) {
        this.ddpRuleDetails = ddpRuleDetails;
    }
    
    public Calendar DdpScheduler.getSchStartDate() {
        return schStartDate;
    }
    
    public void DdpScheduler.setSchStartDate(Calendar schStartDate) {
        this.schStartDate = schStartDate;
    }
    
    public Calendar DdpScheduler.getSchEndDate() {
        return schEndDate;
    }
    
    public void DdpScheduler.setSchEndDate(Calendar schEndDate) {
        this.schEndDate = schEndDate;
    }
    
    public String DdpScheduler.getSchTimeInterval() {
        return schTimeInterval;
    }
    
    public void DdpScheduler.setSchTimeInterval(String schTimeInterval) {
        this.schTimeInterval = schTimeInterval;
    }
    
    public String DdpScheduler.getSchRepeatCount() {
        return schRepeatCount;
    }
    
    public void DdpScheduler.setSchRepeatCount(String schRepeatCount) {
        this.schRepeatCount = schRepeatCount;
    }
    
    public Integer DdpScheduler.getSchNotificationId() {
        return schNotificationId;
    }
    
    public void DdpScheduler.setSchNotificationId(Integer schNotificationId) {
        this.schNotificationId = schNotificationId;
    }
    
    public Integer DdpScheduler.getSchStatus() {
        return schStatus;
    }
    
    public void DdpScheduler.setSchStatus(Integer schStatus) {
        this.schStatus = schStatus;
    }
    
    public String DdpScheduler.getSchCreatedBy() {
        return schCreatedBy;
    }
    
    public void DdpScheduler.setSchCreatedBy(String schCreatedBy) {
        this.schCreatedBy = schCreatedBy;
    }
    
    public Calendar DdpScheduler.getSchCreatedDate() {
        return schCreatedDate;
    }
    
    public void DdpScheduler.setSchCreatedDate(Calendar schCreatedDate) {
        this.schCreatedDate = schCreatedDate;
    }
    
    public String DdpScheduler.getSchModifiedBy() {
        return schModifiedBy;
    }
    
    public void DdpScheduler.setSchModifiedBy(String schModifiedBy) {
        this.schModifiedBy = schModifiedBy;
    }
    
    public Calendar DdpScheduler.getSchModifiedDate() {
        return schModifiedDate;
    }
    
    public void DdpScheduler.setSchModifiedDate(Calendar schModifiedDate) {
        this.schModifiedDate = schModifiedDate;
    }
    
    public Integer DdpScheduler.getSchIsRunning() {
        return schIsRunning;
    }
    
    public void DdpScheduler.setSchIsRunning(Integer schIsRunning) {
        this.schIsRunning = schIsRunning;
    }
    
    public String DdpScheduler.getSchType() {
        return schType;
    }
    
    public void DdpScheduler.setSchType(String schType) {
        this.schType = schType;
    }
    
    public String DdpScheduler.getSchCronExpressions() {
        return schCronExpressions;
    }
    
    public void DdpScheduler.setSchCronExpressions(String schCronExpressions) {
        this.schCronExpressions = schCronExpressions;
    }
    
    public Calendar DdpScheduler.getSchLastRun() {
        return schLastRun;
    }
    
    public void DdpScheduler.setSchLastRun(Calendar schLastRun) {
        this.schLastRun = schLastRun;
    }
    
    public Calendar DdpScheduler.getSchNextRun() {
        return schNextRun;
    }
    
    public void DdpScheduler.setSchNextRun(Calendar schNextRun) {
        this.schNextRun = schNextRun;
    }
    
    public String DdpScheduler.getSchLastRunStatus() {
        return schLastRunStatus;
    }
    
    public void DdpScheduler.setSchLastRunStatus(String schLastRunStatus) {
        this.schLastRunStatus = schLastRunStatus;
    }
    
    public Integer DdpScheduler.getSchSuccessCount() {
        return schSuccessCount;
    }
    
    public void DdpScheduler.setSchSuccessCount(Integer schSuccessCount) {
        this.schSuccessCount = schSuccessCount;
    }
    
    public Integer DdpScheduler.getSchFailedCount() {
        return schFailedCount;
    }
    
    public void DdpScheduler.setSchFailedCount(Integer schFailedCount) {
        this.schFailedCount = schFailedCount;
    }
    
    public Integer DdpScheduler.getSchProcessingStatus() {
        return schProcessingStatus;
    }
    
    public void DdpScheduler.setSchProcessingStatus(Integer schProcessingStatus) {
        this.schProcessingStatus = schProcessingStatus;
    }
    
    public Calendar DdpScheduler.getSchLastSuccessRun() {
        return schLastSuccessRun;
    }
    
    public void DdpScheduler.setSchLastSuccessRun(Calendar schLastSuccessRun) {
        this.schLastSuccessRun = schLastSuccessRun;
    }
    
    public Calendar DdpScheduler.getSchLastFailedRun() {
        return schLastFailedRun;
    }
    
    public void DdpScheduler.setSchLastFailedRun(Calendar schLastFailedRun) {
        this.schLastFailedRun = schLastFailedRun;
    }
    
    public String DdpScheduler.getSchRuleType() {
        return schRuleType;
    }
    
    public void DdpScheduler.setSchRuleType(String schRuleType) {
        this.schRuleType = schRuleType;
    }
    
    public String DdpScheduler.getSchRuleCategory() {
        return schRuleCategory;
    }
    
    public void DdpScheduler.setSchRuleCategory(String schRuleCategory) {
        this.schRuleCategory = schRuleCategory;
    }
    
    public Integer DdpScheduler.getSchChoosenType() {
        return schChoosenType;
    }
    
    public void DdpScheduler.setSchChoosenType(Integer schChoosenType) {
        this.schChoosenType = schChoosenType;
    }
    
    public String DdpScheduler.getSchBatchingCriteria() {
        return schBatchingCriteria;
    }
    
    public void DdpScheduler.setSchBatchingCriteria(String schBatchingCriteria) {
        this.schBatchingCriteria = schBatchingCriteria;
    }
    
    public String DdpScheduler.getSchDelayIn() {
        return schDelayIn;
    }
    
    public void DdpScheduler.setSchDelayIn(String schDelayIn) {
        this.schDelayIn = schDelayIn;
    }
    
    public Integer DdpScheduler.getSchDelayCount() {
        return schDelayCount;
    }
    
    public void DdpScheduler.setSchDelayCount(Integer schDelayCount) {
        this.schDelayCount = schDelayCount;
    }
    
    public String DdpScheduler.getSchReportFrequency() {
        return schReportFrequency;
    }
    
    public void DdpScheduler.setSchReportFrequency(String schReportFrequency) {
        this.schReportFrequency = schReportFrequency;
    }
    
    public String DdpScheduler.getSchReportEmailTo() {
        return schReportEmailTo;
    }
    
    public void DdpScheduler.setSchReportEmailTo(String schReportEmailTo) {
        this.schReportEmailTo = schReportEmailTo;
    }
    
    public String DdpScheduler.getSchReportEmailCc() {
        return schReportEmailCc;
    }
    
    public void DdpScheduler.setSchReportEmailCc(String schReportEmailCc) {
        this.schReportEmailCc = schReportEmailCc;
    }
    
    public Integer DdpScheduler.getSchQuerySource() {
        return schQuerySource;
    }
    
    public void DdpScheduler.setSchQuerySource(Integer schQuerySource) {
        this.schQuerySource = schQuerySource;
    }
    
}
