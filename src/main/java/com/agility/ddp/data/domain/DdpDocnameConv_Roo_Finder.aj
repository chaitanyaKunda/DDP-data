// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedRule;
import com.agility.ddp.data.domain.DdpDocnameConv;
import com.agility.ddp.data.domain.DdpExportRule;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DdpDocnameConv_Roo_Finder {
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDcvBranchCodeEquals(String dcvBranchCode) {
        if (dcvBranchCode == null || dcvBranchCode.length() == 0) throw new IllegalArgumentException("The dcvBranchCode argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        TypedQuery<DdpDocnameConv> q = em.createQuery("SELECT o FROM DdpDocnameConv AS o WHERE o.dcvBranchCode = :dcvBranchCode", DdpDocnameConv.class);
        q.setParameter("dcvBranchCode", dcvBranchCode);
        return q;
    }
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDcvCompanyCodeEquals(String dcvCompanyCode) {
        if (dcvCompanyCode == null || dcvCompanyCode.length() == 0) throw new IllegalArgumentException("The dcvCompanyCode argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        TypedQuery<DdpDocnameConv> q = em.createQuery("SELECT o FROM DdpDocnameConv AS o WHERE o.dcvCompanyCode = :dcvCompanyCode", DdpDocnameConv.class);
        q.setParameter("dcvCompanyCode", dcvCompanyCode);
        return q;
    }
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDcvDoctypeCodeEquals(String dcvDoctypeCode) {
        if (dcvDoctypeCode == null || dcvDoctypeCode.length() == 0) throw new IllegalArgumentException("The dcvDoctypeCode argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        TypedQuery<DdpDocnameConv> q = em.createQuery("SELECT o FROM DdpDocnameConv AS o WHERE o.dcvDoctypeCode = :dcvDoctypeCode", DdpDocnameConv.class);
        q.setParameter("dcvDoctypeCode", dcvDoctypeCode);
        return q;
    }
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDcvDupDocNamingConvEquals(String dcvDupDocNamingConv) {
        if (dcvDupDocNamingConv == null || dcvDupDocNamingConv.length() == 0) throw new IllegalArgumentException("The dcvDupDocNamingConv argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        TypedQuery<DdpDocnameConv> q = em.createQuery("SELECT o FROM DdpDocnameConv AS o WHERE o.dcvDupDocNamingConv = :dcvDupDocNamingConv", DdpDocnameConv.class);
        q.setParameter("dcvDupDocNamingConv", dcvDupDocNamingConv);
        return q;
    }
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDcvGenNamingConvEquals(String dcvGenNamingConv) {
        if (dcvGenNamingConv == null || dcvGenNamingConv.length() == 0) throw new IllegalArgumentException("The dcvGenNamingConv argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        TypedQuery<DdpDocnameConv> q = em.createQuery("SELECT o FROM DdpDocnameConv AS o WHERE o.dcvGenNamingConv = :dcvGenNamingConv", DdpDocnameConv.class);
        q.setParameter("dcvGenNamingConv", dcvGenNamingConv);
        return q;
    }
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDcvSaveTypeEquals(String dcvSaveType) {
        if (dcvSaveType == null || dcvSaveType.length() == 0) throw new IllegalArgumentException("The dcvSaveType argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        TypedQuery<DdpDocnameConv> q = em.createQuery("SELECT o FROM DdpDocnameConv AS o WHERE o.dcvSaveType = :dcvSaveType", DdpDocnameConv.class);
        q.setParameter("dcvSaveType", dcvSaveType);
        return q;
    }
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDcvStatusEquals(Integer dcvStatus) {
        if (dcvStatus == null) throw new IllegalArgumentException("The dcvStatus argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        TypedQuery<DdpDocnameConv> q = em.createQuery("SELECT o FROM DdpDocnameConv AS o WHERE o.dcvStatus = :dcvStatus", DdpDocnameConv.class);
        q.setParameter("dcvStatus", dcvStatus);
        return q;
    }
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDdpAedRules(Set<DdpAedRule> ddpAedRules) {
        if (ddpAedRules == null) throw new IllegalArgumentException("The ddpAedRules argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DdpDocnameConv AS o WHERE");
        for (int i = 0; i < ddpAedRules.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :ddpAedRules_item").append(i).append(" MEMBER OF o.ddpAedRules");
        }
        TypedQuery<DdpDocnameConv> q = em.createQuery(queryBuilder.toString(), DdpDocnameConv.class);
        int ddpAedRulesIndex = 0;
        for (DdpAedRule _ddpaedrule: ddpAedRules) {
            q.setParameter("ddpAedRules_item" + ddpAedRulesIndex++, _ddpaedrule);
        }
        return q;
    }
    
    public static TypedQuery<DdpDocnameConv> DdpDocnameConv.findDdpDocnameConvsByDdpExportRules(Set<DdpExportRule> ddpExportRules) {
        if (ddpExportRules == null) throw new IllegalArgumentException("The ddpExportRules argument is required");
        EntityManager em = DdpDocnameConv.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DdpDocnameConv AS o WHERE");
        for (int i = 0; i < ddpExportRules.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :ddpExportRules_item").append(i).append(" MEMBER OF o.ddpExportRules");
        }
        TypedQuery<DdpDocnameConv> q = em.createQuery(queryBuilder.toString(), DdpDocnameConv.class);
        int ddpExportRulesIndex = 0;
        for (DdpExportRule _ddpexportrule: ddpExportRules) {
            q.setParameter("ddpExportRules_item" + ddpExportRulesIndex++, _ddpexportrule);
        }
        return q;
    }
    
}
