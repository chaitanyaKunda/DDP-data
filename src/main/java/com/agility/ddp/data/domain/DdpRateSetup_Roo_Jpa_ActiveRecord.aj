// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpRateSetup;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DdpRateSetup_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager DdpRateSetup.entityManager;
    
    public static final EntityManager DdpRateSetup.entityManager() {
        EntityManager em = new DdpRateSetup().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DdpRateSetup.countDdpRateSetups() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DdpRateSetup o", Long.class).getSingleResult();
    }
    
    public static List<DdpRateSetup> DdpRateSetup.findAllDdpRateSetups() {
        return entityManager().createQuery("SELECT o FROM DdpRateSetup o", DdpRateSetup.class).getResultList();
    }
    
    public static DdpRateSetup DdpRateSetup.findDdpRateSetup(Integer rtsId) {
        if (rtsId == null) return null;
        return entityManager().find(DdpRateSetup.class, rtsId);
    }
    
    public static List<DdpRateSetup> DdpRateSetup.findDdpRateSetupEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DdpRateSetup o", DdpRateSetup.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DdpRateSetup.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DdpRateSetup.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DdpRateSetup attached = DdpRateSetup.findDdpRateSetup(this.rtsId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DdpRateSetup.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DdpRateSetup.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DdpRateSetup DdpRateSetup.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DdpRateSetup merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
