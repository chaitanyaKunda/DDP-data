// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedRule;
import com.agility.ddp.data.domain.DdpCommunicationSetup;
import com.agility.ddp.data.domain.DdpCompressionSetup;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.data.domain.DdpScheduler;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DdpAedRule_Roo_Finder {
    
    public static TypedQuery<DdpAedRule> DdpAedRule.findDdpAedRulesByAedCommunicationId(DdpCommunicationSetup aedCommunicationId) {
        if (aedCommunicationId == null) throw new IllegalArgumentException("The aedCommunicationId argument is required");
        EntityManager em = DdpAedRule.entityManager();
        TypedQuery<DdpAedRule> q = em.createQuery("SELECT o FROM DdpAedRule AS o WHERE o.aedCommunicationId = :aedCommunicationId", DdpAedRule.class);
        q.setParameter("aedCommunicationId", aedCommunicationId);
        return q;
    }
    
    public static TypedQuery<DdpAedRule> DdpAedRule.findDdpAedRulesByAedCompressionId(DdpCompressionSetup aedCompressionId) {
        if (aedCompressionId == null) throw new IllegalArgumentException("The aedCompressionId argument is required");
        EntityManager em = DdpAedRule.entityManager();
        TypedQuery<DdpAedRule> q = em.createQuery("SELECT o FROM DdpAedRule AS o WHERE o.aedCompressionId = :aedCompressionId", DdpAedRule.class);
        q.setParameter("aedCompressionId", aedCompressionId);
        return q;
    }
    
    public static TypedQuery<DdpAedRule> DdpAedRule.findDdpAedRulesByAedSchedulerId(DdpScheduler aedSchedulerId) {
        if (aedSchedulerId == null) throw new IllegalArgumentException("The aedSchedulerId argument is required");
        EntityManager em = DdpAedRule.entityManager();
        TypedQuery<DdpAedRule> q = em.createQuery("SELECT o FROM DdpAedRule AS o WHERE o.aedSchedulerId = :aedSchedulerId", DdpAedRule.class);
        q.setParameter("aedSchedulerId", aedSchedulerId);
        return q;
    }
    
    public static TypedQuery<DdpAedRule> DdpAedRule.findDdpAedRulesByDdpRule(DdpRule ddpRule) {
        if (ddpRule == null) throw new IllegalArgumentException("The ddpRule argument is required");
        EntityManager em = DdpAedRule.entityManager();
        TypedQuery<DdpAedRule> q = em.createQuery("SELECT o FROM DdpAedRule AS o WHERE o.ddpRule = :ddpRule", DdpAedRule.class);
        q.setParameter("ddpRule", ddpRule);
        return q;
    }
    
}
