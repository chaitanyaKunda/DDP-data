// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DdpDmsDocsTxn_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager DdpDmsDocsTxn.entityManager;
    
    public static final EntityManager DdpDmsDocsTxn.entityManager() {
        EntityManager em = new DdpDmsDocsTxn().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DdpDmsDocsTxn.countDdpDmsDocsTxns() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DdpDmsDocsTxn o", Long.class).getSingleResult();
    }
    
    public static List<DdpDmsDocsTxn> DdpDmsDocsTxn.findAllDdpDmsDocsTxns() {
        return entityManager().createQuery("SELECT o FROM DdpDmsDocsTxn o", DdpDmsDocsTxn.class).getResultList();
    }
    
    public static DdpDmsDocsTxn DdpDmsDocsTxn.findDdpDmsDocsTxn(Integer dtxId) {
        if (dtxId == null) return null;
        return entityManager().find(DdpDmsDocsTxn.class, dtxId);
    }
    
    public static List<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DdpDmsDocsTxn o", DdpDmsDocsTxn.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DdpDmsDocsTxn.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DdpDmsDocsTxn.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DdpDmsDocsTxn attached = DdpDmsDocsTxn.findDdpDmsDocsTxn(this.dtxId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DdpDmsDocsTxn.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DdpDmsDocsTxn.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DdpDmsDocsTxn DdpDmsDocsTxn.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DdpDmsDocsTxn merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
