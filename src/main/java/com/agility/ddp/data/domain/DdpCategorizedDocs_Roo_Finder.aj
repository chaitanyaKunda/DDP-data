// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCategorizedAuditTxn;
import com.agility.ddp.data.domain.DdpCategorizedDocs;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import com.agility.ddp.data.domain.DdpRule;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DdpCategorizedDocs_Roo_Finder {
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatCurrentPmEquals(String catCurrentPm) {
        if (catCurrentPm == null || catCurrentPm.length() == 0) throw new IllegalArgumentException("The catCurrentPm argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catCurrentPm = :catCurrentPm", DdpCategorizedDocs.class);
        q.setParameter("catCurrentPm", catCurrentPm);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatCurrentPmFailedCountEquals(Integer catCurrentPmFailedCount) {
        if (catCurrentPmFailedCount == null) throw new IllegalArgumentException("The catCurrentPmFailedCount argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catCurrentPmFailedCount = :catCurrentPmFailedCount", DdpCategorizedDocs.class);
        q.setParameter("catCurrentPmFailedCount", catCurrentPmFailedCount);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatCurrentPmSeqEquals(Integer catCurrentPmSeq) {
        if (catCurrentPmSeq == null) throw new IllegalArgumentException("The catCurrentPmSeq argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catCurrentPmSeq = :catCurrentPmSeq", DdpCategorizedDocs.class);
        q.setParameter("catCurrentPmSeq", catCurrentPmSeq);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatDtxId(DdpDmsDocsTxn catDtxId) {
        if (catDtxId == null) throw new IllegalArgumentException("The catDtxId argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catDtxId = :catDtxId", DdpCategorizedDocs.class);
        q.setParameter("catDtxId", catDtxId);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatNextPmEquals(String catNextPm) {
        if (catNextPm == null || catNextPm.length() == 0) throw new IllegalArgumentException("The catNextPm argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catNextPm = :catNextPm", DdpCategorizedDocs.class);
        q.setParameter("catNextPm", catNextPm);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatPrevPmEquals(String catPrevPm) {
        if (catPrevPm == null || catPrevPm.length() == 0) throw new IllegalArgumentException("The catPrevPm argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catPrevPm = :catPrevPm", DdpCategorizedDocs.class);
        q.setParameter("catPrevPm", catPrevPm);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatRdtIdEquals(Integer catRdtId) {
        if (catRdtId == null) throw new IllegalArgumentException("The catRdtId argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catRdtId = :catRdtId", DdpCategorizedDocs.class);
        q.setParameter("catRdtId", catRdtId);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatRulId(DdpRule catRulId) {
        if (catRulId == null) throw new IllegalArgumentException("The catRulId argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catRulId = :catRulId", DdpCategorizedDocs.class);
        q.setParameter("catRulId", catRulId);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatRuleTypeEquals(String catRuleType) {
        if (catRuleType == null || catRuleType.length() == 0) throw new IllegalArgumentException("The catRuleType argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catRuleType = :catRuleType", DdpCategorizedDocs.class);
        q.setParameter("catRuleType", catRuleType);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatStatusEquals(Integer catStatus) {
        if (catStatus == null) throw new IllegalArgumentException("The catStatus argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catStatus = :catStatus", DdpCategorizedDocs.class);
        q.setParameter("catStatus", catStatus);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatSynIdEquals(Integer catSynId) {
        if (catSynId == null) throw new IllegalArgumentException("The catSynId argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catSynId = :catSynId", DdpCategorizedDocs.class);
        q.setParameter("catSynId", catSynId);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByCatTotalPmReqEquals(Integer catTotalPmReq) {
        if (catTotalPmReq == null) throw new IllegalArgumentException("The catTotalPmReq argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        TypedQuery<DdpCategorizedDocs> q = em.createQuery("SELECT o FROM DdpCategorizedDocs AS o WHERE o.catTotalPmReq = :catTotalPmReq", DdpCategorizedDocs.class);
        q.setParameter("catTotalPmReq", catTotalPmReq);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDocs> DdpCategorizedDocs.findDdpCategorizedDocsesByDdpCategorizedAuditTxns(Set<DdpCategorizedAuditTxn> ddpCategorizedAuditTxns) {
        if (ddpCategorizedAuditTxns == null) throw new IllegalArgumentException("The ddpCategorizedAuditTxns argument is required");
        EntityManager em = DdpCategorizedDocs.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DdpCategorizedDocs AS o WHERE");
        for (int i = 0; i < ddpCategorizedAuditTxns.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :ddpCategorizedAuditTxns_item").append(i).append(" MEMBER OF o.ddpCategorizedAuditTxns");
        }
        TypedQuery<DdpCategorizedDocs> q = em.createQuery(queryBuilder.toString(), DdpCategorizedDocs.class);
        int ddpCategorizedAuditTxnsIndex = 0;
        for (DdpCategorizedAuditTxn _ddpcategorizedaudittxn: ddpCategorizedAuditTxns) {
            q.setParameter("ddpCategorizedAuditTxns_item" + ddpCategorizedAuditTxnsIndex++, _ddpcategorizedaudittxn);
        }
        return q;
    }
    
}
