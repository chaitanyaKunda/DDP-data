// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCategorizedDetail;
import com.agility.ddp.data.domain.DdpCategorizedDocs;
import com.agility.ddp.data.domain.DdpDmsDocsDetail;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DdpDmsDocsTxn_Roo_Finder {
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDdpCategorizedDetails(Set<DdpCategorizedDetail> ddpCategorizedDetails) {
        if (ddpCategorizedDetails == null) throw new IllegalArgumentException("The ddpCategorizedDetails argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DdpDmsDocsTxn AS o WHERE");
        for (int i = 0; i < ddpCategorizedDetails.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :ddpCategorizedDetails_item").append(i).append(" MEMBER OF o.ddpCategorizedDetails");
        }
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery(queryBuilder.toString(), DdpDmsDocsTxn.class);
        int ddpCategorizedDetailsIndex = 0;
        for (DdpCategorizedDetail _ddpcategorizeddetail: ddpCategorizedDetails) {
            q.setParameter("ddpCategorizedDetails_item" + ddpCategorizedDetailsIndex++, _ddpcategorizeddetail);
        }
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDdpCategorizedDocss(Set<DdpCategorizedDocs> ddpCategorizedDocss) {
        if (ddpCategorizedDocss == null) throw new IllegalArgumentException("The ddpCategorizedDocss argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DdpDmsDocsTxn AS o WHERE");
        for (int i = 0; i < ddpCategorizedDocss.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :ddpCategorizedDocss_item").append(i).append(" MEMBER OF o.ddpCategorizedDocss");
        }
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery(queryBuilder.toString(), DdpDmsDocsTxn.class);
        int ddpCategorizedDocssIndex = 0;
        for (DdpCategorizedDocs _ddpcategorizeddocs: ddpCategorizedDocss) {
            q.setParameter("ddpCategorizedDocss_item" + ddpCategorizedDocssIndex++, _ddpcategorizeddocs);
        }
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDdpDmsDocsDetails(Set<DdpDmsDocsDetail> ddpDmsDocsDetails) {
        if (ddpDmsDocsDetails == null) throw new IllegalArgumentException("The ddpDmsDocsDetails argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DdpDmsDocsTxn AS o WHERE");
        for (int i = 0; i < ddpDmsDocsDetails.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :ddpDmsDocsDetails_item").append(i).append(" MEMBER OF o.ddpDmsDocsDetails");
        }
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery(queryBuilder.toString(), DdpDmsDocsTxn.class);
        int ddpDmsDocsDetailsIndex = 0;
        for (DdpDmsDocsDetail _ddpdmsdocsdetail: ddpDmsDocsDetails) {
            q.setParameter("ddpDmsDocsDetails_item" + ddpDmsDocsDetailsIndex++, _ddpdmsdocsdetail);
        }
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxArchiveEquals(String dtxArchive) {
        if (dtxArchive == null || dtxArchive.length() == 0) throw new IllegalArgumentException("The dtxArchive argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxArchive = :dtxArchive", DdpDmsDocsTxn.class);
        q.setParameter("dtxArchive", dtxArchive);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxGenSystemEquals(String dtxGenSystem) {
        if (dtxGenSystem == null || dtxGenSystem.length() == 0) throw new IllegalArgumentException("The dtxGenSystem argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxGenSystem = :dtxGenSystem", DdpDmsDocsTxn.class);
        q.setParameter("dtxGenSystem", dtxGenSystem);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxGenSystemLike(String dtxGenSystem) {
        if (dtxGenSystem == null || dtxGenSystem.length() == 0) throw new IllegalArgumentException("The dtxGenSystem argument is required");
        dtxGenSystem = dtxGenSystem.replace('*', '%');
        if (dtxGenSystem.charAt(0) != '%') {
            dtxGenSystem = "%" + dtxGenSystem;
        }
        if (dtxGenSystem.charAt(dtxGenSystem.length() - 1) != '%') {
            dtxGenSystem = dtxGenSystem + "%";
        }
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE LOWER(o.dtxGenSystem) LIKE LOWER(:dtxGenSystem)", DdpDmsDocsTxn.class);
        q.setParameter("dtxGenSystem", dtxGenSystem);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxIsProcessReqEquals(String dtxIsProcessReq) {
        if (dtxIsProcessReq == null || dtxIsProcessReq.length() == 0) throw new IllegalArgumentException("The dtxIsProcessReq argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxIsProcessReq = :dtxIsProcessReq", DdpDmsDocsTxn.class);
        q.setParameter("dtxIsProcessReq", dtxIsProcessReq);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxIsProcessReqNotEquals(String dtxIsProcessReq) {
        if (dtxIsProcessReq == null || dtxIsProcessReq.length() == 0) throw new IllegalArgumentException("The dtxIsProcessReq argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxIsProcessReq != :dtxIsProcessReq", DdpDmsDocsTxn.class);
        q.setParameter("dtxIsProcessReq", dtxIsProcessReq);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRObjectIdEquals(String dtxRObjectId) {
        if (dtxRObjectId == null || dtxRObjectId.length() == 0) throw new IllegalArgumentException("The dtxRObjectId argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRObjectId = :dtxRObjectId", DdpDmsDocsTxn.class);
        q.setParameter("dtxRObjectId", dtxRObjectId);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRObjectIdIsNotNull() {
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRObjectId IS NOT NULL", DdpDmsDocsTxn.class);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRObjectIdIsNull() {
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRObjectId IS NULL", DdpDmsDocsTxn.class);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRObjectIdLike(String dtxRObjectId) {
        if (dtxRObjectId == null || dtxRObjectId.length() == 0) throw new IllegalArgumentException("The dtxRObjectId argument is required");
        dtxRObjectId = dtxRObjectId.replace('*', '%');
        if (dtxRObjectId.charAt(0) != '%') {
            dtxRObjectId = "%" + dtxRObjectId;
        }
        if (dtxRObjectId.charAt(dtxRObjectId.length() - 1) != '%') {
            dtxRObjectId = dtxRObjectId + "%";
        }
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE LOWER(o.dtxRObjectId) LIKE LOWER(:dtxRObjectId)", DdpDmsDocsTxn.class);
        q.setParameter("dtxRObjectId", dtxRObjectId);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionDateIsNotNull() {
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRetentionDate IS NOT NULL", DdpDmsDocsTxn.class);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionDateIsNull() {
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRetentionDate IS NULL", DdpDmsDocsTxn.class);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionIdBetween(Integer minDtxRetentionId, Integer maxDtxRetentionId) {
        if (minDtxRetentionId == null) throw new IllegalArgumentException("The minDtxRetentionId argument is required");
        if (maxDtxRetentionId == null) throw new IllegalArgumentException("The maxDtxRetentionId argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRetentionId BETWEEN :minDtxRetentionId AND :maxDtxRetentionId", DdpDmsDocsTxn.class);
        q.setParameter("minDtxRetentionId", minDtxRetentionId);
        q.setParameter("maxDtxRetentionId", maxDtxRetentionId);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionIdEquals(Integer dtxRetentionId) {
        if (dtxRetentionId == null) throw new IllegalArgumentException("The dtxRetentionId argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRetentionId = :dtxRetentionId", DdpDmsDocsTxn.class);
        q.setParameter("dtxRetentionId", dtxRetentionId);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionIdIsNotNull() {
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRetentionId IS NOT NULL", DdpDmsDocsTxn.class);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionIdIsNull() {
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxRetentionId IS NULL", DdpDmsDocsTxn.class);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxStatusEquals(String dtxStatus) {
        if (dtxStatus == null || dtxStatus.length() == 0) throw new IllegalArgumentException("The dtxStatus argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxStatus = :dtxStatus", DdpDmsDocsTxn.class);
        q.setParameter("dtxStatus", dtxStatus);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxStatusNotEquals(String dtxStatus) {
        if (dtxStatus == null || dtxStatus.length() == 0) throw new IllegalArgumentException("The dtxStatus argument is required");
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxStatus != :dtxStatus", DdpDmsDocsTxn.class);
        q.setParameter("dtxStatus", dtxStatus);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxTransLogsIsNotNull() {
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxTransLogs IS NOT NULL", DdpDmsDocsTxn.class);
        return q;
    }
    
    public static TypedQuery<DdpDmsDocsTxn> DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxTransLogsIsNull() {
        EntityManager em = DdpDmsDocsTxn.entityManager();
        TypedQuery<DdpDmsDocsTxn> q = em.createQuery("SELECT o FROM DdpDmsDocsTxn AS o WHERE o.dtxTransLogs IS NULL", DdpDmsDocsTxn.class);
        return q;
    }
    
}
