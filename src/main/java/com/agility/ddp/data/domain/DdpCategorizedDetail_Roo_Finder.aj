// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCategorizedDetail;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DdpCategorizedDetail_Roo_Finder {
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadDtxId(DdpDmsDocsTxn cadDtxId) {
        if (cadDtxId == null) throw new IllegalArgumentException("The cadDtxId argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadDtxId = :cadDtxId", DdpCategorizedDetail.class);
        q.setParameter("cadDtxId", cadDtxId);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadOriginSysIdEquals(Integer cadOriginSysId) {
        if (cadOriginSysId == null) throw new IllegalArgumentException("The cadOriginSysId argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadOriginSysId = :cadOriginSysId", DdpCategorizedDetail.class);
        q.setParameter("cadOriginSysId", cadOriginSysId);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadRObjectIdEquals(String cadRObjectId) {
        if (cadRObjectId == null || cadRObjectId.length() == 0) throw new IllegalArgumentException("The cadRObjectId argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadRObjectId = :cadRObjectId", DdpCategorizedDetail.class);
        q.setParameter("cadRObjectId", cadRObjectId);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadRulesCompletedCountEquals(Integer cadRulesCompletedCount) {
        if (cadRulesCompletedCount == null) throw new IllegalArgumentException("The cadRulesCompletedCount argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadRulesCompletedCount = :cadRulesCompletedCount", DdpCategorizedDetail.class);
        q.setParameter("cadRulesCompletedCount", cadRulesCompletedCount);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadRulesFailedCountEquals(Integer cadRulesFailedCount) {
        if (cadRulesFailedCount == null) throw new IllegalArgumentException("The cadRulesFailedCount argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadRulesFailedCount = :cadRulesFailedCount", DdpCategorizedDetail.class);
        q.setParameter("cadRulesFailedCount", cadRulesFailedCount);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadRulesInProgressCountEquals(Integer cadRulesInProgressCount) {
        if (cadRulesInProgressCount == null) throw new IllegalArgumentException("The cadRulesInProgressCount argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadRulesInProgressCount = :cadRulesInProgressCount", DdpCategorizedDetail.class);
        q.setParameter("cadRulesInProgressCount", cadRulesInProgressCount);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadServiceTypeEquals(String cadServiceType) {
        if (cadServiceType == null || cadServiceType.length() == 0) throw new IllegalArgumentException("The cadServiceType argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadServiceType = :cadServiceType", DdpCategorizedDetail.class);
        q.setParameter("cadServiceType", cadServiceType);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadStatusEquals(Integer cadStatus) {
        if (cadStatus == null) throw new IllegalArgumentException("The cadStatus argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadStatus = :cadStatus", DdpCategorizedDetail.class);
        q.setParameter("cadStatus", cadStatus);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadTotalRulesReqCountEquals(Integer cadTotalRulesReqCount) {
        if (cadTotalRulesReqCount == null) throw new IllegalArgumentException("The cadTotalRulesReqCount argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadTotalRulesReqCount = :cadTotalRulesReqCount", DdpCategorizedDetail.class);
        q.setParameter("cadTotalRulesReqCount", cadTotalRulesReqCount);
        return q;
    }
    
    public static TypedQuery<DdpCategorizedDetail> DdpCategorizedDetail.findDdpCategorizedDetailsByCadTransMessageEquals(String cadTransMessage) {
        if (cadTransMessage == null || cadTransMessage.length() == 0) throw new IllegalArgumentException("The cadTransMessage argument is required");
        EntityManager em = DdpCategorizedDetail.entityManager();
        TypedQuery<DdpCategorizedDetail> q = em.createQuery("SELECT o FROM DdpCategorizedDetail AS o WHERE o.cadTransMessage = :cadTransMessage", DdpCategorizedDetail.class);
        q.setParameter("cadTransMessage", cadTransMessage);
        return q;
    }
    
}
