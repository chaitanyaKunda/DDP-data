// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpBranch;
import com.agility.ddp.data.domain.DdpCommOptionsSetup;
import com.agility.ddp.data.domain.DdpCommunicationSetup;
import com.agility.ddp.data.domain.DdpCompany;
import com.agility.ddp.data.domain.DdpDoctype;
import com.agility.ddp.data.domain.DdpGenSystem;
import com.agility.ddp.data.domain.DdpNotification;
import com.agility.ddp.data.domain.DdpParty;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.data.domain.DdpRuleDetail;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DdpRuleDetail_Roo_Finder {
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByDdpCommOptionsSetups(Set<DdpCommOptionsSetup> ddpCommOptionsSetups) {
        if (ddpCommOptionsSetups == null) throw new IllegalArgumentException("The ddpCommOptionsSetups argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DdpRuleDetail AS o WHERE");
        for (int i = 0; i < ddpCommOptionsSetups.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :ddpCommOptionsSetups_item").append(i).append(" MEMBER OF o.ddpCommOptionsSetups");
        }
        TypedQuery<DdpRuleDetail> q = em.createQuery(queryBuilder.toString(), DdpRuleDetail.class);
        int ddpCommOptionsSetupsIndex = 0;
        for (DdpCommOptionsSetup _ddpcommoptionssetup: ddpCommOptionsSetups) {
            q.setParameter("ddpCommOptionsSetups_item" + ddpCommOptionsSetupsIndex++, _ddpcommoptionssetup);
        }
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtBranch(DdpBranch rdtBranch) {
        if (rdtBranch == null) throw new IllegalArgumentException("The rdtBranch argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtBranch = :rdtBranch", DdpRuleDetail.class);
        q.setParameter("rdtBranch", rdtBranch);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtCommunicationId(DdpCommunicationSetup rdtCommunicationId) {
        if (rdtCommunicationId == null) throw new IllegalArgumentException("The rdtCommunicationId argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtCommunicationId = :rdtCommunicationId", DdpRuleDetail.class);
        q.setParameter("rdtCommunicationId", rdtCommunicationId);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtCompany(DdpCompany rdtCompany) {
        if (rdtCompany == null) throw new IllegalArgumentException("The rdtCompany argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtCompany = :rdtCompany", DdpRuleDetail.class);
        q.setParameter("rdtCompany", rdtCompany);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtDocType(DdpDoctype rdtDocType) {
        if (rdtDocType == null) throw new IllegalArgumentException("The rdtDocType argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtDocType = :rdtDocType", DdpRuleDetail.class);
        q.setParameter("rdtDocType", rdtDocType);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtGenSystem(DdpGenSystem rdtGenSystem) {
        if (rdtGenSystem == null) throw new IllegalArgumentException("The rdtGenSystem argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtGenSystem = :rdtGenSystem", DdpRuleDetail.class);
        q.setParameter("rdtGenSystem", rdtGenSystem);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtNotificationId(DdpNotification rdtNotificationId) {
        if (rdtNotificationId == null) throw new IllegalArgumentException("The rdtNotificationId argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtNotificationId = :rdtNotificationId", DdpRuleDetail.class);
        q.setParameter("rdtNotificationId", rdtNotificationId);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtPartyCode(DdpParty rdtPartyCode) {
        if (rdtPartyCode == null) throw new IllegalArgumentException("The rdtPartyCode argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtPartyCode = :rdtPartyCode", DdpRuleDetail.class);
        q.setParameter("rdtPartyCode", rdtPartyCode);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtRuleId(DdpRule rdtRuleId) {
        if (rdtRuleId == null) throw new IllegalArgumentException("The rdtRuleId argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtRuleId = :rdtRuleId", DdpRuleDetail.class);
        q.setParameter("rdtRuleId", rdtRuleId);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtRuleTypeEquals(String rdtRuleType) {
        if (rdtRuleType == null || rdtRuleType.length() == 0) throw new IllegalArgumentException("The rdtRuleType argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtRuleType = :rdtRuleType", DdpRuleDetail.class);
        q.setParameter("rdtRuleType", rdtRuleType);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtRuleTypeLike(String rdtRuleType) {
        if (rdtRuleType == null || rdtRuleType.length() == 0) throw new IllegalArgumentException("The rdtRuleType argument is required");
        rdtRuleType = rdtRuleType.replace('*', '%');
        if (rdtRuleType.charAt(0) != '%') {
            rdtRuleType = "%" + rdtRuleType;
        }
        if (rdtRuleType.charAt(rdtRuleType.length() - 1) != '%') {
            rdtRuleType = rdtRuleType + "%";
        }
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE LOWER(o.rdtRuleType) LIKE LOWER(:rdtRuleType)", DdpRuleDetail.class);
        q.setParameter("rdtRuleType", rdtRuleType);
        return q;
    }
    
    public static TypedQuery<DdpRuleDetail> DdpRuleDetail.findDdpRuleDetailsByRdtRuleTypeNotEquals(String rdtRuleType) {
        if (rdtRuleType == null || rdtRuleType.length() == 0) throw new IllegalArgumentException("The rdtRuleType argument is required");
        EntityManager em = DdpRuleDetail.entityManager();
        TypedQuery<DdpRuleDetail> q = em.createQuery("SELECT o FROM DdpRuleDetail AS o WHERE o.rdtRuleType != :rdtRuleType", DdpRuleDetail.class);
        q.setParameter("rdtRuleType", rdtRuleType);
        return q;
    }
    
}
