// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpGenSourceSetup;
import com.agility.ddp.data.domain.DdpGenSourceSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpGenSourceSetupRepository;
import com.agility.ddp.data.domain.DdpGenSourceSetupService;
import com.agility.ddp.data.domain.DdpRuleDetail;
import com.agility.ddp.data.domain.DdpRuleDetailDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpGenSourceSetupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpGenSourceSetupDataOnDemand: @Component;
    
    private Random DdpGenSourceSetupDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpGenSourceSetup> DdpGenSourceSetupDataOnDemand.data;
    
    @Autowired
    DdpRuleDetailDataOnDemand DdpGenSourceSetupDataOnDemand.ddpRuleDetailDataOnDemand;
    
    @Autowired
    DdpGenSourceSetupService DdpGenSourceSetupDataOnDemand.ddpGenSourceSetupService;
    
    @Autowired
    DdpGenSourceSetupRepository DdpGenSourceSetupDataOnDemand.ddpGenSourceSetupRepository;
    
    public DdpGenSourceSetup DdpGenSourceSetupDataOnDemand.getNewTransientDdpGenSourceSetup(int index) {
        DdpGenSourceSetup obj = new DdpGenSourceSetup();
        setGssCreatedBy(obj, index);
        setGssCreatedDate(obj, index);
        setGssModifiedBy(obj, index);
        setGssModifiedDate(obj, index);
        setGssOption(obj, index);
        setGssRdtId(obj, index);
        return obj;
    }
    
    public void DdpGenSourceSetupDataOnDemand.setGssCreatedBy(DdpGenSourceSetup obj, int index) {
        String gssCreatedBy = "gssCreatedBy_" + index;
        if (gssCreatedBy.length() > 120) {
            gssCreatedBy = gssCreatedBy.substring(0, 120);
        }
        obj.setGssCreatedBy(gssCreatedBy);
    }
    
    public void DdpGenSourceSetupDataOnDemand.setGssCreatedDate(DdpGenSourceSetup obj, int index) {
        Calendar gssCreatedDate = Calendar.getInstance();
        obj.setGssCreatedDate(gssCreatedDate);
    }
    
    public void DdpGenSourceSetupDataOnDemand.setGssModifiedBy(DdpGenSourceSetup obj, int index) {
        String gssModifiedBy = "gssModifiedBy_" + index;
        if (gssModifiedBy.length() > 120) {
            gssModifiedBy = gssModifiedBy.substring(0, 120);
        }
        obj.setGssModifiedBy(gssModifiedBy);
    }
    
    public void DdpGenSourceSetupDataOnDemand.setGssModifiedDate(DdpGenSourceSetup obj, int index) {
        Calendar gssModifiedDate = Calendar.getInstance();
        obj.setGssModifiedDate(gssModifiedDate);
    }
    
    public void DdpGenSourceSetupDataOnDemand.setGssOption(DdpGenSourceSetup obj, int index) {
        String gssOption = "gssOption_" + index;
        if (gssOption.length() > 126) {
            gssOption = gssOption.substring(0, 126);
        }
        obj.setGssOption(gssOption);
    }
    
    public void DdpGenSourceSetupDataOnDemand.setGssRdtId(DdpGenSourceSetup obj, int index) {
        DdpRuleDetail gssRdtId = ddpRuleDetailDataOnDemand.getRandomDdpRuleDetail();
        obj.setGssRdtId(gssRdtId);
    }
    
    public DdpGenSourceSetup DdpGenSourceSetupDataOnDemand.getSpecificDdpGenSourceSetup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpGenSourceSetup obj = data.get(index);
        Integer id = obj.getGssId();
        return ddpGenSourceSetupService.findDdpGenSourceSetup(id);
    }
    
    public DdpGenSourceSetup DdpGenSourceSetupDataOnDemand.getRandomDdpGenSourceSetup() {
        init();
        DdpGenSourceSetup obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getGssId();
        return ddpGenSourceSetupService.findDdpGenSourceSetup(id);
    }
    
    public boolean DdpGenSourceSetupDataOnDemand.modifyDdpGenSourceSetup(DdpGenSourceSetup obj) {
        return false;
    }
    
    public void DdpGenSourceSetupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpGenSourceSetupService.findDdpGenSourceSetupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpGenSourceSetup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpGenSourceSetup>();
        for (int i = 0; i < 10; i++) {
            DdpGenSourceSetup obj = getNewTransientDdpGenSourceSetup(i);
            try {
                ddpGenSourceSetupService.saveDdpGenSourceSetup(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpGenSourceSetupRepository.flush();
            data.add(obj);
        }
    }
    
}
