// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import com.agility.ddp.data.domain.DdpDmsDocsTxnDataOnDemand;
import com.agility.ddp.data.domain.DdpDmsDocsTxnRepository;
import com.agility.ddp.data.domain.DdpDmsDocsTxnService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpDmsDocsTxnDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpDmsDocsTxnDataOnDemand: @Component;
    
    private Random DdpDmsDocsTxnDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpDmsDocsTxn> DdpDmsDocsTxnDataOnDemand.data;
    
    @Autowired
    DdpDmsDocsTxnService DdpDmsDocsTxnDataOnDemand.ddpDmsDocsTxnService;
    
    @Autowired
    DdpDmsDocsTxnRepository DdpDmsDocsTxnDataOnDemand.ddpDmsDocsTxnRepository;
    
    public DdpDmsDocsTxn DdpDmsDocsTxnDataOnDemand.getNewTransientDdpDmsDocsTxn(int index) {
        DdpDmsDocsTxn obj = new DdpDmsDocsTxn();
        setDtxArchive(obj, index);
        setDtxCreatedBy(obj, index);
        setDtxCreatedDate(obj, index);
        setDtxGenSystem(obj, index);
        setDtxIsProcessReq(obj, index);
        setDtxModifiedBy(obj, index);
        setDtxModifiedDate(obj, index);
        setDtxRObjectId(obj, index);
        setDtxRetentionDate(obj, index);
        setDtxRetentionId(obj, index);
        setDtxStatus(obj, index);
        setDtxSynId(obj, index);
        setDtxTransLogs(obj, index);
        return obj;
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxArchive(DdpDmsDocsTxn obj, int index) {
        String dtxArchive = "dtxArchive_" + index;
        if (dtxArchive.length() > 45) {
            dtxArchive = dtxArchive.substring(0, 45);
        }
        obj.setDtxArchive(dtxArchive);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxCreatedBy(DdpDmsDocsTxn obj, int index) {
        String dtxCreatedBy = "dtxCreatedBy_" + index;
        if (dtxCreatedBy.length() > 120) {
            dtxCreatedBy = dtxCreatedBy.substring(0, 120);
        }
        obj.setDtxCreatedBy(dtxCreatedBy);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxCreatedDate(DdpDmsDocsTxn obj, int index) {
        Calendar dtxCreatedDate = Calendar.getInstance();
        obj.setDtxCreatedDate(dtxCreatedDate);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxGenSystem(DdpDmsDocsTxn obj, int index) {
        String dtxGenSystem = "dtxGenSystem_" + index;
        if (dtxGenSystem.length() > 32) {
            dtxGenSystem = dtxGenSystem.substring(0, 32);
        }
        obj.setDtxGenSystem(dtxGenSystem);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxIsProcessReq(DdpDmsDocsTxn obj, int index) {
        String dtxIsProcessReq = "dtxI_" + index;
        if (dtxIsProcessReq.length() > 6) {
            dtxIsProcessReq = dtxIsProcessReq.substring(0, 6);
        }
        obj.setDtxIsProcessReq(dtxIsProcessReq);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxModifiedBy(DdpDmsDocsTxn obj, int index) {
        String dtxModifiedBy = "dtxModifiedBy_" + index;
        if (dtxModifiedBy.length() > 120) {
            dtxModifiedBy = dtxModifiedBy.substring(0, 120);
        }
        obj.setDtxModifiedBy(dtxModifiedBy);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxModifiedDate(DdpDmsDocsTxn obj, int index) {
        Calendar dtxModifiedDate = Calendar.getInstance();
        obj.setDtxModifiedDate(dtxModifiedDate);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxRObjectId(DdpDmsDocsTxn obj, int index) {
        String dtxRObjectId = "dtxRObjectId_" + index;
        if (dtxRObjectId.length() > 16) {
            dtxRObjectId = dtxRObjectId.substring(0, 16);
        }
        obj.setDtxRObjectId(dtxRObjectId);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxRetentionDate(DdpDmsDocsTxn obj, int index) {
        String dtxRetentionDate = "dtxReten_" + index;
        if (dtxRetentionDate.length() > 10) {
            dtxRetentionDate = dtxRetentionDate.substring(0, 10);
        }
        obj.setDtxRetentionDate(dtxRetentionDate);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxRetentionId(DdpDmsDocsTxn obj, int index) {
        Integer dtxRetentionId = new Integer(index);
        obj.setDtxRetentionId(dtxRetentionId);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxStatus(DdpDmsDocsTxn obj, int index) {
        String dtxStatus = "dtxStatus_" + index;
        if (dtxStatus.length() > 45) {
            dtxStatus = dtxStatus.substring(0, 45);
        }
        obj.setDtxStatus(dtxStatus);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxSynId(DdpDmsDocsTxn obj, int index) {
        Integer dtxSynId = new Integer(index);
        obj.setDtxSynId(dtxSynId);
    }
    
    public void DdpDmsDocsTxnDataOnDemand.setDtxTransLogs(DdpDmsDocsTxn obj, int index) {
        String dtxTransLogs = "dtxTransLogs_" + index;
        if (dtxTransLogs.length() > 250) {
            dtxTransLogs = dtxTransLogs.substring(0, 250);
        }
        obj.setDtxTransLogs(dtxTransLogs);
    }
    
    public DdpDmsDocsTxn DdpDmsDocsTxnDataOnDemand.getSpecificDdpDmsDocsTxn(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpDmsDocsTxn obj = data.get(index);
        Integer id = obj.getDtxId();
        return ddpDmsDocsTxnService.findDdpDmsDocsTxn(id);
    }
    
    public DdpDmsDocsTxn DdpDmsDocsTxnDataOnDemand.getRandomDdpDmsDocsTxn() {
        init();
        DdpDmsDocsTxn obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getDtxId();
        return ddpDmsDocsTxnService.findDdpDmsDocsTxn(id);
    }
    
    public boolean DdpDmsDocsTxnDataOnDemand.modifyDdpDmsDocsTxn(DdpDmsDocsTxn obj) {
        return false;
    }
    
    public void DdpDmsDocsTxnDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpDmsDocsTxnService.findDdpDmsDocsTxnEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpDmsDocsTxn' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpDmsDocsTxn>();
        for (int i = 0; i < 10; i++) {
            DdpDmsDocsTxn obj = getNewTransientDdpDmsDocsTxn(i);
            try {
                ddpDmsDocsTxnService.saveDdpDmsDocsTxn(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpDmsDocsTxnRepository.flush();
            data.add(obj);
        }
    }
    
}
