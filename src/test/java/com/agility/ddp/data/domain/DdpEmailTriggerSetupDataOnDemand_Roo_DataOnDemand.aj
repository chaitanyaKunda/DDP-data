// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpEmailTriggerSetup;
import com.agility.ddp.data.domain.DdpEmailTriggerSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpEmailTriggerSetupRepository;
import com.agility.ddp.data.domain.DdpEmailTriggerSetupService;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.data.domain.DdpRuleDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpEmailTriggerSetupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpEmailTriggerSetupDataOnDemand: @Component;
    
    private Random DdpEmailTriggerSetupDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpEmailTriggerSetup> DdpEmailTriggerSetupDataOnDemand.data;
    
    @Autowired
    DdpRuleDataOnDemand DdpEmailTriggerSetupDataOnDemand.ddpRuleDataOnDemand;
    
    @Autowired
    DdpEmailTriggerSetupService DdpEmailTriggerSetupDataOnDemand.ddpEmailTriggerSetupService;
    
    @Autowired
    DdpEmailTriggerSetupRepository DdpEmailTriggerSetupDataOnDemand.ddpEmailTriggerSetupRepository;
    
    public DdpEmailTriggerSetup DdpEmailTriggerSetupDataOnDemand.getNewTransientDdpEmailTriggerSetup(int index) {
        DdpEmailTriggerSetup obj = new DdpEmailTriggerSetup();
        setEtrCronExpression(obj, index);
        setEtrDocSelection(obj, index);
        setEtrDocTypes(obj, index);
        setEtrRetries(obj, index);
        setEtrRuleId(obj, index);
        setEtrTriggerName(obj, index);
        return obj;
    }
    
    public void DdpEmailTriggerSetupDataOnDemand.setEtrCronExpression(DdpEmailTriggerSetup obj, int index) {
        String etrCronExpression = "etrCronExpression_" + index;
        if (etrCronExpression.length() > 64) {
            etrCronExpression = etrCronExpression.substring(0, 64);
        }
        obj.setEtrCronExpression(etrCronExpression);
    }
    
    public void DdpEmailTriggerSetupDataOnDemand.setEtrDocSelection(DdpEmailTriggerSetup obj, int index) {
        String etrDocSelection = "etrDocSelection_" + index;
        if (etrDocSelection.length() > 64) {
            etrDocSelection = etrDocSelection.substring(0, 64);
        }
        obj.setEtrDocSelection(etrDocSelection);
    }
    
    public void DdpEmailTriggerSetupDataOnDemand.setEtrDocTypes(DdpEmailTriggerSetup obj, int index) {
        String etrDocTypes = "etrDocTypes_" + index;
        if (etrDocTypes.length() > 1000) {
            etrDocTypes = etrDocTypes.substring(0, 1000);
        }
        obj.setEtrDocTypes(etrDocTypes);
    }
    
    public void DdpEmailTriggerSetupDataOnDemand.setEtrRetries(DdpEmailTriggerSetup obj, int index) {
        Integer etrRetries = new Integer(index);
        obj.setEtrRetries(etrRetries);
    }
    
    public void DdpEmailTriggerSetupDataOnDemand.setEtrRuleId(DdpEmailTriggerSetup obj, int index) {
        DdpRule etrRuleId = ddpRuleDataOnDemand.getRandomDdpRule();
        obj.setEtrRuleId(etrRuleId);
    }
    
    public void DdpEmailTriggerSetupDataOnDemand.setEtrTriggerName(DdpEmailTriggerSetup obj, int index) {
        String etrTriggerName = "etrTriggerName_" + index;
        if (etrTriggerName.length() > 64) {
            etrTriggerName = etrTriggerName.substring(0, 64);
        }
        obj.setEtrTriggerName(etrTriggerName);
    }
    
    public DdpEmailTriggerSetup DdpEmailTriggerSetupDataOnDemand.getSpecificDdpEmailTriggerSetup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpEmailTriggerSetup obj = data.get(index);
        Integer id = obj.getEtrId();
        return ddpEmailTriggerSetupService.findDdpEmailTriggerSetup(id);
    }
    
    public DdpEmailTriggerSetup DdpEmailTriggerSetupDataOnDemand.getRandomDdpEmailTriggerSetup() {
        init();
        DdpEmailTriggerSetup obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getEtrId();
        return ddpEmailTriggerSetupService.findDdpEmailTriggerSetup(id);
    }
    
    public boolean DdpEmailTriggerSetupDataOnDemand.modifyDdpEmailTriggerSetup(DdpEmailTriggerSetup obj) {
        return false;
    }
    
    public void DdpEmailTriggerSetupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpEmailTriggerSetupService.findDdpEmailTriggerSetupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpEmailTriggerSetup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpEmailTriggerSetup>();
        for (int i = 0; i < 10; i++) {
            DdpEmailTriggerSetup obj = getNewTransientDdpEmailTriggerSetup(i);
            try {
                ddpEmailTriggerSetupService.saveDdpEmailTriggerSetup(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpEmailTriggerSetupRepository.flush();
            data.add(obj);
        }
    }
    
}
