// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpBranch;
import com.agility.ddp.data.domain.DdpBranchDataOnDemand;
import com.agility.ddp.data.domain.DdpBranchRepository;
import com.agility.ddp.data.domain.DdpBranchService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpBranchDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpBranchDataOnDemand: @Component;
    
    private Random DdpBranchDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpBranch> DdpBranchDataOnDemand.data;
    
    @Autowired
    DdpBranchService DdpBranchDataOnDemand.ddpBranchService;
    
    @Autowired
    DdpBranchRepository DdpBranchDataOnDemand.ddpBranchRepository;
    
    public DdpBranch DdpBranchDataOnDemand.getNewTransientDdpBranch(int index) {
        DdpBranch obj = new DdpBranch();
        setBrnBranchName(obj, index);
        setBrnCompnayCode(obj, index);
        setBrnStatus(obj, index);
        return obj;
    }
    
    public void DdpBranchDataOnDemand.setBrnBranchName(DdpBranch obj, int index) {
        String brnBranchName = "brnBranchName_" + index;
        if (brnBranchName.length() > 64) {
            brnBranchName = brnBranchName.substring(0, 64);
        }
        obj.setBrnBranchName(brnBranchName);
    }
    
    public void DdpBranchDataOnDemand.setBrnCompnayCode(DdpBranch obj, int index) {
        String brnCompnayCode = "b_" + index;
        if (brnCompnayCode.length() > 3) {
            brnCompnayCode = brnCompnayCode.substring(0, 3);
        }
        obj.setBrnCompnayCode(brnCompnayCode);
    }
    
    public void DdpBranchDataOnDemand.setBrnStatus(DdpBranch obj, int index) {
        Integer brnStatus = new Integer(index);
        obj.setBrnStatus(brnStatus);
    }
    
    public DdpBranch DdpBranchDataOnDemand.getSpecificDdpBranch(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpBranch obj = data.get(index);
        String id = obj.getBrnBranchCode();
        return ddpBranchService.findDdpBranch(id);
    }
    
    public DdpBranch DdpBranchDataOnDemand.getRandomDdpBranch() {
        init();
        DdpBranch obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getBrnBranchCode();
        return ddpBranchService.findDdpBranch(id);
    }
    
    public boolean DdpBranchDataOnDemand.modifyDdpBranch(DdpBranch obj) {
        return false;
    }
    
    public void DdpBranchDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpBranchService.findDdpBranchEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpBranch' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpBranch>();
        for (int i = 0; i < 10; i++) {
            DdpBranch obj = getNewTransientDdpBranch(i);
            try {
                ddpBranchService.saveDdpBranch(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpBranchRepository.flush();
            data.add(obj);
        }
    }
    
}
