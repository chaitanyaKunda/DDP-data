// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpScheduler;
import com.agility.ddp.data.domain.DdpSchedulerDataOnDemand;
import com.agility.ddp.data.domain.DdpSchedulerRepository;
import com.agility.ddp.data.domain.DdpSchedulerService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpSchedulerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpSchedulerDataOnDemand: @Component;
    
    private Random DdpSchedulerDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpScheduler> DdpSchedulerDataOnDemand.data;
    
    @Autowired
    DdpSchedulerService DdpSchedulerDataOnDemand.ddpSchedulerService;
    
    @Autowired
    DdpSchedulerRepository DdpSchedulerDataOnDemand.ddpSchedulerRepository;
    
    public DdpScheduler DdpSchedulerDataOnDemand.getNewTransientDdpScheduler(int index) {
        DdpScheduler obj = new DdpScheduler();
        setSchBatchingCriteria(obj, index);
        setSchChoosenType(obj, index);
        setSchCreatedBy(obj, index);
        setSchCreatedDate(obj, index);
        setSchCronExpressions(obj, index);
        setSchDelayCount(obj, index);
        setSchDelayIn(obj, index);
        setSchEndDate(obj, index);
        setSchFailedCount(obj, index);
        setSchIsRunning(obj, index);
        setSchLastFailedRun(obj, index);
        setSchLastRun(obj, index);
        setSchLastRunStatus(obj, index);
        setSchLastSuccessRun(obj, index);
        setSchModifiedBy(obj, index);
        setSchModifiedDate(obj, index);
        setSchNextRun(obj, index);
        setSchNotificationId(obj, index);
        setSchProcessingStatus(obj, index);
        setSchRepeatCount(obj, index);
        setSchReportEmailCc(obj, index);
        setSchReportEmailTo(obj, index);
        setSchReportFrequency(obj, index);
        setSchRuleCategory(obj, index);
        setSchRuleType(obj, index);
        setSchStartDate(obj, index);
        setSchStatus(obj, index);
        setSchSuccessCount(obj, index);
        setSchTimeInterval(obj, index);
        setSchType(obj, index);
        return obj;
    }
    
    public void DdpSchedulerDataOnDemand.setSchBatchingCriteria(DdpScheduler obj, int index) {
        String schBatchingCriteria = "schBatchingCriteria_" + index;
        if (schBatchingCriteria.length() > 32) {
            schBatchingCriteria = schBatchingCriteria.substring(0, 32);
        }
        obj.setSchBatchingCriteria(schBatchingCriteria);
    }
    
    public void DdpSchedulerDataOnDemand.setSchChoosenType(DdpScheduler obj, int index) {
        Integer schChoosenType = new Integer(index);
        obj.setSchChoosenType(schChoosenType);
    }
    
    public void DdpSchedulerDataOnDemand.setSchCreatedBy(DdpScheduler obj, int index) {
        String schCreatedBy = "schCreatedBy_" + index;
        if (schCreatedBy.length() > 120) {
            schCreatedBy = schCreatedBy.substring(0, 120);
        }
        obj.setSchCreatedBy(schCreatedBy);
    }
    
    public void DdpSchedulerDataOnDemand.setSchCreatedDate(DdpScheduler obj, int index) {
        Calendar schCreatedDate = Calendar.getInstance();
        obj.setSchCreatedDate(schCreatedDate);
    }
    
    public void DdpSchedulerDataOnDemand.setSchCronExpressions(DdpScheduler obj, int index) {
        String schCronExpressions = "schCronExpressions_" + index;
        if (schCronExpressions.length() > 120) {
            schCronExpressions = schCronExpressions.substring(0, 120);
        }
        obj.setSchCronExpressions(schCronExpressions);
    }
    
    public void DdpSchedulerDataOnDemand.setSchDelayCount(DdpScheduler obj, int index) {
        Integer schDelayCount = new Integer(index);
        obj.setSchDelayCount(schDelayCount);
    }
    
    public void DdpSchedulerDataOnDemand.setSchDelayIn(DdpScheduler obj, int index) {
        String schDelayIn = "schDelayIn_" + index;
        if (schDelayIn.length() > 32) {
            schDelayIn = schDelayIn.substring(0, 32);
        }
        obj.setSchDelayIn(schDelayIn);
    }
    
    public void DdpSchedulerDataOnDemand.setSchEndDate(DdpScheduler obj, int index) {
        Calendar schEndDate = Calendar.getInstance();
        obj.setSchEndDate(schEndDate);
    }
    
    public void DdpSchedulerDataOnDemand.setSchFailedCount(DdpScheduler obj, int index) {
        Integer schFailedCount = new Integer(index);
        obj.setSchFailedCount(schFailedCount);
    }
    
    public void DdpSchedulerDataOnDemand.setSchIsRunning(DdpScheduler obj, int index) {
        Integer schIsRunning = new Integer(index);
        obj.setSchIsRunning(schIsRunning);
    }
    
    public void DdpSchedulerDataOnDemand.setSchLastFailedRun(DdpScheduler obj, int index) {
        Calendar schLastFailedRun = Calendar.getInstance();
        obj.setSchLastFailedRun(schLastFailedRun);
    }
    
    public void DdpSchedulerDataOnDemand.setSchLastRun(DdpScheduler obj, int index) {
        Calendar schLastRun = Calendar.getInstance();
        obj.setSchLastRun(schLastRun);
    }
    
    public void DdpSchedulerDataOnDemand.setSchLastRunStatus(DdpScheduler obj, int index) {
        String schLastRunStatus = "schLastRunStatus_" + index;
        if (schLastRunStatus.length() > 250) {
            schLastRunStatus = schLastRunStatus.substring(0, 250);
        }
        obj.setSchLastRunStatus(schLastRunStatus);
    }
    
    public void DdpSchedulerDataOnDemand.setSchLastSuccessRun(DdpScheduler obj, int index) {
        Calendar schLastSuccessRun = Calendar.getInstance();
        obj.setSchLastSuccessRun(schLastSuccessRun);
    }
    
    public void DdpSchedulerDataOnDemand.setSchModifiedBy(DdpScheduler obj, int index) {
        String schModifiedBy = "schModifiedBy_" + index;
        if (schModifiedBy.length() > 120) {
            schModifiedBy = schModifiedBy.substring(0, 120);
        }
        obj.setSchModifiedBy(schModifiedBy);
    }
    
    public void DdpSchedulerDataOnDemand.setSchModifiedDate(DdpScheduler obj, int index) {
        Calendar schModifiedDate = Calendar.getInstance();
        obj.setSchModifiedDate(schModifiedDate);
    }
    
    public void DdpSchedulerDataOnDemand.setSchNextRun(DdpScheduler obj, int index) {
        Calendar schNextRun = Calendar.getInstance();
        obj.setSchNextRun(schNextRun);
    }
    
    public void DdpSchedulerDataOnDemand.setSchNotificationId(DdpScheduler obj, int index) {
        Integer schNotificationId = new Integer(index);
        obj.setSchNotificationId(schNotificationId);
    }
    
    public void DdpSchedulerDataOnDemand.setSchProcessingStatus(DdpScheduler obj, int index) {
        Integer schProcessingStatus = new Integer(index);
        obj.setSchProcessingStatus(schProcessingStatus);
    }
    
    public void DdpSchedulerDataOnDemand.setSchRepeatCount(DdpScheduler obj, int index) {
        String schRepeatCount = "schRepeatCount_" + index;
        if (schRepeatCount.length() > 16) {
            schRepeatCount = schRepeatCount.substring(0, 16);
        }
        obj.setSchRepeatCount(schRepeatCount);
    }
    
    public void DdpSchedulerDataOnDemand.setSchReportEmailCc(DdpScheduler obj, int index) {
        String schReportEmailCc = "foo" + index + "@bar.com";
        if (schReportEmailCc.length() > 256) {
            schReportEmailCc = schReportEmailCc.substring(0, 256);
        }
        obj.setSchReportEmailCc(schReportEmailCc);
    }
    
    public void DdpSchedulerDataOnDemand.setSchReportEmailTo(DdpScheduler obj, int index) {
        String schReportEmailTo = "foo" + index + "@bar.com";
        if (schReportEmailTo.length() > 256) {
            schReportEmailTo = schReportEmailTo.substring(0, 256);
        }
        obj.setSchReportEmailTo(schReportEmailTo);
    }
    
    public void DdpSchedulerDataOnDemand.setSchReportFrequency(DdpScheduler obj, int index) {
        String schReportFrequency = "schReportFrequency_" + index;
        if (schReportFrequency.length() > 32) {
            schReportFrequency = schReportFrequency.substring(0, 32);
        }
        obj.setSchReportFrequency(schReportFrequency);
    }
    
    public void DdpSchedulerDataOnDemand.setSchRuleCategory(DdpScheduler obj, int index) {
        String schRuleCategory = "schRuleCategory_" + index;
        if (schRuleCategory.length() > 64) {
            schRuleCategory = schRuleCategory.substring(0, 64);
        }
        obj.setSchRuleCategory(schRuleCategory);
    }
    
    public void DdpSchedulerDataOnDemand.setSchRuleType(DdpScheduler obj, int index) {
        String schRuleType = "schRuleType_" + index;
        if (schRuleType.length() > 64) {
            schRuleType = schRuleType.substring(0, 64);
        }
        obj.setSchRuleType(schRuleType);
    }
    
    public void DdpSchedulerDataOnDemand.setSchStartDate(DdpScheduler obj, int index) {
        Calendar schStartDate = Calendar.getInstance();
        obj.setSchStartDate(schStartDate);
    }
    
    public void DdpSchedulerDataOnDemand.setSchStatus(DdpScheduler obj, int index) {
        Integer schStatus = new Integer(index);
        obj.setSchStatus(schStatus);
    }
    
    public void DdpSchedulerDataOnDemand.setSchSuccessCount(DdpScheduler obj, int index) {
        Integer schSuccessCount = new Integer(index);
        obj.setSchSuccessCount(schSuccessCount);
    }
    
    public void DdpSchedulerDataOnDemand.setSchTimeInterval(DdpScheduler obj, int index) {
        String schTimeInterval = "schTimeInterva_" + index;
        if (schTimeInterval.length() > 16) {
            schTimeInterval = schTimeInterval.substring(0, 16);
        }
        obj.setSchTimeInterval(schTimeInterval);
    }
    
    public void DdpSchedulerDataOnDemand.setSchType(DdpScheduler obj, int index) {
        String schType = "schType_" + index;
        if (schType.length() > 32) {
            schType = schType.substring(0, 32);
        }
        obj.setSchType(schType);
    }
    
    public DdpScheduler DdpSchedulerDataOnDemand.getSpecificDdpScheduler(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpScheduler obj = data.get(index);
        Integer id = obj.getSchId();
        return ddpSchedulerService.findDdpScheduler(id);
    }
    
    public DdpScheduler DdpSchedulerDataOnDemand.getRandomDdpScheduler() {
        init();
        DdpScheduler obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getSchId();
        return ddpSchedulerService.findDdpScheduler(id);
    }
    
    public boolean DdpSchedulerDataOnDemand.modifyDdpScheduler(DdpScheduler obj) {
        return false;
    }
    
    public void DdpSchedulerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpSchedulerService.findDdpSchedulerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpScheduler' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpScheduler>();
        for (int i = 0; i < 10; i++) {
            DdpScheduler obj = getNewTransientDdpScheduler(i);
            try {
                ddpSchedulerService.saveDdpScheduler(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpSchedulerRepository.flush();
            data.add(obj);
        }
    }
    
}
