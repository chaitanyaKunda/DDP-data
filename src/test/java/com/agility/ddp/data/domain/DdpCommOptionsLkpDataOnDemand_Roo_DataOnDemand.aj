// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCommOptionsLkp;
import com.agility.ddp.data.domain.DdpCommOptionsLkpDataOnDemand;
import com.agility.ddp.data.domain.DdpCommOptionsLkpPK;
import com.agility.ddp.data.domain.DdpCommOptionsLkpRepository;
import com.agility.ddp.data.domain.DdpCommOptionsLkpService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpCommOptionsLkpDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpCommOptionsLkpDataOnDemand: @Component;
    
    private Random DdpCommOptionsLkpDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpCommOptionsLkp> DdpCommOptionsLkpDataOnDemand.data;
    
    @Autowired
    DdpCommOptionsLkpService DdpCommOptionsLkpDataOnDemand.ddpCommOptionsLkpService;
    
    @Autowired
    DdpCommOptionsLkpRepository DdpCommOptionsLkpDataOnDemand.ddpCommOptionsLkpRepository;
    
    public DdpCommOptionsLkp DdpCommOptionsLkpDataOnDemand.getNewTransientDdpCommOptionsLkp(int index) {
        DdpCommOptionsLkp obj = new DdpCommOptionsLkp();
        setEmbeddedIdClass(obj, index);
        return obj;
    }
    
    public void DdpCommOptionsLkpDataOnDemand.setEmbeddedIdClass(DdpCommOptionsLkp obj, int index) {
        Integer cplId = new Integer(index);
        String cplOption = "cplOption_" + index;
        if (cplOption.length() > 16) {
            cplOption = new Random().nextInt(10) + cplOption.substring(1, 16);
        }
        String cplDescription = "cplDescription_" + index;
        if (cplDescription.length() > 64) {
            cplDescription = new Random().nextInt(10) + cplDescription.substring(1, 64);
        }
        Integer cplStatus = new Integer(index);
        
        DdpCommOptionsLkpPK embeddedIdClass = new DdpCommOptionsLkpPK(cplId, cplOption, cplDescription, cplStatus);
        obj.setId(embeddedIdClass);
    }
    
    public DdpCommOptionsLkp DdpCommOptionsLkpDataOnDemand.getSpecificDdpCommOptionsLkp(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpCommOptionsLkp obj = data.get(index);
        DdpCommOptionsLkpPK id = obj.getId();
        return ddpCommOptionsLkpService.findDdpCommOptionsLkp(id);
    }
    
    public DdpCommOptionsLkp DdpCommOptionsLkpDataOnDemand.getRandomDdpCommOptionsLkp() {
        init();
        DdpCommOptionsLkp obj = data.get(rnd.nextInt(data.size()));
        DdpCommOptionsLkpPK id = obj.getId();
        return ddpCommOptionsLkpService.findDdpCommOptionsLkp(id);
    }
    
    public boolean DdpCommOptionsLkpDataOnDemand.modifyDdpCommOptionsLkp(DdpCommOptionsLkp obj) {
        return false;
    }
    
    public void DdpCommOptionsLkpDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpCommOptionsLkpService.findDdpCommOptionsLkpEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpCommOptionsLkp' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpCommOptionsLkp>();
        for (int i = 0; i < 10; i++) {
            DdpCommOptionsLkp obj = getNewTransientDdpCommOptionsLkp(i);
            try {
                ddpCommOptionsLkpService.saveDdpCommOptionsLkp(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpCommOptionsLkpRepository.flush();
            data.add(obj);
        }
    }
    
}
