// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpDmsDocsHolder;
import com.agility.ddp.data.domain.DdpDmsDocsHolderDataOnDemand;
import com.agility.ddp.data.domain.DdpDmsDocsHolderRepository;
import com.agility.ddp.data.domain.DdpDmsDocsHolderService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpDmsDocsHolderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpDmsDocsHolderDataOnDemand: @Component;
    
    private Random DdpDmsDocsHolderDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpDmsDocsHolder> DdpDmsDocsHolderDataOnDemand.data;
    
    @Autowired
    DdpDmsDocsHolderService DdpDmsDocsHolderDataOnDemand.ddpDmsDocsHolderService;
    
    @Autowired
    DdpDmsDocsHolderRepository DdpDmsDocsHolderDataOnDemand.ddpDmsDocsHolderRepository;
    
    public DdpDmsDocsHolder DdpDmsDocsHolderDataOnDemand.getNewTransientDdpDmsDocsHolder(int index) {
        DdpDmsDocsHolder obj = new DdpDmsDocsHolder();
        setThlIsProcessReq(obj, index);
        setThlRObjectId(obj, index);
        setThlTboName(obj, index);
        return obj;
    }
    
    public void DdpDmsDocsHolderDataOnDemand.setThlIsProcessReq(DdpDmsDocsHolder obj, int index) {
        String thlIsProcessReq = "thlI_" + index;
        if (thlIsProcessReq.length() > 6) {
            thlIsProcessReq = thlIsProcessReq.substring(0, 6);
        }
        obj.setThlIsProcessReq(thlIsProcessReq);
    }
    
    public void DdpDmsDocsHolderDataOnDemand.setThlRObjectId(DdpDmsDocsHolder obj, int index) {
        String thlRObjectId = "thlRObjectId_" + index;
        if (thlRObjectId.length() > 16) {
            thlRObjectId = thlRObjectId.substring(0, 16);
        }
        obj.setThlRObjectId(thlRObjectId);
    }
    
    public void DdpDmsDocsHolderDataOnDemand.setThlTboName(DdpDmsDocsHolder obj, int index) {
        String thlTboName = "thlTboName_" + index;
        if (thlTboName.length() > 64) {
            thlTboName = thlTboName.substring(0, 64);
        }
        obj.setThlTboName(thlTboName);
    }
    
    public DdpDmsDocsHolder DdpDmsDocsHolderDataOnDemand.getSpecificDdpDmsDocsHolder(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpDmsDocsHolder obj = data.get(index);
        Integer id = obj.getThlSynId();
        return ddpDmsDocsHolderService.findDdpDmsDocsHolder(id);
    }
    
    public DdpDmsDocsHolder DdpDmsDocsHolderDataOnDemand.getRandomDdpDmsDocsHolder() {
        init();
        DdpDmsDocsHolder obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getThlSynId();
        return ddpDmsDocsHolderService.findDdpDmsDocsHolder(id);
    }
    
    public boolean DdpDmsDocsHolderDataOnDemand.modifyDdpDmsDocsHolder(DdpDmsDocsHolder obj) {
        return false;
    }
    
    public void DdpDmsDocsHolderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpDmsDocsHolderService.findDdpDmsDocsHolderEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpDmsDocsHolder' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpDmsDocsHolder>();
        for (int i = 0; i < 10; i++) {
            DdpDmsDocsHolder obj = getNewTransientDdpDmsDocsHolder(i);
            try {
                ddpDmsDocsHolderService.saveDdpDmsDocsHolder(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpDmsDocsHolderRepository.flush();
            data.add(obj);
        }
    }
    
}
