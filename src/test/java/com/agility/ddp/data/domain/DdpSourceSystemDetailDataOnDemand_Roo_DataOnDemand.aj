// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpSourceSystem;
import com.agility.ddp.data.domain.DdpSourceSystemDataOnDemand;
import com.agility.ddp.data.domain.DdpSourceSystemDetail;
import com.agility.ddp.data.domain.DdpSourceSystemDetailDataOnDemand;
import com.agility.ddp.data.domain.DdpSourceSystemDetailRepository;
import com.agility.ddp.data.domain.DdpSourceSystemDetailService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpSourceSystemDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpSourceSystemDetailDataOnDemand: @Component;
    
    private Random DdpSourceSystemDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpSourceSystemDetail> DdpSourceSystemDetailDataOnDemand.data;
    
    @Autowired
    DdpSourceSystemDataOnDemand DdpSourceSystemDetailDataOnDemand.ddpSourceSystemDataOnDemand;
    
    @Autowired
    DdpSourceSystemDetailService DdpSourceSystemDetailDataOnDemand.ddpSourceSystemDetailService;
    
    @Autowired
    DdpSourceSystemDetailRepository DdpSourceSystemDetailDataOnDemand.ddpSourceSystemDetailRepository;
    
    public DdpSourceSystemDetail DdpSourceSystemDetailDataOnDemand.getNewTransientDdpSourceSystemDetail(int index) {
        DdpSourceSystemDetail obj = new DdpSourceSystemDetail();
        setSsdApplicationCode(obj, index);
        setSsdCategory(obj, index);
        setSsdKey(obj, index);
        setSsdValue(obj, index);
        return obj;
    }
    
    public void DdpSourceSystemDetailDataOnDemand.setSsdApplicationCode(DdpSourceSystemDetail obj, int index) {
        DdpSourceSystem ssdApplicationCode = ddpSourceSystemDataOnDemand.getRandomDdpSourceSystem();
        obj.setSsdApplicationCode(ssdApplicationCode);
    }
    
    public void DdpSourceSystemDetailDataOnDemand.setSsdCategory(DdpSourceSystemDetail obj, int index) {
        String ssdCategory = "ssdCategory_" + index;
        if (ssdCategory.length() > 45) {
            ssdCategory = ssdCategory.substring(0, 45);
        }
        obj.setSsdCategory(ssdCategory);
    }
    
    public void DdpSourceSystemDetailDataOnDemand.setSsdKey(DdpSourceSystemDetail obj, int index) {
        String ssdKey = "ssdKey_" + index;
        if (ssdKey.length() > 45) {
            ssdKey = ssdKey.substring(0, 45);
        }
        obj.setSsdKey(ssdKey);
    }
    
    public void DdpSourceSystemDetailDataOnDemand.setSsdValue(DdpSourceSystemDetail obj, int index) {
        String ssdValue = "ssdValue_" + index;
        if (ssdValue.length() > 45) {
            ssdValue = ssdValue.substring(0, 45);
        }
        obj.setSsdValue(ssdValue);
    }
    
    public DdpSourceSystemDetail DdpSourceSystemDetailDataOnDemand.getSpecificDdpSourceSystemDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpSourceSystemDetail obj = data.get(index);
        Integer id = obj.getSsdId();
        return ddpSourceSystemDetailService.findDdpSourceSystemDetail(id);
    }
    
    public DdpSourceSystemDetail DdpSourceSystemDetailDataOnDemand.getRandomDdpSourceSystemDetail() {
        init();
        DdpSourceSystemDetail obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getSsdId();
        return ddpSourceSystemDetailService.findDdpSourceSystemDetail(id);
    }
    
    public boolean DdpSourceSystemDetailDataOnDemand.modifyDdpSourceSystemDetail(DdpSourceSystemDetail obj) {
        return false;
    }
    
    public void DdpSourceSystemDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpSourceSystemDetailService.findDdpSourceSystemDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpSourceSystemDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpSourceSystemDetail>();
        for (int i = 0; i < 10; i++) {
            DdpSourceSystemDetail obj = getNewTransientDdpSourceSystemDetail(i);
            try {
                ddpSourceSystemDetailService.saveDdpSourceSystemDetail(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpSourceSystemDetailRepository.flush();
            data.add(obj);
        }
    }
    
}
