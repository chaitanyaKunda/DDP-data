// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCommunicationSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpCompressionSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpDocnameConvDataOnDemand;
import com.agility.ddp.data.domain.DdpExportRule;
import com.agility.ddp.data.domain.DdpExportRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpExportRuleRepository;
import com.agility.ddp.data.domain.DdpExportRuleService;
import com.agility.ddp.data.domain.DdpMergeSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpNotification;
import com.agility.ddp.data.domain.DdpNotificationDataOnDemand;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.data.domain.DdpRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpSchedulerDataOnDemand;
import com.agility.ddp.data.domain.DdpSourceSystemDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpExportRuleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpExportRuleDataOnDemand: @Component;
    
    private Random DdpExportRuleDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpExportRule> DdpExportRuleDataOnDemand.data;
    
    @Autowired
    DdpRuleDataOnDemand DdpExportRuleDataOnDemand.ddpRuleDataOnDemand;
    
    @Autowired
    DdpCommunicationSetupDataOnDemand DdpExportRuleDataOnDemand.ddpCommunicationSetupDataOnDemand;
    
    @Autowired
    DdpCompressionSetupDataOnDemand DdpExportRuleDataOnDemand.ddpCompressionSetupDataOnDemand;
    
    @Autowired
    DdpDocnameConvDataOnDemand DdpExportRuleDataOnDemand.ddpDocnameConvDataOnDemand;
    
    @Autowired
    DdpMergeSetupDataOnDemand DdpExportRuleDataOnDemand.ddpMergeSetupDataOnDemand;
    
    @Autowired
    DdpNotificationDataOnDemand DdpExportRuleDataOnDemand.ddpNotificationDataOnDemand;
    
    @Autowired
    DdpSchedulerDataOnDemand DdpExportRuleDataOnDemand.ddpSchedulerDataOnDemand;
    
    @Autowired
    DdpSourceSystemDataOnDemand DdpExportRuleDataOnDemand.ddpSourceSystemDataOnDemand;
    
    @Autowired
    DdpExportRuleService DdpExportRuleDataOnDemand.ddpExportRuleService;
    
    @Autowired
    DdpExportRuleRepository DdpExportRuleDataOnDemand.ddpExportRuleRepository;
    
    public DdpExportRule DdpExportRuleDataOnDemand.getNewTransientDdpExportRule(int index) {
        DdpExportRule obj = new DdpExportRule();
        setDdpRule(obj, index);
        setExpActivationDate(obj, index);
        setExpCorruptionCheck(obj, index);
        setExpCreatedBy(obj, index);
        setExpCreatedDate(obj, index);
        setExpIsPartyCheckRequired(obj, index);
        setExpModifiedBy(obj, index);
        setExpModifiedDate(obj, index);
        setExpNotificationId(obj, index);
        setExpPropFile(obj, index);
        setExpPropInUse(obj, index);
        setExpPropTable(obj, index);
        setExpStatus(obj, index);
        setExpVersion(obj, index);
        return obj;
    }
    
    public void DdpExportRuleDataOnDemand.setDdpRule(DdpExportRule obj, int index) {
        DdpRule ddpRule = ddpRuleDataOnDemand.getSpecificDdpRule(index);
        obj.setDdpRule(ddpRule);
    }
    
    public void DdpExportRuleDataOnDemand.setExpActivationDate(DdpExportRule obj, int index) {
        Calendar expActivationDate = Calendar.getInstance();
        obj.setExpActivationDate(expActivationDate);
    }
    
    public void DdpExportRuleDataOnDemand.setExpCorruptionCheck(DdpExportRule obj, int index) {
        Integer expCorruptionCheck = new Integer(index);
        obj.setExpCorruptionCheck(expCorruptionCheck);
    }
    
    public void DdpExportRuleDataOnDemand.setExpCreatedBy(DdpExportRule obj, int index) {
        String expCreatedBy = "expCreatedBy_" + index;
        if (expCreatedBy.length() > 120) {
            expCreatedBy = expCreatedBy.substring(0, 120);
        }
        obj.setExpCreatedBy(expCreatedBy);
    }
    
    public void DdpExportRuleDataOnDemand.setExpCreatedDate(DdpExportRule obj, int index) {
        Calendar expCreatedDate = Calendar.getInstance();
        obj.setExpCreatedDate(expCreatedDate);
    }
    
    public void DdpExportRuleDataOnDemand.setExpIsPartyCheckRequired(DdpExportRule obj, int index) {
        Integer expIsPartyCheckRequired = new Integer(index);
        obj.setExpIsPartyCheckRequired(expIsPartyCheckRequired);
    }
    
    public void DdpExportRuleDataOnDemand.setExpModifiedBy(DdpExportRule obj, int index) {
        String expModifiedBy = "expModifiedBy_" + index;
        if (expModifiedBy.length() > 120) {
            expModifiedBy = expModifiedBy.substring(0, 120);
        }
        obj.setExpModifiedBy(expModifiedBy);
    }
    
    public void DdpExportRuleDataOnDemand.setExpModifiedDate(DdpExportRule obj, int index) {
        Calendar expModifiedDate = Calendar.getInstance();
        obj.setExpModifiedDate(expModifiedDate);
    }
    
    public void DdpExportRuleDataOnDemand.setExpNotificationId(DdpExportRule obj, int index) {
        DdpNotification expNotificationId = ddpNotificationDataOnDemand.getRandomDdpNotification();
        obj.setExpNotificationId(expNotificationId);
    }
    
    public void DdpExportRuleDataOnDemand.setExpPropFile(DdpExportRule obj, int index) {
        String expPropFile = "expPropFile_" + index;
        if (expPropFile.length() > 120) {
            expPropFile = expPropFile.substring(0, 120);
        }
        obj.setExpPropFile(expPropFile);
    }
    
    public void DdpExportRuleDataOnDemand.setExpPropInUse(DdpExportRule obj, int index) {
        String expPropInUse = "expPropInUse_" + index;
        if (expPropInUse.length() > 45) {
            expPropInUse = expPropInUse.substring(0, 45);
        }
        obj.setExpPropInUse(expPropInUse);
    }
    
    public void DdpExportRuleDataOnDemand.setExpPropTable(DdpExportRule obj, int index) {
        String expPropTable = "expPropTable_" + index;
        if (expPropTable.length() > 45) {
            expPropTable = expPropTable.substring(0, 45);
        }
        obj.setExpPropTable(expPropTable);
    }
    
    public void DdpExportRuleDataOnDemand.setExpStatus(DdpExportRule obj, int index) {
        Integer expStatus = new Integer(index);
        obj.setExpStatus(expStatus);
    }
    
    public void DdpExportRuleDataOnDemand.setExpVersion(DdpExportRule obj, int index) {
        Integer expVersion = new Integer(index);
        obj.setExpVersion(expVersion);
    }
    
    public DdpExportRule DdpExportRuleDataOnDemand.getSpecificDdpExportRule(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpExportRule obj = data.get(index);
        Integer id = obj.getExpRuleId();
        return ddpExportRuleService.findDdpExportRule(id);
    }
    
    public DdpExportRule DdpExportRuleDataOnDemand.getRandomDdpExportRule() {
        init();
        DdpExportRule obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getExpRuleId();
        return ddpExportRuleService.findDdpExportRule(id);
    }
    
    public boolean DdpExportRuleDataOnDemand.modifyDdpExportRule(DdpExportRule obj) {
        return false;
    }
    
    public void DdpExportRuleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpExportRuleService.findDdpExportRuleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpExportRule' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpExportRule>();
        for (int i = 0; i < 10; i++) {
            DdpExportRule obj = getNewTransientDdpExportRule(i);
            try {
                ddpExportRuleService.saveDdpExportRule(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpExportRuleRepository.flush();
            data.add(obj);
        }
    }
    
}
