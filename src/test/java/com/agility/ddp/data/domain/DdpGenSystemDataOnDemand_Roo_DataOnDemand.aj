// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpGenSystem;
import com.agility.ddp.data.domain.DdpGenSystemDataOnDemand;
import com.agility.ddp.data.domain.DdpGenSystemRepository;
import com.agility.ddp.data.domain.DdpGenSystemService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpGenSystemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpGenSystemDataOnDemand: @Component;
    
    private Random DdpGenSystemDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpGenSystem> DdpGenSystemDataOnDemand.data;
    
    @Autowired
    DdpGenSystemService DdpGenSystemDataOnDemand.ddpGenSystemService;
    
    @Autowired
    DdpGenSystemRepository DdpGenSystemDataOnDemand.ddpGenSystemRepository;
    
    public DdpGenSystem DdpGenSystemDataOnDemand.getNewTransientDdpGenSystem(int index) {
        DdpGenSystem obj = new DdpGenSystem();
        setGenCompanyCode(obj, index);
        setGenCreatedBy(obj, index);
        setGenCreatedDate(obj, index);
        setGenDomain(obj, index);
        setGenFilePath(obj, index);
        setGenModifiedBy(obj, index);
        setGenModifiedDate(obj, index);
        setGenSaPassword(obj, index);
        setGenServerIp(obj, index);
        setGenServerName(obj, index);
        setGenServiceAccount(obj, index);
        setGenStatus(obj, index);
        return obj;
    }
    
    public void DdpGenSystemDataOnDemand.setGenCompanyCode(DdpGenSystem obj, int index) {
        String genCompanyCode = "genCompanyCode_" + index;
        if (genCompanyCode.length() > 16) {
            genCompanyCode = genCompanyCode.substring(0, 16);
        }
        obj.setGenCompanyCode(genCompanyCode);
    }
    
    public void DdpGenSystemDataOnDemand.setGenCreatedBy(DdpGenSystem obj, int index) {
        String genCreatedBy = "genCreatedBy_" + index;
        if (genCreatedBy.length() > 120) {
            genCreatedBy = genCreatedBy.substring(0, 120);
        }
        obj.setGenCreatedBy(genCreatedBy);
    }
    
    public void DdpGenSystemDataOnDemand.setGenCreatedDate(DdpGenSystem obj, int index) {
        Calendar genCreatedDate = Calendar.getInstance();
        obj.setGenCreatedDate(genCreatedDate);
    }
    
    public void DdpGenSystemDataOnDemand.setGenDomain(DdpGenSystem obj, int index) {
        String genDomain = "genDomain_" + index;
        if (genDomain.length() > 32) {
            genDomain = genDomain.substring(0, 32);
        }
        obj.setGenDomain(genDomain);
    }
    
    public void DdpGenSystemDataOnDemand.setGenFilePath(DdpGenSystem obj, int index) {
        String genFilePath = "genFilePath_" + index;
        if (genFilePath.length() > 256) {
            genFilePath = genFilePath.substring(0, 256);
        }
        obj.setGenFilePath(genFilePath);
    }
    
    public void DdpGenSystemDataOnDemand.setGenModifiedBy(DdpGenSystem obj, int index) {
        String genModifiedBy = "genModifiedBy_" + index;
        if (genModifiedBy.length() > 120) {
            genModifiedBy = genModifiedBy.substring(0, 120);
        }
        obj.setGenModifiedBy(genModifiedBy);
    }
    
    public void DdpGenSystemDataOnDemand.setGenModifiedDate(DdpGenSystem obj, int index) {
        Calendar genModifiedDate = Calendar.getInstance();
        obj.setGenModifiedDate(genModifiedDate);
    }
    
    public void DdpGenSystemDataOnDemand.setGenSaPassword(DdpGenSystem obj, int index) {
        String genSaPassword = "genSaPassword_" + index;
        if (genSaPassword.length() > 120) {
            genSaPassword = genSaPassword.substring(0, 120);
        }
        obj.setGenSaPassword(genSaPassword);
    }
    
    public void DdpGenSystemDataOnDemand.setGenServerIp(DdpGenSystem obj, int index) {
        String genServerIp = "genServerIp_" + index;
        if (genServerIp.length() > 32) {
            genServerIp = genServerIp.substring(0, 32);
        }
        obj.setGenServerIp(genServerIp);
    }
    
    public void DdpGenSystemDataOnDemand.setGenServerName(DdpGenSystem obj, int index) {
        String genServerName = "genServerName_" + index;
        if (genServerName.length() > 32) {
            genServerName = genServerName.substring(0, 32);
        }
        obj.setGenServerName(genServerName);
    }
    
    public void DdpGenSystemDataOnDemand.setGenServiceAccount(DdpGenSystem obj, int index) {
        String genServiceAccount = "genServiceAccount_" + index;
        if (genServiceAccount.length() > 32) {
            genServiceAccount = genServiceAccount.substring(0, 32);
        }
        obj.setGenServiceAccount(genServiceAccount);
    }
    
    public void DdpGenSystemDataOnDemand.setGenStatus(DdpGenSystem obj, int index) {
        Integer genStatus = new Integer(index);
        obj.setGenStatus(genStatus);
    }
    
    public DdpGenSystem DdpGenSystemDataOnDemand.getSpecificDdpGenSystem(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpGenSystem obj = data.get(index);
        String id = obj.getGenApplicationCode();
        return ddpGenSystemService.findDdpGenSystem(id);
    }
    
    public DdpGenSystem DdpGenSystemDataOnDemand.getRandomDdpGenSystem() {
        init();
        DdpGenSystem obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getGenApplicationCode();
        return ddpGenSystemService.findDdpGenSystem(id);
    }
    
    public boolean DdpGenSystemDataOnDemand.modifyDdpGenSystem(DdpGenSystem obj) {
        return false;
    }
    
    public void DdpGenSystemDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpGenSystemService.findDdpGenSystemEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpGenSystem' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpGenSystem>();
        for (int i = 0; i < 10; i++) {
            DdpGenSystem obj = getNewTransientDdpGenSystem(i);
            try {
                ddpGenSystemService.saveDdpGenSystem(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpGenSystemRepository.flush();
            data.add(obj);
        }
    }
    
}
