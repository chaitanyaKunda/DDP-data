// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpJobRefHolder;
import com.agility.ddp.data.domain.DdpJobRefHolderDataOnDemand;
import com.agility.ddp.data.domain.DdpJobRefHolderPK;
import com.agility.ddp.data.domain.DdpJobRefHolderRepository;
import com.agility.ddp.data.domain.DdpJobRefHolderService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpJobRefHolderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpJobRefHolderDataOnDemand: @Component;
    
    private Random DdpJobRefHolderDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpJobRefHolder> DdpJobRefHolderDataOnDemand.data;
    
    @Autowired
    DdpJobRefHolderService DdpJobRefHolderDataOnDemand.ddpJobRefHolderService;
    
    @Autowired
    DdpJobRefHolderRepository DdpJobRefHolderDataOnDemand.ddpJobRefHolderRepository;
    
    public DdpJobRefHolder DdpJobRefHolderDataOnDemand.getNewTransientDdpJobRefHolder(int index) {
        DdpJobRefHolder obj = new DdpJobRefHolder();
        setEmbeddedIdClass(obj, index);
        return obj;
    }
    
    public void DdpJobRefHolderDataOnDemand.setEmbeddedIdClass(DdpJobRefHolder obj, int index) {
        String jrfId = "jrfId_" + index;
        if (jrfId.length() > 16) {
            jrfId = new Random().nextInt(10) + jrfId.substring(1, 16);
        }
        String jrfJobId = "jrfJobId_" + index;
        if (jrfJobId.length() > 120) {
            jrfJobId = new Random().nextInt(10) + jrfJobId.substring(1, 120);
        }
        Integer jrfStatus = new Integer(index);
        Calendar jrfCreatedDate = Calendar.getInstance();
        Calendar jrfModifiedDate = Calendar.getInstance();
        
        DdpJobRefHolderPK embeddedIdClass = new DdpJobRefHolderPK(jrfId, jrfJobId, jrfStatus, jrfCreatedDate, jrfModifiedDate);
        obj.setId(embeddedIdClass);
    }
    
    public DdpJobRefHolder DdpJobRefHolderDataOnDemand.getSpecificDdpJobRefHolder(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpJobRefHolder obj = data.get(index);
        DdpJobRefHolderPK id = obj.getId();
        return ddpJobRefHolderService.findDdpJobRefHolder(id);
    }
    
    public DdpJobRefHolder DdpJobRefHolderDataOnDemand.getRandomDdpJobRefHolder() {
        init();
        DdpJobRefHolder obj = data.get(rnd.nextInt(data.size()));
        DdpJobRefHolderPK id = obj.getId();
        return ddpJobRefHolderService.findDdpJobRefHolder(id);
    }
    
    public boolean DdpJobRefHolderDataOnDemand.modifyDdpJobRefHolder(DdpJobRefHolder obj) {
        return false;
    }
    
    public void DdpJobRefHolderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpJobRefHolderService.findDdpJobRefHolderEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpJobRefHolder' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpJobRefHolder>();
        for (int i = 0; i < 10; i++) {
            DdpJobRefHolder obj = getNewTransientDdpJobRefHolder(i);
            try {
                ddpJobRefHolderService.saveDdpJobRefHolder(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpJobRefHolderRepository.flush();
            data.add(obj);
        }
    }
    
}
