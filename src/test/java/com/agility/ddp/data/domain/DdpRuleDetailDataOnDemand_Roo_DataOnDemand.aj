// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpBranchDataOnDemand;
import com.agility.ddp.data.domain.DdpCommunicationSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpCompanyDataOnDemand;
import com.agility.ddp.data.domain.DdpDoctypeDataOnDemand;
import com.agility.ddp.data.domain.DdpGenSystemDataOnDemand;
import com.agility.ddp.data.domain.DdpNotificationDataOnDemand;
import com.agility.ddp.data.domain.DdpPartyDataOnDemand;
import com.agility.ddp.data.domain.DdpRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpRuleDetail;
import com.agility.ddp.data.domain.DdpRuleDetailDataOnDemand;
import com.agility.ddp.data.domain.DdpRuleDetailRepository;
import com.agility.ddp.data.domain.DdpRuleDetailService;
import com.agility.ddp.data.domain.DdpSchedulerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpRuleDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpRuleDetailDataOnDemand: @Component;
    
    private Random DdpRuleDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpRuleDetail> DdpRuleDetailDataOnDemand.data;
    
    @Autowired
    DdpBranchDataOnDemand DdpRuleDetailDataOnDemand.ddpBranchDataOnDemand;
    
    @Autowired
    DdpCommunicationSetupDataOnDemand DdpRuleDetailDataOnDemand.ddpCommunicationSetupDataOnDemand;
    
    @Autowired
    DdpCompanyDataOnDemand DdpRuleDetailDataOnDemand.ddpCompanyDataOnDemand;
    
    @Autowired
    DdpDoctypeDataOnDemand DdpRuleDetailDataOnDemand.ddpDoctypeDataOnDemand;
    
    @Autowired
    DdpGenSystemDataOnDemand DdpRuleDetailDataOnDemand.ddpGenSystemDataOnDemand;
    
    @Autowired
    DdpNotificationDataOnDemand DdpRuleDetailDataOnDemand.ddpNotificationDataOnDemand;
    
    @Autowired
    DdpPartyDataOnDemand DdpRuleDetailDataOnDemand.ddpPartyDataOnDemand;
    
    @Autowired
    DdpRuleDataOnDemand DdpRuleDetailDataOnDemand.ddpRuleDataOnDemand;
    
    @Autowired
    DdpSchedulerDataOnDemand DdpRuleDetailDataOnDemand.ddpSchedulerDataOnDemand;
    
    @Autowired
    DdpRuleDetailService DdpRuleDetailDataOnDemand.ddpRuleDetailService;
    
    @Autowired
    DdpRuleDetailRepository DdpRuleDetailDataOnDemand.ddpRuleDetailRepository;
    
    public DdpRuleDetail DdpRuleDetailDataOnDemand.getNewTransientDdpRuleDetail(int index) {
        DdpRuleDetail obj = new DdpRuleDetail();
        setRdtActivationDate(obj, index);
        setRdtCreatedBy(obj, index);
        setRdtCreatedDate(obj, index);
        setRdtDepartment(obj, index);
        setRdtDocSequence(obj, index);
        setRdtForcedType(obj, index);
        setRdtModifiedBy(obj, index);
        setRdtModifiedDate(obj, index);
        setRdtPartyId(obj, index);
        setRdtRelavantType(obj, index);
        setRdtRuleType(obj, index);
        setRdtSlaFreq(obj, index);
        setRdtSlaMax(obj, index);
        setRdtSlaMin(obj, index);
        setRdtStatus(obj, index);
        return obj;
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtActivationDate(DdpRuleDetail obj, int index) {
        Calendar rdtActivationDate = Calendar.getInstance();
        obj.setRdtActivationDate(rdtActivationDate);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtCreatedBy(DdpRuleDetail obj, int index) {
        String rdtCreatedBy = "rdtCreatedBy_" + index;
        if (rdtCreatedBy.length() > 120) {
            rdtCreatedBy = rdtCreatedBy.substring(0, 120);
        }
        obj.setRdtCreatedBy(rdtCreatedBy);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtCreatedDate(DdpRuleDetail obj, int index) {
        Calendar rdtCreatedDate = Calendar.getInstance();
        obj.setRdtCreatedDate(rdtCreatedDate);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtDepartment(DdpRuleDetail obj, int index) {
        String rdtDepartment = "rdtDepartment_" + index;
        if (rdtDepartment.length() > 500) {
            rdtDepartment = rdtDepartment.substring(0, 500);
        }
        obj.setRdtDepartment(rdtDepartment);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtDocSequence(DdpRuleDetail obj, int index) {
        Integer rdtDocSequence = new Integer(index);
        obj.setRdtDocSequence(rdtDocSequence);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtForcedType(DdpRuleDetail obj, int index) {
        Integer rdtForcedType = new Integer(index);
        obj.setRdtForcedType(rdtForcedType);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtModifiedBy(DdpRuleDetail obj, int index) {
        String rdtModifiedBy = "rdtModifiedBy_" + index;
        if (rdtModifiedBy.length() > 120) {
            rdtModifiedBy = rdtModifiedBy.substring(0, 120);
        }
        obj.setRdtModifiedBy(rdtModifiedBy);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtModifiedDate(DdpRuleDetail obj, int index) {
        Calendar rdtModifiedDate = Calendar.getInstance();
        obj.setRdtModifiedDate(rdtModifiedDate);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtPartyId(DdpRuleDetail obj, int index) {
        String rdtPartyId = "rdtPartyId_" + index;
        if (rdtPartyId.length() > 256) {
            rdtPartyId = rdtPartyId.substring(0, 256);
        }
        obj.setRdtPartyId(rdtPartyId);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtRelavantType(DdpRuleDetail obj, int index) {
        Integer rdtRelavantType = new Integer(index);
        obj.setRdtRelavantType(rdtRelavantType);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtRuleType(DdpRuleDetail obj, int index) {
        String rdtRuleType = "rdtRuleType_" + index;
        if (rdtRuleType.length() > 64) {
            rdtRuleType = rdtRuleType.substring(0, 64);
        }
        obj.setRdtRuleType(rdtRuleType);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtSlaFreq(DdpRuleDetail obj, int index) {
        String rdtSlaFreq = "rdtSlaFreq_" + index;
        if (rdtSlaFreq.length() > 32) {
            rdtSlaFreq = rdtSlaFreq.substring(0, 32);
        }
        obj.setRdtSlaFreq(rdtSlaFreq);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtSlaMax(DdpRuleDetail obj, int index) {
        String rdtSlaMax = "rdtSlaMax_" + index;
        if (rdtSlaMax.length() > 32) {
            rdtSlaMax = rdtSlaMax.substring(0, 32);
        }
        obj.setRdtSlaMax(rdtSlaMax);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtSlaMin(DdpRuleDetail obj, int index) {
        String rdtSlaMin = "rdtSlaMin_" + index;
        if (rdtSlaMin.length() > 32) {
            rdtSlaMin = rdtSlaMin.substring(0, 32);
        }
        obj.setRdtSlaMin(rdtSlaMin);
    }
    
    public void DdpRuleDetailDataOnDemand.setRdtStatus(DdpRuleDetail obj, int index) {
        Integer rdtStatus = new Integer(index);
        obj.setRdtStatus(rdtStatus);
    }
    
    public DdpRuleDetail DdpRuleDetailDataOnDemand.getSpecificDdpRuleDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpRuleDetail obj = data.get(index);
        Integer id = obj.getRdtId();
        return ddpRuleDetailService.findDdpRuleDetail(id);
    }
    
    public DdpRuleDetail DdpRuleDetailDataOnDemand.getRandomDdpRuleDetail() {
        init();
        DdpRuleDetail obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getRdtId();
        return ddpRuleDetailService.findDdpRuleDetail(id);
    }
    
    public boolean DdpRuleDetailDataOnDemand.modifyDdpRuleDetail(DdpRuleDetail obj) {
        return false;
    }
    
    public void DdpRuleDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpRuleDetailService.findDdpRuleDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpRuleDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpRuleDetail>();
        for (int i = 0; i < 10; i++) {
            DdpRuleDetail obj = getNewTransientDdpRuleDetail(i);
            try {
                ddpRuleDetailService.saveDdpRuleDetail(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpRuleDetailRepository.flush();
            data.add(obj);
        }
    }
    
}
