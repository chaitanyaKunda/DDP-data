// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpSchedulerDataOnDemand;
import com.agility.ddp.data.domain.DdpSchedulerIntegrationTest;
import com.agility.ddp.data.domain.DdpSchedulerRepository;
import com.agility.ddp.data.domain.DdpSchedulerService;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DdpSchedulerIntegrationTest_Roo_IntegrationTest {
    
    declare @type: DdpSchedulerIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: DdpSchedulerIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: DdpSchedulerIntegrationTest: @Transactional;
    
    @Autowired
    DdpSchedulerDataOnDemand DdpSchedulerIntegrationTest.dod;
    
    @Autowired
    DdpSchedulerService DdpSchedulerIntegrationTest.ddpSchedulerService;
    
    @Autowired
    DdpSchedulerRepository DdpSchedulerIntegrationTest.ddpSchedulerRepository;
    
    @Test
    public void DdpSchedulerIntegrationTest.testCountAllDdpSchedulers() {
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to initialize correctly", dod.getRandomDdpScheduler());
        long count = ddpSchedulerService.countAllDdpSchedulers();
        Assert.assertTrue("Counter for 'DdpScheduler' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void DdpSchedulerIntegrationTest.testFindDdpScheduler() {
        DdpScheduler obj = dod.getRandomDdpScheduler();
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to initialize correctly", obj);
        Integer id = obj.getSchId();
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to provide an identifier", id);
        obj = ddpSchedulerService.findDdpScheduler(id);
        Assert.assertNotNull("Find method for 'DdpScheduler' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'DdpScheduler' returned the incorrect identifier", id, obj.getSchId());
    }
    
    @Test
    public void DdpSchedulerIntegrationTest.testFindAllDdpSchedulers() {
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to initialize correctly", dod.getRandomDdpScheduler());
        long count = ddpSchedulerService.countAllDdpSchedulers();
        Assert.assertTrue("Too expensive to perform a find all test for 'DdpScheduler', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<DdpScheduler> result = ddpSchedulerService.findAllDdpSchedulers();
        Assert.assertNotNull("Find all method for 'DdpScheduler' illegally returned null", result);
        Assert.assertTrue("Find all method for 'DdpScheduler' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void DdpSchedulerIntegrationTest.testFindDdpSchedulerEntries() {
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to initialize correctly", dod.getRandomDdpScheduler());
        long count = ddpSchedulerService.countAllDdpSchedulers();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<DdpScheduler> result = ddpSchedulerService.findDdpSchedulerEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'DdpScheduler' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'DdpScheduler' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void DdpSchedulerIntegrationTest.testSaveDdpScheduler() {
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to initialize correctly", dod.getRandomDdpScheduler());
        DdpScheduler obj = dod.getNewTransientDdpScheduler(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'DdpScheduler' identifier to be null", obj.getSchId());
        try {
            ddpSchedulerService.saveDdpScheduler(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        ddpSchedulerRepository.flush();
        Assert.assertNotNull("Expected 'DdpScheduler' identifier to no longer be null", obj.getSchId());
    }
    
    @Test
    public void DdpSchedulerIntegrationTest.testDeleteDdpScheduler() {
        DdpScheduler obj = dod.getRandomDdpScheduler();
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to initialize correctly", obj);
        Integer id = obj.getSchId();
        Assert.assertNotNull("Data on demand for 'DdpScheduler' failed to provide an identifier", id);
        obj = ddpSchedulerService.findDdpScheduler(id);
        ddpSchedulerService.deleteDdpScheduler(obj);
        ddpSchedulerRepository.flush();
        Assert.assertNull("Failed to remove 'DdpScheduler' with identifier '" + id + "'", ddpSchedulerService.findDdpScheduler(id));
    }
    
}
