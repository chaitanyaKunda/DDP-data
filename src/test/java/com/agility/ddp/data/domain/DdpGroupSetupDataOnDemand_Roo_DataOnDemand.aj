// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpGroup;
import com.agility.ddp.data.domain.DdpGroupDataOnDemand;
import com.agility.ddp.data.domain.DdpGroupSetup;
import com.agility.ddp.data.domain.DdpGroupSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpGroupSetupRepository;
import com.agility.ddp.data.domain.DdpGroupSetupService;
import com.agility.ddp.data.domain.DdpUser;
import com.agility.ddp.data.domain.DdpUserDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpGroupSetupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpGroupSetupDataOnDemand: @Component;
    
    private Random DdpGroupSetupDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpGroupSetup> DdpGroupSetupDataOnDemand.data;
    
    @Autowired
    DdpGroupDataOnDemand DdpGroupSetupDataOnDemand.ddpGroupDataOnDemand;
    
    @Autowired
    DdpUserDataOnDemand DdpGroupSetupDataOnDemand.ddpUserDataOnDemand;
    
    @Autowired
    DdpGroupSetupService DdpGroupSetupDataOnDemand.ddpGroupSetupService;
    
    @Autowired
    DdpGroupSetupRepository DdpGroupSetupDataOnDemand.ddpGroupSetupRepository;
    
    public DdpGroupSetup DdpGroupSetupDataOnDemand.getNewTransientDdpGroupSetup(int index) {
        DdpGroupSetup obj = new DdpGroupSetup();
        setGrsCreatedBy(obj, index);
        setGrsCreatedDate(obj, index);
        setGrsGroupId(obj, index);
        setGrsModifiedBy(obj, index);
        setGrsModifiedDate(obj, index);
        setGrsStatus(obj, index);
        setGrsUserId(obj, index);
        return obj;
    }
    
    public void DdpGroupSetupDataOnDemand.setGrsCreatedBy(DdpGroupSetup obj, int index) {
        String grsCreatedBy = "grsCreatedBy_" + index;
        if (grsCreatedBy.length() > 120) {
            grsCreatedBy = grsCreatedBy.substring(0, 120);
        }
        obj.setGrsCreatedBy(grsCreatedBy);
    }
    
    public void DdpGroupSetupDataOnDemand.setGrsCreatedDate(DdpGroupSetup obj, int index) {
        Calendar grsCreatedDate = Calendar.getInstance();
        obj.setGrsCreatedDate(grsCreatedDate);
    }
    
    public void DdpGroupSetupDataOnDemand.setGrsGroupId(DdpGroupSetup obj, int index) {
        DdpGroup grsGroupId = ddpGroupDataOnDemand.getRandomDdpGroup();
        obj.setGrsGroupId(grsGroupId);
    }
    
    public void DdpGroupSetupDataOnDemand.setGrsModifiedBy(DdpGroupSetup obj, int index) {
        String grsModifiedBy = "grsModifiedBy_" + index;
        if (grsModifiedBy.length() > 120) {
            grsModifiedBy = grsModifiedBy.substring(0, 120);
        }
        obj.setGrsModifiedBy(grsModifiedBy);
    }
    
    public void DdpGroupSetupDataOnDemand.setGrsModifiedDate(DdpGroupSetup obj, int index) {
        Calendar grsModifiedDate = Calendar.getInstance();
        obj.setGrsModifiedDate(grsModifiedDate);
    }
    
    public void DdpGroupSetupDataOnDemand.setGrsStatus(DdpGroupSetup obj, int index) {
        Integer grsStatus = new Integer(index);
        obj.setGrsStatus(grsStatus);
    }
    
    public void DdpGroupSetupDataOnDemand.setGrsUserId(DdpGroupSetup obj, int index) {
        DdpUser grsUserId = ddpUserDataOnDemand.getRandomDdpUser();
        obj.setGrsUserId(grsUserId);
    }
    
    public DdpGroupSetup DdpGroupSetupDataOnDemand.getSpecificDdpGroupSetup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpGroupSetup obj = data.get(index);
        Integer id = obj.getGrsId();
        return ddpGroupSetupService.findDdpGroupSetup(id);
    }
    
    public DdpGroupSetup DdpGroupSetupDataOnDemand.getRandomDdpGroupSetup() {
        init();
        DdpGroupSetup obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getGrsId();
        return ddpGroupSetupService.findDdpGroupSetup(id);
    }
    
    public boolean DdpGroupSetupDataOnDemand.modifyDdpGroupSetup(DdpGroupSetup obj) {
        return false;
    }
    
    public void DdpGroupSetupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpGroupSetupService.findDdpGroupSetupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpGroupSetup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpGroupSetup>();
        for (int i = 0; i < 10; i++) {
            DdpGroupSetup obj = getNewTransientDdpGroupSetup(i);
            try {
                ddpGroupSetupService.saveDdpGroupSetup(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpGroupSetupRepository.flush();
            data.add(obj);
        }
    }
    
}
