// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpUser;
import com.agility.ddp.data.domain.DdpUserDataOnDemand;
import com.agility.ddp.data.domain.DdpUserRepository;
import com.agility.ddp.data.domain.DdpUserService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpUserDataOnDemand: @Component;
    
    private Random DdpUserDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpUser> DdpUserDataOnDemand.data;
    
    @Autowired
    DdpUserService DdpUserDataOnDemand.ddpUserService;
    
    @Autowired
    DdpUserRepository DdpUserDataOnDemand.ddpUserRepository;
    
    public DdpUser DdpUserDataOnDemand.getNewTransientDdpUser(int index) {
        DdpUser obj = new DdpUser();
        setUsrBranchCode(obj, index);
        setUsrCompanyCode(obj, index);
        setUsrCountry(obj, index);
        setUsrCreatedBy(obj, index);
        setUsrCreatedDate(obj, index);
        setUsrDisplayName(obj, index);
        setUsrDomain(obj, index);
        setUsrEmailAddress(obj, index);
        setUsrFirstName(obj, index);
        setUsrHintAnswer(obj, index);
        setUsrHintQuestion(obj, index);
        setUsrLastName(obj, index);
        setUsrLoginId(obj, index);
        setUsrMiddleName(obj, index);
        setUsrModifiedBy(obj, index);
        setUsrModifiedDate(obj, index);
        setUsrPassword(obj, index);
        setUsrRegion(obj, index);
        setUsrStatus(obj, index);
        return obj;
    }
    
    public void DdpUserDataOnDemand.setUsrBranchCode(DdpUser obj, int index) {
        String usrBranchCode = "u_" + index;
        if (usrBranchCode.length() > 3) {
            usrBranchCode = usrBranchCode.substring(0, 3);
        }
        obj.setUsrBranchCode(usrBranchCode);
    }
    
    public void DdpUserDataOnDemand.setUsrCompanyCode(DdpUser obj, int index) {
        String usrCompanyCode = "u_" + index;
        if (usrCompanyCode.length() > 3) {
            usrCompanyCode = usrCompanyCode.substring(0, 3);
        }
        obj.setUsrCompanyCode(usrCompanyCode);
    }
    
    public void DdpUserDataOnDemand.setUsrCountry(DdpUser obj, int index) {
        String usrCountry = "usrCountry_" + index;
        if (usrCountry.length() > 45) {
            usrCountry = usrCountry.substring(0, 45);
        }
        obj.setUsrCountry(usrCountry);
    }
    
    public void DdpUserDataOnDemand.setUsrCreatedBy(DdpUser obj, int index) {
        String usrCreatedBy = "usrCreatedBy_" + index;
        if (usrCreatedBy.length() > 120) {
            usrCreatedBy = usrCreatedBy.substring(0, 120);
        }
        obj.setUsrCreatedBy(usrCreatedBy);
    }
    
    public void DdpUserDataOnDemand.setUsrCreatedDate(DdpUser obj, int index) {
        Calendar usrCreatedDate = Calendar.getInstance();
        obj.setUsrCreatedDate(usrCreatedDate);
    }
    
    public void DdpUserDataOnDemand.setUsrDisplayName(DdpUser obj, int index) {
        String usrDisplayName = "usrDisplayName_" + index;
        if (usrDisplayName.length() > 64) {
            usrDisplayName = usrDisplayName.substring(0, 64);
        }
        obj.setUsrDisplayName(usrDisplayName);
    }
    
    public void DdpUserDataOnDemand.setUsrDomain(DdpUser obj, int index) {
        String usrDomain = "usrDomain_" + index;
        if (usrDomain.length() > 12) {
            usrDomain = usrDomain.substring(0, 12);
        }
        obj.setUsrDomain(usrDomain);
    }
    
    public void DdpUserDataOnDemand.setUsrEmailAddress(DdpUser obj, int index) {
        String usrEmailAddress = "foo" + index + "@bar.com";
        if (usrEmailAddress.length() > 64) {
            usrEmailAddress = usrEmailAddress.substring(0, 64);
        }
        obj.setUsrEmailAddress(usrEmailAddress);
    }
    
    public void DdpUserDataOnDemand.setUsrFirstName(DdpUser obj, int index) {
        String usrFirstName = "usrFirstName_" + index;
        if (usrFirstName.length() > 64) {
            usrFirstName = usrFirstName.substring(0, 64);
        }
        obj.setUsrFirstName(usrFirstName);
    }
    
    public void DdpUserDataOnDemand.setUsrHintAnswer(DdpUser obj, int index) {
        String usrHintAnswer = "usrHintAnswer_" + index;
        if (usrHintAnswer.length() > 120) {
            usrHintAnswer = usrHintAnswer.substring(0, 120);
        }
        obj.setUsrHintAnswer(usrHintAnswer);
    }
    
    public void DdpUserDataOnDemand.setUsrHintQuestion(DdpUser obj, int index) {
        String usrHintQuestion = "usrHintQuestion_" + index;
        if (usrHintQuestion.length() > 120) {
            usrHintQuestion = usrHintQuestion.substring(0, 120);
        }
        obj.setUsrHintQuestion(usrHintQuestion);
    }
    
    public void DdpUserDataOnDemand.setUsrLastName(DdpUser obj, int index) {
        String usrLastName = "usrLastName_" + index;
        if (usrLastName.length() > 64) {
            usrLastName = usrLastName.substring(0, 64);
        }
        obj.setUsrLastName(usrLastName);
    }
    
    public void DdpUserDataOnDemand.setUsrLoginId(DdpUser obj, int index) {
        String usrLoginId = "usrLoginId_" + index;
        if (usrLoginId.length() > 32) {
            usrLoginId = new Random().nextInt(10) + usrLoginId.substring(1, 32);
        }
        obj.setUsrLoginId(usrLoginId);
    }
    
    public void DdpUserDataOnDemand.setUsrMiddleName(DdpUser obj, int index) {
        String usrMiddleName = "usrMiddleName_" + index;
        if (usrMiddleName.length() > 64) {
            usrMiddleName = usrMiddleName.substring(0, 64);
        }
        obj.setUsrMiddleName(usrMiddleName);
    }
    
    public void DdpUserDataOnDemand.setUsrModifiedBy(DdpUser obj, int index) {
        String usrModifiedBy = "usrModifiedBy_" + index;
        if (usrModifiedBy.length() > 120) {
            usrModifiedBy = usrModifiedBy.substring(0, 120);
        }
        obj.setUsrModifiedBy(usrModifiedBy);
    }
    
    public void DdpUserDataOnDemand.setUsrModifiedDate(DdpUser obj, int index) {
        Calendar usrModifiedDate = Calendar.getInstance();
        obj.setUsrModifiedDate(usrModifiedDate);
    }
    
    public void DdpUserDataOnDemand.setUsrPassword(DdpUser obj, int index) {
        String usrPassword = "usrPassword_" + index;
        if (usrPassword.length() > 120) {
            usrPassword = usrPassword.substring(0, 120);
        }
        obj.setUsrPassword(usrPassword);
    }
    
    public void DdpUserDataOnDemand.setUsrRegion(DdpUser obj, int index) {
        String usrRegion = "usrRegion_" + index;
        if (usrRegion.length() > 16) {
            usrRegion = usrRegion.substring(0, 16);
        }
        obj.setUsrRegion(usrRegion);
    }
    
    public void DdpUserDataOnDemand.setUsrStatus(DdpUser obj, int index) {
        Integer usrStatus = new Integer(index);
        obj.setUsrStatus(usrStatus);
    }
    
    public DdpUser DdpUserDataOnDemand.getSpecificDdpUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpUser obj = data.get(index);
        Integer id = obj.getUsrId();
        return ddpUserService.findDdpUser(id);
    }
    
    public DdpUser DdpUserDataOnDemand.getRandomDdpUser() {
        init();
        DdpUser obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getUsrId();
        return ddpUserService.findDdpUser(id);
    }
    
    public boolean DdpUserDataOnDemand.modifyDdpUser(DdpUser obj) {
        return false;
    }
    
    public void DdpUserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpUserService.findDdpUserEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpUser' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpUser>();
        for (int i = 0; i < 10; i++) {
            DdpUser obj = getNewTransientDdpUser(i);
            try {
                ddpUserService.saveDdpUser(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpUserRepository.flush();
            data.add(obj);
        }
    }
    
}
