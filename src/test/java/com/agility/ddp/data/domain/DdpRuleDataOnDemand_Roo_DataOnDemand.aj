// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpExportRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpMultiAedRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.data.domain.DdpRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpRuleRepository;
import com.agility.ddp.data.domain.DdpRuleService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpRuleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpRuleDataOnDemand: @Component;
    
    private Random DdpRuleDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpRule> DdpRuleDataOnDemand.data;
    
    @Autowired
    DdpAedRuleDataOnDemand DdpRuleDataOnDemand.ddpAedRuleDataOnDemand;
    
    @Autowired
    DdpExportRuleDataOnDemand DdpRuleDataOnDemand.ddpExportRuleDataOnDemand;
    
    @Autowired
    DdpMultiAedRuleDataOnDemand DdpRuleDataOnDemand.ddpMultiAedRuleDataOnDemand;
    
    @Autowired
    DdpRuleService DdpRuleDataOnDemand.ddpRuleService;
    
    @Autowired
    DdpRuleRepository DdpRuleDataOnDemand.ddpRuleRepository;
    
    public DdpRule DdpRuleDataOnDemand.getNewTransientDdpRule(int index) {
        DdpRule obj = new DdpRule();
        setRulCreatedBy(obj, index);
        setRulCreatedDate(obj, index);
        setRulDescription(obj, index);
        setRulModifiedBy(obj, index);
        setRulModifiedDate(obj, index);
        setRulName(obj, index);
        setRulStatus(obj, index);
        return obj;
    }
    
    public void DdpRuleDataOnDemand.setRulCreatedBy(DdpRule obj, int index) {
        String rulCreatedBy = "rulCreatedBy_" + index;
        if (rulCreatedBy.length() > 120) {
            rulCreatedBy = rulCreatedBy.substring(0, 120);
        }
        obj.setRulCreatedBy(rulCreatedBy);
    }
    
    public void DdpRuleDataOnDemand.setRulCreatedDate(DdpRule obj, int index) {
        Calendar rulCreatedDate = Calendar.getInstance();
        obj.setRulCreatedDate(rulCreatedDate);
    }
    
    public void DdpRuleDataOnDemand.setRulDescription(DdpRule obj, int index) {
        String rulDescription = "rulDescription_" + index;
        if (rulDescription.length() > 120) {
            rulDescription = rulDescription.substring(0, 120);
        }
        obj.setRulDescription(rulDescription);
    }
    
    public void DdpRuleDataOnDemand.setRulModifiedBy(DdpRule obj, int index) {
        String rulModifiedBy = "rulModifiedBy_" + index;
        if (rulModifiedBy.length() > 120) {
            rulModifiedBy = rulModifiedBy.substring(0, 120);
        }
        obj.setRulModifiedBy(rulModifiedBy);
    }
    
    public void DdpRuleDataOnDemand.setRulModifiedDate(DdpRule obj, int index) {
        Calendar rulModifiedDate = Calendar.getInstance();
        obj.setRulModifiedDate(rulModifiedDate);
    }
    
    public void DdpRuleDataOnDemand.setRulName(DdpRule obj, int index) {
        String rulName = "rulName_" + index;
        if (rulName.length() > 64) {
            rulName = rulName.substring(0, 64);
        }
        obj.setRulName(rulName);
    }
    
    public void DdpRuleDataOnDemand.setRulStatus(DdpRule obj, int index) {
        Integer rulStatus = new Integer(index);
        obj.setRulStatus(rulStatus);
    }
    
    public DdpRule DdpRuleDataOnDemand.getSpecificDdpRule(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpRule obj = data.get(index);
        Integer id = obj.getRulId();
        return ddpRuleService.findDdpRule(id);
    }
    
    public DdpRule DdpRuleDataOnDemand.getRandomDdpRule() {
        init();
        DdpRule obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getRulId();
        return ddpRuleService.findDdpRule(id);
    }
    
    public boolean DdpRuleDataOnDemand.modifyDdpRule(DdpRule obj) {
        return false;
    }
    
    public void DdpRuleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpRuleService.findDdpRuleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpRule' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpRule>();
        for (int i = 0; i < 10; i++) {
            DdpRule obj = getNewTransientDdpRule(i);
            try {
                ddpRuleService.saveDdpRule(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpRuleRepository.flush();
            data.add(obj);
        }
    }
    
}
