// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpExportVersionLkp;
import com.agility.ddp.data.domain.DdpExportVersionLkpDataOnDemand;
import com.agility.ddp.data.domain.DdpExportVersionLkpPK;
import com.agility.ddp.data.domain.DdpExportVersionLkpRepository;
import com.agility.ddp.data.domain.DdpExportVersionLkpService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpExportVersionLkpDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpExportVersionLkpDataOnDemand: @Component;
    
    private Random DdpExportVersionLkpDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpExportVersionLkp> DdpExportVersionLkpDataOnDemand.data;
    
    @Autowired
    DdpExportVersionLkpService DdpExportVersionLkpDataOnDemand.ddpExportVersionLkpService;
    
    @Autowired
    DdpExportVersionLkpRepository DdpExportVersionLkpDataOnDemand.ddpExportVersionLkpRepository;
    
    public DdpExportVersionLkp DdpExportVersionLkpDataOnDemand.getNewTransientDdpExportVersionLkp(int index) {
        DdpExportVersionLkp obj = new DdpExportVersionLkp();
        setEmbeddedIdClass(obj, index);
        return obj;
    }
    
    public void DdpExportVersionLkpDataOnDemand.setEmbeddedIdClass(DdpExportVersionLkp obj, int index) {
        Integer evlId = new Integer(index);
        String evlOption = "evlOption_" + index;
        if (evlOption.length() > 16) {
            evlOption = new Random().nextInt(10) + evlOption.substring(1, 16);
        }
        String evlDescription = "evlDescription_" + index;
        if (evlDescription.length() > 16) {
            evlDescription = new Random().nextInt(10) + evlDescription.substring(1, 16);
        }
        Integer evlStatus = new Integer(index);
        
        DdpExportVersionLkpPK embeddedIdClass = new DdpExportVersionLkpPK(evlId, evlOption, evlDescription, evlStatus);
        obj.setId(embeddedIdClass);
    }
    
    public DdpExportVersionLkp DdpExportVersionLkpDataOnDemand.getSpecificDdpExportVersionLkp(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpExportVersionLkp obj = data.get(index);
        DdpExportVersionLkpPK id = obj.getId();
        return ddpExportVersionLkpService.findDdpExportVersionLkp(id);
    }
    
    public DdpExportVersionLkp DdpExportVersionLkpDataOnDemand.getRandomDdpExportVersionLkp() {
        init();
        DdpExportVersionLkp obj = data.get(rnd.nextInt(data.size()));
        DdpExportVersionLkpPK id = obj.getId();
        return ddpExportVersionLkpService.findDdpExportVersionLkp(id);
    }
    
    public boolean DdpExportVersionLkpDataOnDemand.modifyDdpExportVersionLkp(DdpExportVersionLkp obj) {
        return false;
    }
    
    public void DdpExportVersionLkpDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpExportVersionLkpService.findDdpExportVersionLkpEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpExportVersionLkp' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpExportVersionLkp>();
        for (int i = 0; i < 10; i++) {
            DdpExportVersionLkp obj = getNewTransientDdpExportVersionLkp(i);
            try {
                ddpExportVersionLkpService.saveDdpExportVersionLkp(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpExportVersionLkpRepository.flush();
            data.add(obj);
        }
    }
    
}
