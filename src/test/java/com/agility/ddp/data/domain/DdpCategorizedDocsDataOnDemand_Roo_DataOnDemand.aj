// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCategorizedDocs;
import com.agility.ddp.data.domain.DdpCategorizedDocsDataOnDemand;
import com.agility.ddp.data.domain.DdpCategorizedDocsRepository;
import com.agility.ddp.data.domain.DdpCategorizedDocsService;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import com.agility.ddp.data.domain.DdpDmsDocsTxnDataOnDemand;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.data.domain.DdpRuleDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpCategorizedDocsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpCategorizedDocsDataOnDemand: @Component;
    
    private Random DdpCategorizedDocsDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpCategorizedDocs> DdpCategorizedDocsDataOnDemand.data;
    
    @Autowired
    DdpDmsDocsTxnDataOnDemand DdpCategorizedDocsDataOnDemand.ddpDmsDocsTxnDataOnDemand;
    
    @Autowired
    DdpRuleDataOnDemand DdpCategorizedDocsDataOnDemand.ddpRuleDataOnDemand;
    
    @Autowired
    DdpCategorizedDocsService DdpCategorizedDocsDataOnDemand.ddpCategorizedDocsService;
    
    @Autowired
    DdpCategorizedDocsRepository DdpCategorizedDocsDataOnDemand.ddpCategorizedDocsRepository;
    
    public DdpCategorizedDocs DdpCategorizedDocsDataOnDemand.getNewTransientDdpCategorizedDocs(int index) {
        DdpCategorizedDocs obj = new DdpCategorizedDocs();
        setCatCreatedBy(obj, index);
        setCatCreatedDate(obj, index);
        setCatCurrentPm(obj, index);
        setCatCurrentPmFailedCount(obj, index);
        setCatCurrentPmSeq(obj, index);
        setCatCurrentPmStartTime(obj, index);
        setCatCurrentPmStatus(obj, index);
        setCatDtxId(obj, index);
        setCatModifiedBy(obj, index);
        setCatModifiedDate(obj, index);
        setCatNextPm(obj, index);
        setCatPrevPm(obj, index);
        setCatRdtId(obj, index);
        setCatRetries(obj, index);
        setCatRulId(obj, index);
        setCatRuleType(obj, index);
        setCatStatus(obj, index);
        setCatSynId(obj, index);
        setCatTotalPmReq(obj, index);
        return obj;
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatCreatedBy(DdpCategorizedDocs obj, int index) {
        String catCreatedBy = "catCreatedBy_" + index;
        if (catCreatedBy.length() > 120) {
            catCreatedBy = catCreatedBy.substring(0, 120);
        }
        obj.setCatCreatedBy(catCreatedBy);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatCreatedDate(DdpCategorizedDocs obj, int index) {
        Calendar catCreatedDate = Calendar.getInstance();
        obj.setCatCreatedDate(catCreatedDate);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatCurrentPm(DdpCategorizedDocs obj, int index) {
        String catCurrentPm = "catCurrentPm_" + index;
        if (catCurrentPm.length() > 45) {
            catCurrentPm = catCurrentPm.substring(0, 45);
        }
        obj.setCatCurrentPm(catCurrentPm);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatCurrentPmFailedCount(DdpCategorizedDocs obj, int index) {
        Integer catCurrentPmFailedCount = new Integer(index);
        obj.setCatCurrentPmFailedCount(catCurrentPmFailedCount);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatCurrentPmSeq(DdpCategorizedDocs obj, int index) {
        Integer catCurrentPmSeq = new Integer(index);
        obj.setCatCurrentPmSeq(catCurrentPmSeq);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatCurrentPmStartTime(DdpCategorizedDocs obj, int index) {
        Calendar catCurrentPmStartTime = Calendar.getInstance();
        obj.setCatCurrentPmStartTime(catCurrentPmStartTime);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatCurrentPmStatus(DdpCategorizedDocs obj, int index) {
        String catCurrentPmStatus = "catCurrentPmStatus_" + index;
        if (catCurrentPmStatus.length() > 45) {
            catCurrentPmStatus = catCurrentPmStatus.substring(0, 45);
        }
        obj.setCatCurrentPmStatus(catCurrentPmStatus);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatDtxId(DdpCategorizedDocs obj, int index) {
        DdpDmsDocsTxn catDtxId = ddpDmsDocsTxnDataOnDemand.getRandomDdpDmsDocsTxn();
        obj.setCatDtxId(catDtxId);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatModifiedBy(DdpCategorizedDocs obj, int index) {
        String catModifiedBy = "catModifiedBy_" + index;
        if (catModifiedBy.length() > 120) {
            catModifiedBy = catModifiedBy.substring(0, 120);
        }
        obj.setCatModifiedBy(catModifiedBy);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatModifiedDate(DdpCategorizedDocs obj, int index) {
        Calendar catModifiedDate = Calendar.getInstance();
        obj.setCatModifiedDate(catModifiedDate);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatNextPm(DdpCategorizedDocs obj, int index) {
        String catNextPm = "catNextPm_" + index;
        if (catNextPm.length() > 45) {
            catNextPm = catNextPm.substring(0, 45);
        }
        obj.setCatNextPm(catNextPm);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatPrevPm(DdpCategorizedDocs obj, int index) {
        String catPrevPm = "catPrevPm_" + index;
        if (catPrevPm.length() > 45) {
            catPrevPm = catPrevPm.substring(0, 45);
        }
        obj.setCatPrevPm(catPrevPm);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatRdtId(DdpCategorizedDocs obj, int index) {
        Integer catRdtId = new Integer(index);
        obj.setCatRdtId(catRdtId);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatRetries(DdpCategorizedDocs obj, int index) {
        Integer catRetries = new Integer(index);
        obj.setCatRetries(catRetries);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatRulId(DdpCategorizedDocs obj, int index) {
        DdpRule catRulId = ddpRuleDataOnDemand.getRandomDdpRule();
        obj.setCatRulId(catRulId);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatRuleType(DdpCategorizedDocs obj, int index) {
        String catRuleType = "catRuleType_" + index;
        if (catRuleType.length() > 64) {
            catRuleType = catRuleType.substring(0, 64);
        }
        obj.setCatRuleType(catRuleType);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatStatus(DdpCategorizedDocs obj, int index) {
        Integer catStatus = new Integer(index);
        obj.setCatStatus(catStatus);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatSynId(DdpCategorizedDocs obj, int index) {
        Integer catSynId = new Integer(index);
        obj.setCatSynId(catSynId);
    }
    
    public void DdpCategorizedDocsDataOnDemand.setCatTotalPmReq(DdpCategorizedDocs obj, int index) {
        Integer catTotalPmReq = new Integer(index);
        obj.setCatTotalPmReq(catTotalPmReq);
    }
    
    public DdpCategorizedDocs DdpCategorizedDocsDataOnDemand.getSpecificDdpCategorizedDocs(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpCategorizedDocs obj = data.get(index);
        Integer id = obj.getCatId();
        return ddpCategorizedDocsService.findDdpCategorizedDocs(id);
    }
    
    public DdpCategorizedDocs DdpCategorizedDocsDataOnDemand.getRandomDdpCategorizedDocs() {
        init();
        DdpCategorizedDocs obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getCatId();
        return ddpCategorizedDocsService.findDdpCategorizedDocs(id);
    }
    
    public boolean DdpCategorizedDocsDataOnDemand.modifyDdpCategorizedDocs(DdpCategorizedDocs obj) {
        return false;
    }
    
    public void DdpCategorizedDocsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpCategorizedDocsService.findDdpCategorizedDocsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpCategorizedDocs' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpCategorizedDocs>();
        for (int i = 0; i < 10; i++) {
            DdpCategorizedDocs obj = getNewTransientDdpCategorizedDocs(i);
            try {
                ddpCategorizedDocsService.saveDdpCategorizedDocs(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpCategorizedDocsRepository.flush();
            data.add(obj);
        }
    }
    
}
