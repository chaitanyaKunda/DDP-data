// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpGroupDataOnDemand;
import com.agility.ddp.data.domain.DdpRole;
import com.agility.ddp.data.domain.DdpRoleDataOnDemand;
import com.agility.ddp.data.domain.DdpRoleSetup;
import com.agility.ddp.data.domain.DdpRoleSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpRoleSetupRepository;
import com.agility.ddp.data.domain.DdpRoleSetupService;
import com.agility.ddp.data.domain.DdpUserDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpRoleSetupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpRoleSetupDataOnDemand: @Component;
    
    private Random DdpRoleSetupDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpRoleSetup> DdpRoleSetupDataOnDemand.data;
    
    @Autowired
    DdpUserDataOnDemand DdpRoleSetupDataOnDemand.ddpUserDataOnDemand;
    
    @Autowired
    DdpGroupDataOnDemand DdpRoleSetupDataOnDemand.ddpGroupDataOnDemand;
    
    @Autowired
    DdpRoleDataOnDemand DdpRoleSetupDataOnDemand.ddpRoleDataOnDemand;
    
    @Autowired
    DdpRoleSetupService DdpRoleSetupDataOnDemand.ddpRoleSetupService;
    
    @Autowired
    DdpRoleSetupRepository DdpRoleSetupDataOnDemand.ddpRoleSetupRepository;
    
    public DdpRoleSetup DdpRoleSetupDataOnDemand.getNewTransientDdpRoleSetup(int index) {
        DdpRoleSetup obj = new DdpRoleSetup();
        setRlsClass(obj, index);
        setRlsCreatedBy(obj, index);
        setRlsCreatedDate(obj, index);
        setRlsModifiedBy(obj, index);
        setRlsModifiedDate(obj, index);
        setRlsRoleId(obj, index);
        setRlsStatus(obj, index);
        return obj;
    }
    
    public void DdpRoleSetupDataOnDemand.setRlsClass(DdpRoleSetup obj, int index) {
        Integer rlsClass = new Integer(index);
        obj.setRlsClass(rlsClass);
    }
    
    public void DdpRoleSetupDataOnDemand.setRlsCreatedBy(DdpRoleSetup obj, int index) {
        String rlsCreatedBy = "rlsCreatedBy_" + index;
        if (rlsCreatedBy.length() > 120) {
            rlsCreatedBy = rlsCreatedBy.substring(0, 120);
        }
        obj.setRlsCreatedBy(rlsCreatedBy);
    }
    
    public void DdpRoleSetupDataOnDemand.setRlsCreatedDate(DdpRoleSetup obj, int index) {
        Calendar rlsCreatedDate = Calendar.getInstance();
        obj.setRlsCreatedDate(rlsCreatedDate);
    }
    
    public void DdpRoleSetupDataOnDemand.setRlsModifiedBy(DdpRoleSetup obj, int index) {
        String rlsModifiedBy = "rlsModifiedBy_" + index;
        if (rlsModifiedBy.length() > 120) {
            rlsModifiedBy = rlsModifiedBy.substring(0, 120);
        }
        obj.setRlsModifiedBy(rlsModifiedBy);
    }
    
    public void DdpRoleSetupDataOnDemand.setRlsModifiedDate(DdpRoleSetup obj, int index) {
        Calendar rlsModifiedDate = Calendar.getInstance();
        obj.setRlsModifiedDate(rlsModifiedDate);
    }
    
    public void DdpRoleSetupDataOnDemand.setRlsRoleId(DdpRoleSetup obj, int index) {
        DdpRole rlsRoleId = ddpRoleDataOnDemand.getRandomDdpRole();
        obj.setRlsRoleId(rlsRoleId);
    }
    
    public void DdpRoleSetupDataOnDemand.setRlsStatus(DdpRoleSetup obj, int index) {
        Integer rlsStatus = new Integer(index);
        obj.setRlsStatus(rlsStatus);
    }
    
    public DdpRoleSetup DdpRoleSetupDataOnDemand.getSpecificDdpRoleSetup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpRoleSetup obj = data.get(index);
        Integer id = obj.getRlsId();
        return ddpRoleSetupService.findDdpRoleSetup(id);
    }
    
    public DdpRoleSetup DdpRoleSetupDataOnDemand.getRandomDdpRoleSetup() {
        init();
        DdpRoleSetup obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getRlsId();
        return ddpRoleSetupService.findDdpRoleSetup(id);
    }
    
    public boolean DdpRoleSetupDataOnDemand.modifyDdpRoleSetup(DdpRoleSetup obj) {
        return false;
    }
    
    public void DdpRoleSetupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpRoleSetupService.findDdpRoleSetupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpRoleSetup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpRoleSetup>();
        for (int i = 0; i < 10; i++) {
            DdpRoleSetup obj = getNewTransientDdpRoleSetup(i);
            try {
                ddpRoleSetupService.saveDdpRoleSetup(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpRoleSetupRepository.flush();
            data.add(obj);
        }
    }
    
}
