// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedReqDocsDataOnDemand;
import com.agility.ddp.data.domain.DdpAedReqDocsIntegrationTest;
import com.agility.ddp.data.domain.DdpAedReqDocsRepository;
import com.agility.ddp.data.domain.DdpAedReqDocsService;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DdpAedReqDocsIntegrationTest_Roo_IntegrationTest {
    
    declare @type: DdpAedReqDocsIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: DdpAedReqDocsIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: DdpAedReqDocsIntegrationTest: @Transactional;
    
    @Autowired
    DdpAedReqDocsDataOnDemand DdpAedReqDocsIntegrationTest.dod;
    
    @Autowired
    DdpAedReqDocsService DdpAedReqDocsIntegrationTest.ddpAedReqDocsService;
    
    @Autowired
    DdpAedReqDocsRepository DdpAedReqDocsIntegrationTest.ddpAedReqDocsRepository;
    
    @Test
    public void DdpAedReqDocsIntegrationTest.testCountAllDdpAedReqDocses() {
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to initialize correctly", dod.getRandomDdpAedReqDocs());
        long count = ddpAedReqDocsService.countAllDdpAedReqDocses();
        Assert.assertTrue("Counter for 'DdpAedReqDocs' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void DdpAedReqDocsIntegrationTest.testFindDdpAedReqDocs() {
        DdpAedReqDocs obj = dod.getRandomDdpAedReqDocs();
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to initialize correctly", obj);
        Integer id = obj.getArdMergeId();
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to provide an identifier", id);
        obj = ddpAedReqDocsService.findDdpAedReqDocs(id);
        Assert.assertNotNull("Find method for 'DdpAedReqDocs' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'DdpAedReqDocs' returned the incorrect identifier", id, obj.getArdMergeId());
    }
    
    @Test
    public void DdpAedReqDocsIntegrationTest.testFindAllDdpAedReqDocses() {
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to initialize correctly", dod.getRandomDdpAedReqDocs());
        long count = ddpAedReqDocsService.countAllDdpAedReqDocses();
        Assert.assertTrue("Too expensive to perform a find all test for 'DdpAedReqDocs', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<DdpAedReqDocs> result = ddpAedReqDocsService.findAllDdpAedReqDocses();
        Assert.assertNotNull("Find all method for 'DdpAedReqDocs' illegally returned null", result);
        Assert.assertTrue("Find all method for 'DdpAedReqDocs' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void DdpAedReqDocsIntegrationTest.testFindDdpAedReqDocsEntries() {
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to initialize correctly", dod.getRandomDdpAedReqDocs());
        long count = ddpAedReqDocsService.countAllDdpAedReqDocses();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<DdpAedReqDocs> result = ddpAedReqDocsService.findDdpAedReqDocsEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'DdpAedReqDocs' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'DdpAedReqDocs' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void DdpAedReqDocsIntegrationTest.testSaveDdpAedReqDocs() {
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to initialize correctly", dod.getRandomDdpAedReqDocs());
        DdpAedReqDocs obj = dod.getNewTransientDdpAedReqDocs(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'DdpAedReqDocs' identifier to be null", obj.getArdMergeId());
        try {
            ddpAedReqDocsService.saveDdpAedReqDocs(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        ddpAedReqDocsRepository.flush();
        Assert.assertNotNull("Expected 'DdpAedReqDocs' identifier to no longer be null", obj.getArdMergeId());
    }
    
    @Test
    public void DdpAedReqDocsIntegrationTest.testDeleteDdpAedReqDocs() {
        DdpAedReqDocs obj = dod.getRandomDdpAedReqDocs();
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to initialize correctly", obj);
        Integer id = obj.getArdMergeId();
        Assert.assertNotNull("Data on demand for 'DdpAedReqDocs' failed to provide an identifier", id);
        obj = ddpAedReqDocsService.findDdpAedReqDocs(id);
        ddpAedReqDocsService.deleteDdpAedReqDocs(obj);
        ddpAedReqDocsRepository.flush();
        Assert.assertNull("Failed to remove 'DdpAedReqDocs' with identifier '" + id + "'", ddpAedReqDocsService.findDdpAedReqDocs(id));
    }
    
}
