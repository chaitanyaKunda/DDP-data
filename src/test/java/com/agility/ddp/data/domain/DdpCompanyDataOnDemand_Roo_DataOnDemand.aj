// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCompany;
import com.agility.ddp.data.domain.DdpCompanyDataOnDemand;
import com.agility.ddp.data.domain.DdpCompanyRepository;
import com.agility.ddp.data.domain.DdpCompanyService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpCompanyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpCompanyDataOnDemand: @Component;
    
    private Random DdpCompanyDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpCompany> DdpCompanyDataOnDemand.data;
    
    @Autowired
    DdpCompanyService DdpCompanyDataOnDemand.ddpCompanyService;
    
    @Autowired
    DdpCompanyRepository DdpCompanyDataOnDemand.ddpCompanyRepository;
    
    public DdpCompany DdpCompanyDataOnDemand.getNewTransientDdpCompany(int index) {
        DdpCompany obj = new DdpCompany();
        setComCompanyName(obj, index);
        setComCountryCode(obj, index);
        setComCountryName(obj, index);
        setComRegion(obj, index);
        setComStatus(obj, index);
        return obj;
    }
    
    public void DdpCompanyDataOnDemand.setComCompanyName(DdpCompany obj, int index) {
        String comCompanyName = "comCompanyName_" + index;
        if (comCompanyName.length() > 64) {
            comCompanyName = comCompanyName.substring(0, 64);
        }
        obj.setComCompanyName(comCompanyName);
    }
    
    public void DdpCompanyDataOnDemand.setComCountryCode(DdpCompany obj, int index) {
        String comCountryCode = "c_" + index;
        if (comCountryCode.length() > 3) {
            comCountryCode = comCountryCode.substring(0, 3);
        }
        obj.setComCountryCode(comCountryCode);
    }
    
    public void DdpCompanyDataOnDemand.setComCountryName(DdpCompany obj, int index) {
        String comCountryName = "comCountryName_" + index;
        if (comCountryName.length() > 64) {
            comCountryName = comCountryName.substring(0, 64);
        }
        obj.setComCountryName(comCountryName);
    }
    
    public void DdpCompanyDataOnDemand.setComRegion(DdpCompany obj, int index) {
        String comRegion = "comRegion_" + index;
        if (comRegion.length() > 16) {
            comRegion = comRegion.substring(0, 16);
        }
        obj.setComRegion(comRegion);
    }
    
    public void DdpCompanyDataOnDemand.setComStatus(DdpCompany obj, int index) {
        Integer comStatus = new Integer(index);
        obj.setComStatus(comStatus);
    }
    
    public DdpCompany DdpCompanyDataOnDemand.getSpecificDdpCompany(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpCompany obj = data.get(index);
        String id = obj.getComCompanyCode();
        return ddpCompanyService.findDdpCompany(id);
    }
    
    public DdpCompany DdpCompanyDataOnDemand.getRandomDdpCompany() {
        init();
        DdpCompany obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getComCompanyCode();
        return ddpCompanyService.findDdpCompany(id);
    }
    
    public boolean DdpCompanyDataOnDemand.modifyDdpCompany(DdpCompany obj) {
        return false;
    }
    
    public void DdpCompanyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpCompanyService.findDdpCompanyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpCompany' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpCompany>();
        for (int i = 0; i < 10; i++) {
            DdpCompany obj = getNewTransientDdpCompany(i);
            try {
                ddpCompanyService.saveDdpCompany(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpCompanyRepository.flush();
            data.add(obj);
        }
    }
    
}
