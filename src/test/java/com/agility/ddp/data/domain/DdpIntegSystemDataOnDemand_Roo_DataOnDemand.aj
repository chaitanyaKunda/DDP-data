// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpIntegSystem;
import com.agility.ddp.data.domain.DdpIntegSystemDataOnDemand;
import com.agility.ddp.data.domain.DdpIntegSystemRepository;
import com.agility.ddp.data.domain.DdpIntegSystemService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpIntegSystemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpIntegSystemDataOnDemand: @Component;
    
    private Random DdpIntegSystemDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpIntegSystem> DdpIntegSystemDataOnDemand.data;
    
    @Autowired
    DdpIntegSystemService DdpIntegSystemDataOnDemand.ddpIntegSystemService;
    
    @Autowired
    DdpIntegSystemRepository DdpIntegSystemDataOnDemand.ddpIntegSystemRepository;
    
    public DdpIntegSystem DdpIntegSystemDataOnDemand.getNewTransientDdpIntegSystem(int index) {
        DdpIntegSystem obj = new DdpIntegSystem();
        setInsCompanyCode(obj, index);
        setInsCreatedBy(obj, index);
        setInsCreatedDate(obj, index);
        setInsDomain(obj, index);
        setInsFilePath(obj, index);
        setInsModifiedBy(obj, index);
        setInsModifiedDate(obj, index);
        setInsSaPassword(obj, index);
        setInsServerIp(obj, index);
        setInsServerName(obj, index);
        setInsServiceAccount(obj, index);
        setInsStatus(obj, index);
        return obj;
    }
    
    public void DdpIntegSystemDataOnDemand.setInsCompanyCode(DdpIntegSystem obj, int index) {
        String insCompanyCode = "insCompanyCode_" + index;
        if (insCompanyCode.length() > 16) {
            insCompanyCode = insCompanyCode.substring(0, 16);
        }
        obj.setInsCompanyCode(insCompanyCode);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsCreatedBy(DdpIntegSystem obj, int index) {
        String insCreatedBy = "insCreatedBy_" + index;
        if (insCreatedBy.length() > 120) {
            insCreatedBy = insCreatedBy.substring(0, 120);
        }
        obj.setInsCreatedBy(insCreatedBy);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsCreatedDate(DdpIntegSystem obj, int index) {
        Calendar insCreatedDate = Calendar.getInstance();
        obj.setInsCreatedDate(insCreatedDate);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsDomain(DdpIntegSystem obj, int index) {
        String insDomain = "insDomain_" + index;
        if (insDomain.length() > 32) {
            insDomain = insDomain.substring(0, 32);
        }
        obj.setInsDomain(insDomain);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsFilePath(DdpIntegSystem obj, int index) {
        String insFilePath = "insFilePath_" + index;
        if (insFilePath.length() > 256) {
            insFilePath = insFilePath.substring(0, 256);
        }
        obj.setInsFilePath(insFilePath);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsModifiedBy(DdpIntegSystem obj, int index) {
        String insModifiedBy = "insModifiedBy_" + index;
        if (insModifiedBy.length() > 120) {
            insModifiedBy = insModifiedBy.substring(0, 120);
        }
        obj.setInsModifiedBy(insModifiedBy);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsModifiedDate(DdpIntegSystem obj, int index) {
        Calendar insModifiedDate = Calendar.getInstance();
        obj.setInsModifiedDate(insModifiedDate);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsSaPassword(DdpIntegSystem obj, int index) {
        String insSaPassword = "insSaPassword_" + index;
        if (insSaPassword.length() > 120) {
            insSaPassword = insSaPassword.substring(0, 120);
        }
        obj.setInsSaPassword(insSaPassword);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsServerIp(DdpIntegSystem obj, int index) {
        String insServerIp = "insServerIp_" + index;
        if (insServerIp.length() > 32) {
            insServerIp = insServerIp.substring(0, 32);
        }
        obj.setInsServerIp(insServerIp);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsServerName(DdpIntegSystem obj, int index) {
        String insServerName = "insServerName_" + index;
        if (insServerName.length() > 32) {
            insServerName = insServerName.substring(0, 32);
        }
        obj.setInsServerName(insServerName);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsServiceAccount(DdpIntegSystem obj, int index) {
        String insServiceAccount = "insServiceAccount_" + index;
        if (insServiceAccount.length() > 32) {
            insServiceAccount = insServiceAccount.substring(0, 32);
        }
        obj.setInsServiceAccount(insServiceAccount);
    }
    
    public void DdpIntegSystemDataOnDemand.setInsStatus(DdpIntegSystem obj, int index) {
        Integer insStatus = new Integer(index);
        obj.setInsStatus(insStatus);
    }
    
    public DdpIntegSystem DdpIntegSystemDataOnDemand.getSpecificDdpIntegSystem(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpIntegSystem obj = data.get(index);
        String id = obj.getInsApplicationCode();
        return ddpIntegSystemService.findDdpIntegSystem(id);
    }
    
    public DdpIntegSystem DdpIntegSystemDataOnDemand.getRandomDdpIntegSystem() {
        init();
        DdpIntegSystem obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getInsApplicationCode();
        return ddpIntegSystemService.findDdpIntegSystem(id);
    }
    
    public boolean DdpIntegSystemDataOnDemand.modifyDdpIntegSystem(DdpIntegSystem obj) {
        return false;
    }
    
    public void DdpIntegSystemDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpIntegSystemService.findDdpIntegSystemEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpIntegSystem' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpIntegSystem>();
        for (int i = 0; i < 10; i++) {
            DdpIntegSystem obj = getNewTransientDdpIntegSystem(i);
            try {
                ddpIntegSystemService.saveDdpIntegSystem(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpIntegSystemRepository.flush();
            data.add(obj);
        }
    }
    
}
