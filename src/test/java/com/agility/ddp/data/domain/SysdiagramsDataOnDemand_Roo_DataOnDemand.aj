// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.Sysdiagrams;
import com.agility.ddp.data.domain.SysdiagramsDataOnDemand;
import com.agility.ddp.data.domain.SysdiagramsRepository;
import com.agility.ddp.data.domain.SysdiagramsService;
import java.security.SecureRandom;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SysdiagramsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SysdiagramsDataOnDemand: @Component;
    
    private Random SysdiagramsDataOnDemand.rnd = new SecureRandom();
    
    private List<Sysdiagrams> SysdiagramsDataOnDemand.data;
    
    @Autowired
    SysdiagramsService SysdiagramsDataOnDemand.sysdiagramsService;
    
    @Autowired
    SysdiagramsRepository SysdiagramsDataOnDemand.sysdiagramsRepository;
    
    public Sysdiagrams SysdiagramsDataOnDemand.getNewTransientSysdiagrams(int index) {
        Sysdiagrams obj = new Sysdiagrams();
        setDefinition(obj, index);
        setName(obj, index);
        setPrincipalId(obj, index);
        return obj;
    }
    
    public void SysdiagramsDataOnDemand.setDefinition(Sysdiagrams obj, int index) {
        Blob definition = null;
        obj.setDefinition(definition);
    }
    
    public void SysdiagramsDataOnDemand.setName(Sysdiagrams obj, int index) {
        String name = "name_" + index;
        if (name.length() > 128) {
            name = new Random().nextInt(10) + name.substring(1, 128);
        }
        obj.setName(name);
    }
    
    public void SysdiagramsDataOnDemand.setPrincipalId(Sysdiagrams obj, int index) {
        Integer principalId = new Integer(index);
        obj.setPrincipalId(principalId);
    }
    
    public Sysdiagrams SysdiagramsDataOnDemand.getSpecificSysdiagrams(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Sysdiagrams obj = data.get(index);
        Integer id = obj.getDiagramId();
        return sysdiagramsService.findSysdiagrams(id);
    }
    
    public Sysdiagrams SysdiagramsDataOnDemand.getRandomSysdiagrams() {
        init();
        Sysdiagrams obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getDiagramId();
        return sysdiagramsService.findSysdiagrams(id);
    }
    
    public boolean SysdiagramsDataOnDemand.modifySysdiagrams(Sysdiagrams obj) {
        return false;
    }
    
    public void SysdiagramsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = sysdiagramsService.findSysdiagramsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Sysdiagrams' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Sysdiagrams>();
        for (int i = 0; i < 10; i++) {
            Sysdiagrams obj = getNewTransientSysdiagrams(i);
            try {
                sysdiagramsService.saveSysdiagrams(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            sysdiagramsRepository.flush();
            data.add(obj);
        }
    }
    
}
