// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCompressionSetup;
import com.agility.ddp.data.domain.DdpCompressionSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpCompressionSetupRepository;
import com.agility.ddp.data.domain.DdpCompressionSetupService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpCompressionSetupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpCompressionSetupDataOnDemand: @Component;
    
    private Random DdpCompressionSetupDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpCompressionSetup> DdpCompressionSetupDataOnDemand.data;
    
    @Autowired
    DdpCompressionSetupService DdpCompressionSetupDataOnDemand.ddpCompressionSetupService;
    
    @Autowired
    DdpCompressionSetupRepository DdpCompressionSetupDataOnDemand.ddpCompressionSetupRepository;
    
    public DdpCompressionSetup DdpCompressionSetupDataOnDemand.getNewTransientDdpCompressionSetup(int index) {
        DdpCompressionSetup obj = new DdpCompressionSetup();
        setCtsCompressionLevel(obj, index);
        setCtsCompressionSize(obj, index);
        setCtsEmailAttachmentLimit(obj, index);
        setCtsNoOfFilesAttached(obj, index);
        return obj;
    }
    
    public void DdpCompressionSetupDataOnDemand.setCtsCompressionLevel(DdpCompressionSetup obj, int index) {
        String ctsCompressionLevel = "ctsCompression_" + index;
        if (ctsCompressionLevel.length() > 16) {
            ctsCompressionLevel = ctsCompressionLevel.substring(0, 16);
        }
        obj.setCtsCompressionLevel(ctsCompressionLevel);
    }
    
    public void DdpCompressionSetupDataOnDemand.setCtsCompressionSize(DdpCompressionSetup obj, int index) {
        Integer ctsCompressionSize = new Integer(index);
        obj.setCtsCompressionSize(ctsCompressionSize);
    }
    
    public void DdpCompressionSetupDataOnDemand.setCtsEmailAttachmentLimit(DdpCompressionSetup obj, int index) {
        Integer ctsEmailAttachmentLimit = new Integer(index);
        obj.setCtsEmailAttachmentLimit(ctsEmailAttachmentLimit);
    }
    
    public void DdpCompressionSetupDataOnDemand.setCtsNoOfFilesAttached(DdpCompressionSetup obj, int index) {
        Integer ctsNoOfFilesAttached = new Integer(index);
        obj.setCtsNoOfFilesAttached(ctsNoOfFilesAttached);
    }
    
    public DdpCompressionSetup DdpCompressionSetupDataOnDemand.getSpecificDdpCompressionSetup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpCompressionSetup obj = data.get(index);
        Integer id = obj.getCtsCompressionId();
        return ddpCompressionSetupService.findDdpCompressionSetup(id);
    }
    
    public DdpCompressionSetup DdpCompressionSetupDataOnDemand.getRandomDdpCompressionSetup() {
        init();
        DdpCompressionSetup obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getCtsCompressionId();
        return ddpCompressionSetupService.findDdpCompressionSetup(id);
    }
    
    public boolean DdpCompressionSetupDataOnDemand.modifyDdpCompressionSetup(DdpCompressionSetup obj) {
        return false;
    }
    
    public void DdpCompressionSetupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpCompressionSetupService.findDdpCompressionSetupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpCompressionSetup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpCompressionSetup>();
        for (int i = 0; i < 10; i++) {
            DdpCompressionSetup obj = getNewTransientDdpCompressionSetup(i);
            try {
                ddpCompressionSetupService.saveDdpCompressionSetup(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpCompressionSetupRepository.flush();
            data.add(obj);
        }
    }
    
}
