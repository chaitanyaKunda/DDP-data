// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCommFtp;
import com.agility.ddp.data.domain.DdpCommFtpDataOnDemand;
import com.agility.ddp.data.domain.DdpCommFtpRepository;
import com.agility.ddp.data.domain.DdpCommFtpService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpCommFtpDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpCommFtpDataOnDemand: @Component;
    
    private Random DdpCommFtpDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpCommFtp> DdpCommFtpDataOnDemand.data;
    
    @Autowired
    DdpCommFtpService DdpCommFtpDataOnDemand.ddpCommFtpService;
    
    @Autowired
    DdpCommFtpRepository DdpCommFtpDataOnDemand.ddpCommFtpRepository;
    
    public DdpCommFtp DdpCommFtpDataOnDemand.getNewTransientDdpCommFtp(int index) {
        DdpCommFtp obj = new DdpCommFtp();
        setCftFtpLocation(obj, index);
        setCftFtpPassword(obj, index);
        setCftFtpPort(obj, index);
        setCftFtpSecure(obj, index);
        setCftFtpUserName(obj, index);
        return obj;
    }
    
    public void DdpCommFtpDataOnDemand.setCftFtpLocation(DdpCommFtp obj, int index) {
        String cftFtpLocation = "cftFtpLocation_" + index;
        if (cftFtpLocation.length() > 128) {
            cftFtpLocation = cftFtpLocation.substring(0, 128);
        }
        obj.setCftFtpLocation(cftFtpLocation);
    }
    
    public void DdpCommFtpDataOnDemand.setCftFtpPassword(DdpCommFtp obj, int index) {
        String cftFtpPassword = "cftFtpPassword_" + index;
        if (cftFtpPassword.length() > 120) {
            cftFtpPassword = cftFtpPassword.substring(0, 120);
        }
        obj.setCftFtpPassword(cftFtpPassword);
    }
    
    public void DdpCommFtpDataOnDemand.setCftFtpPort(DdpCommFtp obj, int index) {
        Integer cftFtpPort = new Integer(index);
        obj.setCftFtpPort(cftFtpPort);
    }
    
    public void DdpCommFtpDataOnDemand.setCftFtpSecure(DdpCommFtp obj, int index) {
        String cftFtpSecure = "cftFtpSecure_" + index;
        if (cftFtpSecure.length() > 16) {
            cftFtpSecure = cftFtpSecure.substring(0, 16);
        }
        obj.setCftFtpSecure(cftFtpSecure);
    }
    
    public void DdpCommFtpDataOnDemand.setCftFtpUserName(DdpCommFtp obj, int index) {
        String cftFtpUserName = "cftFtpUserName_" + index;
        if (cftFtpUserName.length() > 120) {
            cftFtpUserName = cftFtpUserName.substring(0, 120);
        }
        obj.setCftFtpUserName(cftFtpUserName);
    }
    
    public DdpCommFtp DdpCommFtpDataOnDemand.getSpecificDdpCommFtp(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpCommFtp obj = data.get(index);
        Long id = obj.getCftFtpId();
        return ddpCommFtpService.findDdpCommFtp(id);
    }
    
    public DdpCommFtp DdpCommFtpDataOnDemand.getRandomDdpCommFtp() {
        init();
        DdpCommFtp obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getCftFtpId();
        return ddpCommFtpService.findDdpCommFtp(id);
    }
    
    public boolean DdpCommFtpDataOnDemand.modifyDdpCommFtp(DdpCommFtp obj) {
        return false;
    }
    
    public void DdpCommFtpDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpCommFtpService.findDdpCommFtpEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpCommFtp' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpCommFtp>();
        for (int i = 0; i < 10; i++) {
            DdpCommFtp obj = getNewTransientDdpCommFtp(i);
            try {
                ddpCommFtpService.saveDdpCommFtp(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpCommFtpRepository.flush();
            data.add(obj);
        }
    }
    
}
