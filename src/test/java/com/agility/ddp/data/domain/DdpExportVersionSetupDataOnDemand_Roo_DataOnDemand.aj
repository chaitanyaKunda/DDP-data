// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpExportVersionSetup;
import com.agility.ddp.data.domain.DdpExportVersionSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpExportVersionSetupRepository;
import com.agility.ddp.data.domain.DdpExportVersionSetupService;
import com.agility.ddp.data.domain.DdpRuleDetail;
import com.agility.ddp.data.domain.DdpRuleDetailDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpExportVersionSetupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpExportVersionSetupDataOnDemand: @Component;
    
    private Random DdpExportVersionSetupDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpExportVersionSetup> DdpExportVersionSetupDataOnDemand.data;
    
    @Autowired
    DdpRuleDetailDataOnDemand DdpExportVersionSetupDataOnDemand.ddpRuleDetailDataOnDemand;
    
    @Autowired
    DdpExportVersionSetupService DdpExportVersionSetupDataOnDemand.ddpExportVersionSetupService;
    
    @Autowired
    DdpExportVersionSetupRepository DdpExportVersionSetupDataOnDemand.ddpExportVersionSetupRepository;
    
    public DdpExportVersionSetup DdpExportVersionSetupDataOnDemand.getNewTransientDdpExportVersionSetup(int index) {
        DdpExportVersionSetup obj = new DdpExportVersionSetup();
        setEvsCreatedBy(obj, index);
        setEvsCreatedDate(obj, index);
        setEvsModifiedBy(obj, index);
        setEvsModifiedDate(obj, index);
        setEvsOption(obj, index);
        setEvsRdtId(obj, index);
        return obj;
    }
    
    public void DdpExportVersionSetupDataOnDemand.setEvsCreatedBy(DdpExportVersionSetup obj, int index) {
        String evsCreatedBy = "evsCreatedBy_" + index;
        if (evsCreatedBy.length() > 120) {
            evsCreatedBy = evsCreatedBy.substring(0, 120);
        }
        obj.setEvsCreatedBy(evsCreatedBy);
    }
    
    public void DdpExportVersionSetupDataOnDemand.setEvsCreatedDate(DdpExportVersionSetup obj, int index) {
        Calendar evsCreatedDate = Calendar.getInstance();
        obj.setEvsCreatedDate(evsCreatedDate);
    }
    
    public void DdpExportVersionSetupDataOnDemand.setEvsModifiedBy(DdpExportVersionSetup obj, int index) {
        String evsModifiedBy = "evsModifiedBy_" + index;
        if (evsModifiedBy.length() > 120) {
            evsModifiedBy = evsModifiedBy.substring(0, 120);
        }
        obj.setEvsModifiedBy(evsModifiedBy);
    }
    
    public void DdpExportVersionSetupDataOnDemand.setEvsModifiedDate(DdpExportVersionSetup obj, int index) {
        Calendar evsModifiedDate = Calendar.getInstance();
        obj.setEvsModifiedDate(evsModifiedDate);
    }
    
    public void DdpExportVersionSetupDataOnDemand.setEvsOption(DdpExportVersionSetup obj, int index) {
        String evsOption = "evsOption_" + index;
        if (evsOption.length() > 16) {
            evsOption = evsOption.substring(0, 16);
        }
        obj.setEvsOption(evsOption);
    }
    
    public void DdpExportVersionSetupDataOnDemand.setEvsRdtId(DdpExportVersionSetup obj, int index) {
        DdpRuleDetail evsRdtId = ddpRuleDetailDataOnDemand.getRandomDdpRuleDetail();
        obj.setEvsRdtId(evsRdtId);
    }
    
    public DdpExportVersionSetup DdpExportVersionSetupDataOnDemand.getSpecificDdpExportVersionSetup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpExportVersionSetup obj = data.get(index);
        Integer id = obj.getEvsId();
        return ddpExportVersionSetupService.findDdpExportVersionSetup(id);
    }
    
    public DdpExportVersionSetup DdpExportVersionSetupDataOnDemand.getRandomDdpExportVersionSetup() {
        init();
        DdpExportVersionSetup obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getEvsId();
        return ddpExportVersionSetupService.findDdpExportVersionSetup(id);
    }
    
    public boolean DdpExportVersionSetupDataOnDemand.modifyDdpExportVersionSetup(DdpExportVersionSetup obj) {
        return false;
    }
    
    public void DdpExportVersionSetupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpExportVersionSetupService.findDdpExportVersionSetupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpExportVersionSetup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpExportVersionSetup>();
        for (int i = 0; i < 10; i++) {
            DdpExportVersionSetup obj = getNewTransientDdpExportVersionSetup(i);
            try {
                ddpExportVersionSetupService.saveDdpExportVersionSetup(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpExportVersionSetupRepository.flush();
            data.add(obj);
        }
    }
    
}
