// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedReqDocs;
import com.agility.ddp.data.domain.DdpAedReqDocsDataOnDemand;
import com.agility.ddp.data.domain.DdpAedReqDocsRepository;
import com.agility.ddp.data.domain.DdpAedReqDocsService;
import com.agility.ddp.data.domain.DdpMergeSetup;
import com.agility.ddp.data.domain.DdpMergeSetupDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpAedReqDocsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpAedReqDocsDataOnDemand: @Component;
    
    private Random DdpAedReqDocsDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpAedReqDocs> DdpAedReqDocsDataOnDemand.data;
    
    @Autowired
    DdpMergeSetupDataOnDemand DdpAedReqDocsDataOnDemand.ddpMergeSetupDataOnDemand;
    
    @Autowired
    DdpAedReqDocsService DdpAedReqDocsDataOnDemand.ddpAedReqDocsService;
    
    @Autowired
    DdpAedReqDocsRepository DdpAedReqDocsDataOnDemand.ddpAedReqDocsRepository;
    
    public DdpAedReqDocs DdpAedReqDocsDataOnDemand.getNewTransientDdpAedReqDocs(int index) {
        DdpAedReqDocs obj = new DdpAedReqDocs();
        setArdCreatedBy(obj, index);
        setArdCreatedDate(obj, index);
        setArdDocRequired(obj, index);
        setArdDocType(obj, index);
        setArdMergeSeq(obj, index);
        setArdModifiedBy(obj, index);
        setArdModifiedDate(obj, index);
        setArdStatus(obj, index);
        setDdpMergeSetup(obj, index);
        return obj;
    }
    
    public void DdpAedReqDocsDataOnDemand.setArdCreatedBy(DdpAedReqDocs obj, int index) {
        String ardCreatedBy = "ardCreatedBy_" + index;
        if (ardCreatedBy.length() > 120) {
            ardCreatedBy = ardCreatedBy.substring(0, 120);
        }
        obj.setArdCreatedBy(ardCreatedBy);
    }
    
    public void DdpAedReqDocsDataOnDemand.setArdCreatedDate(DdpAedReqDocs obj, int index) {
        Calendar ardCreatedDate = Calendar.getInstance();
        obj.setArdCreatedDate(ardCreatedDate);
    }
    
    public void DdpAedReqDocsDataOnDemand.setArdDocRequired(DdpAedReqDocs obj, int index) {
        String ardDocRequired = "ard_" + index;
        if (ardDocRequired.length() > 5) {
            ardDocRequired = ardDocRequired.substring(0, 5);
        }
        obj.setArdDocRequired(ardDocRequired);
    }
    
    public void DdpAedReqDocsDataOnDemand.setArdDocType(DdpAedReqDocs obj, int index) {
        String ardDocType = "ardDocType_" + index;
        if (ardDocType.length() > 12) {
            ardDocType = ardDocType.substring(0, 12);
        }
        obj.setArdDocType(ardDocType);
    }
    
    public void DdpAedReqDocsDataOnDemand.setArdMergeSeq(DdpAedReqDocs obj, int index) {
        Integer ardMergeSeq = new Integer(index);
        obj.setArdMergeSeq(ardMergeSeq);
    }
    
    public void DdpAedReqDocsDataOnDemand.setArdModifiedBy(DdpAedReqDocs obj, int index) {
        String ardModifiedBy = "ardModifiedBy_" + index;
        if (ardModifiedBy.length() > 120) {
            ardModifiedBy = ardModifiedBy.substring(0, 120);
        }
        obj.setArdModifiedBy(ardModifiedBy);
    }
    
    public void DdpAedReqDocsDataOnDemand.setArdModifiedDate(DdpAedReqDocs obj, int index) {
        Calendar ardModifiedDate = Calendar.getInstance();
        obj.setArdModifiedDate(ardModifiedDate);
    }
    
    public void DdpAedReqDocsDataOnDemand.setArdStatus(DdpAedReqDocs obj, int index) {
        Integer ardStatus = new Integer(index);
        obj.setArdStatus(ardStatus);
    }
    
    public void DdpAedReqDocsDataOnDemand.setDdpMergeSetup(DdpAedReqDocs obj, int index) {
        DdpMergeSetup ddpMergeSetup = ddpMergeSetupDataOnDemand.getSpecificDdpMergeSetup(index);
        obj.setDdpMergeSetup(ddpMergeSetup);
    }
    
    public DdpAedReqDocs DdpAedReqDocsDataOnDemand.getSpecificDdpAedReqDocs(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpAedReqDocs obj = data.get(index);
        Integer id = obj.getArdMergeId();
        return ddpAedReqDocsService.findDdpAedReqDocs(id);
    }
    
    public DdpAedReqDocs DdpAedReqDocsDataOnDemand.getRandomDdpAedReqDocs() {
        init();
        DdpAedReqDocs obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getArdMergeId();
        return ddpAedReqDocsService.findDdpAedReqDocs(id);
    }
    
    public boolean DdpAedReqDocsDataOnDemand.modifyDdpAedReqDocs(DdpAedReqDocs obj) {
        return false;
    }
    
    public void DdpAedReqDocsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpAedReqDocsService.findDdpAedReqDocsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpAedReqDocs' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpAedReqDocs>();
        for (int i = 0; i < 10; i++) {
            DdpAedReqDocs obj = getNewTransientDdpAedReqDocs(i);
            try {
                ddpAedReqDocsService.saveDdpAedReqDocs(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpAedReqDocsRepository.flush();
            data.add(obj);
        }
    }
    
}
