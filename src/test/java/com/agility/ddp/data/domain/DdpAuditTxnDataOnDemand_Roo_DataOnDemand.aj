// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAuditTxn;
import com.agility.ddp.data.domain.DdpAuditTxnDataOnDemand;
import com.agility.ddp.data.domain.DdpAuditTxnRepository;
import com.agility.ddp.data.domain.DdpAuditTxnService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpAuditTxnDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpAuditTxnDataOnDemand: @Component;
    
    private Random DdpAuditTxnDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpAuditTxn> DdpAuditTxnDataOnDemand.data;
    
    @Autowired
    DdpAuditTxnService DdpAuditTxnDataOnDemand.ddpAuditTxnService;
    
    @Autowired
    DdpAuditTxnRepository DdpAuditTxnDataOnDemand.ddpAuditTxnRepository;
    
    public DdpAuditTxn DdpAuditTxnDataOnDemand.getNewTransientDdpAuditTxn(int index) {
        DdpAuditTxn obj = new DdpAuditTxn();
        setAtxApplicationName(obj, index);
        setAtxCreatedBy(obj, index);
        setAtxCreatedDate(obj, index);
        setAtxDetail(obj, index);
        setAtxEventName(obj, index);
        setAtxEventSource(obj, index);
        setAtxObjectName(obj, index);
        setAtxTxnId(obj, index);
        return obj;
    }
    
    public void DdpAuditTxnDataOnDemand.setAtxApplicationName(DdpAuditTxn obj, int index) {
        String atxApplicationName = "atxApplicationName_" + index;
        if (atxApplicationName.length() > 45) {
            atxApplicationName = atxApplicationName.substring(0, 45);
        }
        obj.setAtxApplicationName(atxApplicationName);
    }
    
    public void DdpAuditTxnDataOnDemand.setAtxCreatedBy(DdpAuditTxn obj, int index) {
        String atxCreatedBy = "atxCreatedBy_" + index;
        if (atxCreatedBy.length() > 45) {
            atxCreatedBy = atxCreatedBy.substring(0, 45);
        }
        obj.setAtxCreatedBy(atxCreatedBy);
    }
    
    public void DdpAuditTxnDataOnDemand.setAtxCreatedDate(DdpAuditTxn obj, int index) {
        Calendar atxCreatedDate = Calendar.getInstance();
        obj.setAtxCreatedDate(atxCreatedDate);
    }
    
    public void DdpAuditTxnDataOnDemand.setAtxDetail(DdpAuditTxn obj, int index) {
        String atxDetail = "atxDetail_" + index;
        if (atxDetail.length() > 256) {
            atxDetail = atxDetail.substring(0, 256);
        }
        obj.setAtxDetail(atxDetail);
    }
    
    public void DdpAuditTxnDataOnDemand.setAtxEventName(DdpAuditTxn obj, int index) {
        String atxEventName = "atxEventName_" + index;
        if (atxEventName.length() > 16) {
            atxEventName = atxEventName.substring(0, 16);
        }
        obj.setAtxEventName(atxEventName);
    }
    
    public void DdpAuditTxnDataOnDemand.setAtxEventSource(DdpAuditTxn obj, int index) {
        String atxEventSource = "atxEventSource_" + index;
        if (atxEventSource.length() > 120) {
            atxEventSource = atxEventSource.substring(0, 120);
        }
        obj.setAtxEventSource(atxEventSource);
    }
    
    public void DdpAuditTxnDataOnDemand.setAtxObjectName(DdpAuditTxn obj, int index) {
        String atxObjectName = "atxObjectName_" + index;
        if (atxObjectName.length() > 120) {
            atxObjectName = atxObjectName.substring(0, 120);
        }
        obj.setAtxObjectName(atxObjectName);
    }
    
    public void DdpAuditTxnDataOnDemand.setAtxTxnId(DdpAuditTxn obj, int index) {
        String atxTxnId = "atxTxnId_" + index;
        if (atxTxnId.length() > 16) {
            atxTxnId = atxTxnId.substring(0, 16);
        }
        obj.setAtxTxnId(atxTxnId);
    }
    
    public DdpAuditTxn DdpAuditTxnDataOnDemand.getSpecificDdpAuditTxn(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpAuditTxn obj = data.get(index);
        Integer id = obj.getAtxId();
        return ddpAuditTxnService.findDdpAuditTxn(id);
    }
    
    public DdpAuditTxn DdpAuditTxnDataOnDemand.getRandomDdpAuditTxn() {
        init();
        DdpAuditTxn obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getAtxId();
        return ddpAuditTxnService.findDdpAuditTxn(id);
    }
    
    public boolean DdpAuditTxnDataOnDemand.modifyDdpAuditTxn(DdpAuditTxn obj) {
        return false;
    }
    
    public void DdpAuditTxnDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpAuditTxnService.findDdpAuditTxnEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpAuditTxn' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpAuditTxn>();
        for (int i = 0; i < 10; i++) {
            DdpAuditTxn obj = getNewTransientDdpAuditTxn(i);
            try {
                ddpAuditTxnService.saveDdpAuditTxn(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpAuditTxnRepository.flush();
            data.add(obj);
        }
    }
    
}
