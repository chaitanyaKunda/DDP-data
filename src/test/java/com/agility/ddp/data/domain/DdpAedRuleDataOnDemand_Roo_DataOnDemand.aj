// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedRule;
import com.agility.ddp.data.domain.DdpAedRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpAedRuleRepository;
import com.agility.ddp.data.domain.DdpAedRuleService;
import com.agility.ddp.data.domain.DdpCommunicationSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpCompressionSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpDocnameConvDataOnDemand;
import com.agility.ddp.data.domain.DdpMergeSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpNotificationDataOnDemand;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.data.domain.DdpRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpSchedulerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpAedRuleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpAedRuleDataOnDemand: @Component;
    
    private Random DdpAedRuleDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpAedRule> DdpAedRuleDataOnDemand.data;
    
    @Autowired
    DdpCommunicationSetupDataOnDemand DdpAedRuleDataOnDemand.ddpCommunicationSetupDataOnDemand;
    
    @Autowired
    DdpCompressionSetupDataOnDemand DdpAedRuleDataOnDemand.ddpCompressionSetupDataOnDemand;
    
    @Autowired
    DdpDocnameConvDataOnDemand DdpAedRuleDataOnDemand.ddpDocnameConvDataOnDemand;
    
    @Autowired
    DdpMergeSetupDataOnDemand DdpAedRuleDataOnDemand.ddpMergeSetupDataOnDemand;
    
    @Autowired
    DdpNotificationDataOnDemand DdpAedRuleDataOnDemand.ddpNotificationDataOnDemand;
    
    @Autowired
    DdpSchedulerDataOnDemand DdpAedRuleDataOnDemand.ddpSchedulerDataOnDemand;
    
    @Autowired
    DdpRuleDataOnDemand DdpAedRuleDataOnDemand.ddpRuleDataOnDemand;
    
    @Autowired
    DdpAedRuleService DdpAedRuleDataOnDemand.ddpAedRuleService;
    
    @Autowired
    DdpAedRuleRepository DdpAedRuleDataOnDemand.ddpAedRuleRepository;
    
    public DdpAedRule DdpAedRuleDataOnDemand.getNewTransientDdpAedRule(int index) {
        DdpAedRule obj = new DdpAedRule();
        setAedActivationDate(obj, index);
        setAedCreatedBy(obj, index);
        setAedCreatedDate(obj, index);
        setAedIsPartyCheckRequired(obj, index);
        setAedModifiedBy(obj, index);
        setAedModifiedDate(obj, index);
        setAedPropFile(obj, index);
        setAedPropInUse(obj, index);
        setAedPropTable(obj, index);
        setAedStatus(obj, index);
        setDdpRule(obj, index);
        return obj;
    }
    
    public void DdpAedRuleDataOnDemand.setAedActivationDate(DdpAedRule obj, int index) {
        Calendar aedActivationDate = Calendar.getInstance();
        obj.setAedActivationDate(aedActivationDate);
    }
    
    public void DdpAedRuleDataOnDemand.setAedCreatedBy(DdpAedRule obj, int index) {
        String aedCreatedBy = "aedCreatedBy_" + index;
        if (aedCreatedBy.length() > 120) {
            aedCreatedBy = aedCreatedBy.substring(0, 120);
        }
        obj.setAedCreatedBy(aedCreatedBy);
    }
    
    public void DdpAedRuleDataOnDemand.setAedCreatedDate(DdpAedRule obj, int index) {
        Calendar aedCreatedDate = Calendar.getInstance();
        obj.setAedCreatedDate(aedCreatedDate);
    }
    
    public void DdpAedRuleDataOnDemand.setAedIsPartyCheckRequired(DdpAedRule obj, int index) {
        Integer aedIsPartyCheckRequired = new Integer(index);
        obj.setAedIsPartyCheckRequired(aedIsPartyCheckRequired);
    }
    
    public void DdpAedRuleDataOnDemand.setAedModifiedBy(DdpAedRule obj, int index) {
        String aedModifiedBy = "aedModifiedBy_" + index;
        if (aedModifiedBy.length() > 120) {
            aedModifiedBy = aedModifiedBy.substring(0, 120);
        }
        obj.setAedModifiedBy(aedModifiedBy);
    }
    
    public void DdpAedRuleDataOnDemand.setAedModifiedDate(DdpAedRule obj, int index) {
        Calendar aedModifiedDate = Calendar.getInstance();
        obj.setAedModifiedDate(aedModifiedDate);
    }
    
    public void DdpAedRuleDataOnDemand.setAedPropFile(DdpAedRule obj, int index) {
        String aedPropFile = "aedPropFile_" + index;
        if (aedPropFile.length() > 120) {
            aedPropFile = aedPropFile.substring(0, 120);
        }
        obj.setAedPropFile(aedPropFile);
    }
    
    public void DdpAedRuleDataOnDemand.setAedPropInUse(DdpAedRule obj, int index) {
        String aedPropInUse = "aedPropInUse_" + index;
        if (aedPropInUse.length() > 45) {
            aedPropInUse = aedPropInUse.substring(0, 45);
        }
        obj.setAedPropInUse(aedPropInUse);
    }
    
    public void DdpAedRuleDataOnDemand.setAedPropTable(DdpAedRule obj, int index) {
        String aedPropTable = "aedPropTable_" + index;
        if (aedPropTable.length() > 45) {
            aedPropTable = aedPropTable.substring(0, 45);
        }
        obj.setAedPropTable(aedPropTable);
    }
    
    public void DdpAedRuleDataOnDemand.setAedStatus(DdpAedRule obj, int index) {
        Integer aedStatus = new Integer(index);
        obj.setAedStatus(aedStatus);
    }
    
    public void DdpAedRuleDataOnDemand.setDdpRule(DdpAedRule obj, int index) {
        DdpRule ddpRule = ddpRuleDataOnDemand.getSpecificDdpRule(index);
        obj.setDdpRule(ddpRule);
    }
    
    public DdpAedRule DdpAedRuleDataOnDemand.getSpecificDdpAedRule(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpAedRule obj = data.get(index);
        Integer id = obj.getAedRuleId();
        return ddpAedRuleService.findDdpAedRule(id);
    }
    
    public DdpAedRule DdpAedRuleDataOnDemand.getRandomDdpAedRule() {
        init();
        DdpAedRule obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getAedRuleId();
        return ddpAedRuleService.findDdpAedRule(id);
    }
    
    public boolean DdpAedRuleDataOnDemand.modifyDdpAedRule(DdpAedRule obj) {
        return false;
    }
    
    public void DdpAedRuleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpAedRuleService.findDdpAedRuleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpAedRule' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpAedRule>();
        for (int i = 0; i < 10; i++) {
            DdpAedRule obj = getNewTransientDdpAedRule(i);
            try {
                ddpAedRuleService.saveDdpAedRule(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpAedRuleRepository.flush();
            data.add(obj);
        }
    }
    
}
