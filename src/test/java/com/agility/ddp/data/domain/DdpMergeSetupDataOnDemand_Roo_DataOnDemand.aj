// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedReqDocsDataOnDemand;
import com.agility.ddp.data.domain.DdpMergeSetup;
import com.agility.ddp.data.domain.DdpMergeSetupDataOnDemand;
import com.agility.ddp.data.domain.DdpMergeSetupRepository;
import com.agility.ddp.data.domain.DdpMergeSetupService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpMergeSetupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpMergeSetupDataOnDemand: @Component;
    
    private Random DdpMergeSetupDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpMergeSetup> DdpMergeSetupDataOnDemand.data;
    
    @Autowired
    DdpAedReqDocsDataOnDemand DdpMergeSetupDataOnDemand.ddpAedReqDocsDataOnDemand;
    
    @Autowired
    DdpMergeSetupService DdpMergeSetupDataOnDemand.ddpMergeSetupService;
    
    @Autowired
    DdpMergeSetupRepository DdpMergeSetupDataOnDemand.ddpMergeSetupRepository;
    
    public DdpMergeSetup DdpMergeSetupDataOnDemand.getNewTransientDdpMergeSetup(int index) {
        DdpMergeSetup obj = new DdpMergeSetup();
        setMtsBookmarksEnable(obj, index);
        setMtsCreatedBy(obj, index);
        setMtsCreatedDate(obj, index);
        setMtsHyperlinksEnable(obj, index);
        setMtsModifiedBy(obj, index);
        setMtsModifiedDate(obj, index);
        setMtsOptimizeForWeb(obj, index);
        setMtsPagenumEnable(obj, index);
        setMtsPdfFormat(obj, index);
        setMtsStatus(obj, index);
        setMtsTocEnable(obj, index);
        setMtsWatermarkText(obj, index);
        return obj;
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsBookmarksEnable(DdpMergeSetup obj, int index) {
        Integer mtsBookmarksEnable = new Integer(index);
        obj.setMtsBookmarksEnable(mtsBookmarksEnable);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsCreatedBy(DdpMergeSetup obj, int index) {
        String mtsCreatedBy = "mtsCreatedBy_" + index;
        if (mtsCreatedBy.length() > 120) {
            mtsCreatedBy = mtsCreatedBy.substring(0, 120);
        }
        obj.setMtsCreatedBy(mtsCreatedBy);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsCreatedDate(DdpMergeSetup obj, int index) {
        Calendar mtsCreatedDate = Calendar.getInstance();
        obj.setMtsCreatedDate(mtsCreatedDate);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsHyperlinksEnable(DdpMergeSetup obj, int index) {
        Integer mtsHyperlinksEnable = new Integer(index);
        obj.setMtsHyperlinksEnable(mtsHyperlinksEnable);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsModifiedBy(DdpMergeSetup obj, int index) {
        String mtsModifiedBy = "mtsModifiedBy_" + index;
        if (mtsModifiedBy.length() > 120) {
            mtsModifiedBy = mtsModifiedBy.substring(0, 120);
        }
        obj.setMtsModifiedBy(mtsModifiedBy);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsModifiedDate(DdpMergeSetup obj, int index) {
        Calendar mtsModifiedDate = Calendar.getInstance();
        obj.setMtsModifiedDate(mtsModifiedDate);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsOptimizeForWeb(DdpMergeSetup obj, int index) {
        Integer mtsOptimizeForWeb = new Integer(index);
        obj.setMtsOptimizeForWeb(mtsOptimizeForWeb);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsPagenumEnable(DdpMergeSetup obj, int index) {
        Integer mtsPagenumEnable = new Integer(index);
        obj.setMtsPagenumEnable(mtsPagenumEnable);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsPdfFormat(DdpMergeSetup obj, int index) {
        String mtsPdfFormat = "mtsPdfFormat_" + index;
        if (mtsPdfFormat.length() > 16) {
            mtsPdfFormat = mtsPdfFormat.substring(0, 16);
        }
        obj.setMtsPdfFormat(mtsPdfFormat);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsStatus(DdpMergeSetup obj, int index) {
        Integer mtsStatus = new Integer(index);
        obj.setMtsStatus(mtsStatus);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsTocEnable(DdpMergeSetup obj, int index) {
        Integer mtsTocEnable = new Integer(index);
        obj.setMtsTocEnable(mtsTocEnable);
    }
    
    public void DdpMergeSetupDataOnDemand.setMtsWatermarkText(DdpMergeSetup obj, int index) {
        String mtsWatermarkText = "mtsWatermarkText_" + index;
        if (mtsWatermarkText.length() > 45) {
            mtsWatermarkText = mtsWatermarkText.substring(0, 45);
        }
        obj.setMtsWatermarkText(mtsWatermarkText);
    }
    
    public DdpMergeSetup DdpMergeSetupDataOnDemand.getSpecificDdpMergeSetup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpMergeSetup obj = data.get(index);
        Integer id = obj.getMtsMergeId();
        return ddpMergeSetupService.findDdpMergeSetup(id);
    }
    
    public DdpMergeSetup DdpMergeSetupDataOnDemand.getRandomDdpMergeSetup() {
        init();
        DdpMergeSetup obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getMtsMergeId();
        return ddpMergeSetupService.findDdpMergeSetup(id);
    }
    
    public boolean DdpMergeSetupDataOnDemand.modifyDdpMergeSetup(DdpMergeSetup obj) {
        return false;
    }
    
    public void DdpMergeSetupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpMergeSetupService.findDdpMergeSetupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpMergeSetup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpMergeSetup>();
        for (int i = 0; i < 10; i++) {
            DdpMergeSetup obj = getNewTransientDdpMergeSetup(i);
            try {
                ddpMergeSetupService.saveDdpMergeSetup(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpMergeSetupRepository.flush();
            data.add(obj);
        }
    }
    
}
