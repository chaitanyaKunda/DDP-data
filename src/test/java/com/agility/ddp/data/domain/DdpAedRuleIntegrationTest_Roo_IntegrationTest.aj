// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpAedRuleDataOnDemand;
import com.agility.ddp.data.domain.DdpAedRuleIntegrationTest;
import com.agility.ddp.data.domain.DdpAedRuleRepository;
import com.agility.ddp.data.domain.DdpAedRuleService;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DdpAedRuleIntegrationTest_Roo_IntegrationTest {
    
    declare @type: DdpAedRuleIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: DdpAedRuleIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: DdpAedRuleIntegrationTest: @Transactional;
    
    @Autowired
    DdpAedRuleDataOnDemand DdpAedRuleIntegrationTest.dod;
    
    @Autowired
    DdpAedRuleService DdpAedRuleIntegrationTest.ddpAedRuleService;
    
    @Autowired
    DdpAedRuleRepository DdpAedRuleIntegrationTest.ddpAedRuleRepository;
    
    @Test
    public void DdpAedRuleIntegrationTest.testCountAllDdpAedRules() {
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to initialize correctly", dod.getRandomDdpAedRule());
        long count = ddpAedRuleService.countAllDdpAedRules();
        Assert.assertTrue("Counter for 'DdpAedRule' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void DdpAedRuleIntegrationTest.testFindDdpAedRule() {
        DdpAedRule obj = dod.getRandomDdpAedRule();
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to initialize correctly", obj);
        Integer id = obj.getAedRuleId();
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to provide an identifier", id);
        obj = ddpAedRuleService.findDdpAedRule(id);
        Assert.assertNotNull("Find method for 'DdpAedRule' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'DdpAedRule' returned the incorrect identifier", id, obj.getAedRuleId());
    }
    
    @Test
    public void DdpAedRuleIntegrationTest.testFindAllDdpAedRules() {
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to initialize correctly", dod.getRandomDdpAedRule());
        long count = ddpAedRuleService.countAllDdpAedRules();
        Assert.assertTrue("Too expensive to perform a find all test for 'DdpAedRule', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<DdpAedRule> result = ddpAedRuleService.findAllDdpAedRules();
        Assert.assertNotNull("Find all method for 'DdpAedRule' illegally returned null", result);
        Assert.assertTrue("Find all method for 'DdpAedRule' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void DdpAedRuleIntegrationTest.testFindDdpAedRuleEntries() {
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to initialize correctly", dod.getRandomDdpAedRule());
        long count = ddpAedRuleService.countAllDdpAedRules();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<DdpAedRule> result = ddpAedRuleService.findDdpAedRuleEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'DdpAedRule' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'DdpAedRule' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void DdpAedRuleIntegrationTest.testSaveDdpAedRule() {
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to initialize correctly", dod.getRandomDdpAedRule());
        DdpAedRule obj = dod.getNewTransientDdpAedRule(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'DdpAedRule' identifier to be null", obj.getAedRuleId());
        try {
            ddpAedRuleService.saveDdpAedRule(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        ddpAedRuleRepository.flush();
        Assert.assertNotNull("Expected 'DdpAedRule' identifier to no longer be null", obj.getAedRuleId());
    }
    
    @Test
    public void DdpAedRuleIntegrationTest.testDeleteDdpAedRule() {
        DdpAedRule obj = dod.getRandomDdpAedRule();
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to initialize correctly", obj);
        Integer id = obj.getAedRuleId();
        Assert.assertNotNull("Data on demand for 'DdpAedRule' failed to provide an identifier", id);
        obj = ddpAedRuleService.findDdpAedRule(id);
        ddpAedRuleService.deleteDdpAedRule(obj);
        ddpAedRuleRepository.flush();
        Assert.assertNull("Failed to remove 'DdpAedRule' with identifier '" + id + "'", ddpAedRuleService.findDdpAedRule(id));
    }
    
}
