// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpGenSourceLkp;
import com.agility.ddp.data.domain.DdpGenSourceLkpDataOnDemand;
import com.agility.ddp.data.domain.DdpGenSourceLkpPK;
import com.agility.ddp.data.domain.DdpGenSourceLkpRepository;
import com.agility.ddp.data.domain.DdpGenSourceLkpService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpGenSourceLkpDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpGenSourceLkpDataOnDemand: @Component;
    
    private Random DdpGenSourceLkpDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpGenSourceLkp> DdpGenSourceLkpDataOnDemand.data;
    
    @Autowired
    DdpGenSourceLkpService DdpGenSourceLkpDataOnDemand.ddpGenSourceLkpService;
    
    @Autowired
    DdpGenSourceLkpRepository DdpGenSourceLkpDataOnDemand.ddpGenSourceLkpRepository;
    
    public DdpGenSourceLkp DdpGenSourceLkpDataOnDemand.getNewTransientDdpGenSourceLkp(int index) {
        DdpGenSourceLkp obj = new DdpGenSourceLkp();
        setEmbeddedIdClass(obj, index);
        return obj;
    }
    
    public void DdpGenSourceLkpDataOnDemand.setEmbeddedIdClass(DdpGenSourceLkp obj, int index) {
        Integer gslId = new Integer(index);
        String gslOption = "gslOption_" + index;
        if (gslOption.length() > 126) {
            gslOption = new Random().nextInt(10) + gslOption.substring(1, 126);
        }
        String gslDescription = "gslDescription_" + index;
        if (gslDescription.length() > 126) {
            gslDescription = new Random().nextInt(10) + gslDescription.substring(1, 126);
        }
        Integer gslStatus = new Integer(index);
        
        DdpGenSourceLkpPK embeddedIdClass = new DdpGenSourceLkpPK(gslId, gslOption, gslDescription, gslStatus);
        obj.setId(embeddedIdClass);
    }
    
    public DdpGenSourceLkp DdpGenSourceLkpDataOnDemand.getSpecificDdpGenSourceLkp(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpGenSourceLkp obj = data.get(index);
        DdpGenSourceLkpPK id = obj.getId();
        return ddpGenSourceLkpService.findDdpGenSourceLkp(id);
    }
    
    public DdpGenSourceLkp DdpGenSourceLkpDataOnDemand.getRandomDdpGenSourceLkp() {
        init();
        DdpGenSourceLkp obj = data.get(rnd.nextInt(data.size()));
        DdpGenSourceLkpPK id = obj.getId();
        return ddpGenSourceLkpService.findDdpGenSourceLkp(id);
    }
    
    public boolean DdpGenSourceLkpDataOnDemand.modifyDdpGenSourceLkp(DdpGenSourceLkp obj) {
        return false;
    }
    
    public void DdpGenSourceLkpDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpGenSourceLkpService.findDdpGenSourceLkpEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpGenSourceLkp' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpGenSourceLkp>();
        for (int i = 0; i < 10; i++) {
            DdpGenSourceLkp obj = getNewTransientDdpGenSourceLkp(i);
            try {
                ddpGenSourceLkpService.saveDdpGenSourceLkp(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpGenSourceLkpRepository.flush();
            data.add(obj);
        }
    }
    
}
