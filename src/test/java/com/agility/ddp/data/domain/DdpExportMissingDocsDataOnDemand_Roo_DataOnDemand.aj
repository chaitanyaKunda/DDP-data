// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpExportMissingDocs;
import com.agility.ddp.data.domain.DdpExportMissingDocsDataOnDemand;
import com.agility.ddp.data.domain.DdpExportMissingDocsRepository;
import com.agility.ddp.data.domain.DdpExportMissingDocsService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpExportMissingDocsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpExportMissingDocsDataOnDemand: @Component;
    
    private Random DdpExportMissingDocsDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpExportMissingDocs> DdpExportMissingDocsDataOnDemand.data;
    
    @Autowired
    DdpExportMissingDocsService DdpExportMissingDocsDataOnDemand.ddpExportMissingDocsService;
    
    @Autowired
    DdpExportMissingDocsRepository DdpExportMissingDocsDataOnDemand.ddpExportMissingDocsRepository;
    
    public DdpExportMissingDocs DdpExportMissingDocsDataOnDemand.getNewTransientDdpExportMissingDocs(int index) {
        DdpExportMissingDocs obj = new DdpExportMissingDocs();
        setMisAppName(obj, index);
        setMisBranch(obj, index);
        setMisCheckDigit(obj, index);
        setMisCompany(obj, index);
        setMisConsignmentId(obj, index);
        setMisCreatedDate(obj, index);
        setMisDmsRCreationDate(obj, index);
        setMisDocType(obj, index);
        setMisEntryNo(obj, index);
        setMisEntryType(obj, index);
        setMisExpRuleId(obj, index);
        setMisFilerCode(obj, index);
        setMisJobNumber(obj, index);
        setMisLastProcessedDate(obj, index);
        setMisMasterJob(obj, index);
        setMisRObjectId(obj, index);
        setMisRobjectName(obj, index);
        setMisStatus(obj, index);
        return obj;
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisAppName(DdpExportMissingDocs obj, int index) {
        String misAppName = "misAppName_" + index;
        if (misAppName.length() > 128) {
            misAppName = misAppName.substring(0, 128);
        }
        obj.setMisAppName(misAppName);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisBranch(DdpExportMissingDocs obj, int index) {
        String misBranch = "misBranch_" + index;
        if (misBranch.length() > 128) {
            misBranch = misBranch.substring(0, 128);
        }
        obj.setMisBranch(misBranch);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisCheckDigit(DdpExportMissingDocs obj, int index) {
        String misCheckDigit = "misCheckDigit_" + index;
        if (misCheckDigit.length() > 128) {
            misCheckDigit = misCheckDigit.substring(0, 128);
        }
        obj.setMisCheckDigit(misCheckDigit);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisCompany(DdpExportMissingDocs obj, int index) {
        String misCompany = "misCompany_" + index;
        if (misCompany.length() > 128) {
            misCompany = misCompany.substring(0, 128);
        }
        obj.setMisCompany(misCompany);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisConsignmentId(DdpExportMissingDocs obj, int index) {
        String misConsignmentId = "misConsignmentId_" + index;
        if (misConsignmentId.length() > 128) {
            misConsignmentId = misConsignmentId.substring(0, 128);
        }
        obj.setMisConsignmentId(misConsignmentId);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisCreatedDate(DdpExportMissingDocs obj, int index) {
        Calendar misCreatedDate = Calendar.getInstance();
        obj.setMisCreatedDate(misCreatedDate);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisDmsRCreationDate(DdpExportMissingDocs obj, int index) {
        Calendar misDmsRCreationDate = Calendar.getInstance();
        obj.setMisDmsRCreationDate(misDmsRCreationDate);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisDocType(DdpExportMissingDocs obj, int index) {
        String misDocType = "misDocType_" + index;
        if (misDocType.length() > 128) {
            misDocType = misDocType.substring(0, 128);
        }
        obj.setMisDocType(misDocType);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisEntryNo(DdpExportMissingDocs obj, int index) {
        String misEntryNo = "misEntryNo_" + index;
        if (misEntryNo.length() > 128) {
            misEntryNo = misEntryNo.substring(0, 128);
        }
        obj.setMisEntryNo(misEntryNo);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisEntryType(DdpExportMissingDocs obj, int index) {
        String misEntryType = "misEntryType_" + index;
        if (misEntryType.length() > 128) {
            misEntryType = misEntryType.substring(0, 128);
        }
        obj.setMisEntryType(misEntryType);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisExpRuleId(DdpExportMissingDocs obj, int index) {
        Integer misExpRuleId = new Integer(index);
        obj.setMisExpRuleId(misExpRuleId);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisFilerCode(DdpExportMissingDocs obj, int index) {
        String misFilerCode = "misFilerCode_" + index;
        if (misFilerCode.length() > 128) {
            misFilerCode = misFilerCode.substring(0, 128);
        }
        obj.setMisFilerCode(misFilerCode);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisJobNumber(DdpExportMissingDocs obj, int index) {
        String misJobNumber = "misJobNumber_" + index;
        if (misJobNumber.length() > 128) {
            misJobNumber = misJobNumber.substring(0, 128);
        }
        obj.setMisJobNumber(misJobNumber);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisLastProcessedDate(DdpExportMissingDocs obj, int index) {
        Calendar misLastProcessedDate = Calendar.getInstance();
        obj.setMisLastProcessedDate(misLastProcessedDate);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisMasterJob(DdpExportMissingDocs obj, int index) {
        String misMasterJob = "misMasterJob_" + index;
        if (misMasterJob.length() > 128) {
            misMasterJob = misMasterJob.substring(0, 128);
        }
        obj.setMisMasterJob(misMasterJob);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisRObjectId(DdpExportMissingDocs obj, int index) {
        String misRObjectId = "misRObjectId_" + index;
        if (misRObjectId.length() > 32) {
            misRObjectId = misRObjectId.substring(0, 32);
        }
        obj.setMisRObjectId(misRObjectId);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisRobjectName(DdpExportMissingDocs obj, int index) {
        String misRobjectName = "misRobjectName_" + index;
        if (misRobjectName.length() > 128) {
            misRobjectName = misRobjectName.substring(0, 128);
        }
        obj.setMisRobjectName(misRobjectName);
    }
    
    public void DdpExportMissingDocsDataOnDemand.setMisStatus(DdpExportMissingDocs obj, int index) {
        Integer misStatus = new Integer(index);
        obj.setMisStatus(misStatus);
    }
    
    public DdpExportMissingDocs DdpExportMissingDocsDataOnDemand.getSpecificDdpExportMissingDocs(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpExportMissingDocs obj = data.get(index);
        Integer id = obj.getMisId();
        return ddpExportMissingDocsService.findDdpExportMissingDocs(id);
    }
    
    public DdpExportMissingDocs DdpExportMissingDocsDataOnDemand.getRandomDdpExportMissingDocs() {
        init();
        DdpExportMissingDocs obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getMisId();
        return ddpExportMissingDocsService.findDdpExportMissingDocs(id);
    }
    
    public boolean DdpExportMissingDocsDataOnDemand.modifyDdpExportMissingDocs(DdpExportMissingDocs obj) {
        return false;
    }
    
    public void DdpExportMissingDocsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpExportMissingDocsService.findDdpExportMissingDocsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpExportMissingDocs' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpExportMissingDocs>();
        for (int i = 0; i < 10; i++) {
            DdpExportMissingDocs obj = getNewTransientDdpExportMissingDocs(i);
            try {
                ddpExportMissingDocsService.saveDdpExportMissingDocs(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpExportMissingDocsRepository.flush();
            data.add(obj);
        }
    }
    
}
