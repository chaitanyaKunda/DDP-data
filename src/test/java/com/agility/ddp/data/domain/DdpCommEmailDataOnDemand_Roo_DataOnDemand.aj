// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCommEmail;
import com.agility.ddp.data.domain.DdpCommEmailDataOnDemand;
import com.agility.ddp.data.domain.DdpCommEmailRepository;
import com.agility.ddp.data.domain.DdpCommEmailService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpCommEmailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpCommEmailDataOnDemand: @Component;
    
    private Random DdpCommEmailDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpCommEmail> DdpCommEmailDataOnDemand.data;
    
    @Autowired
    DdpCommEmailService DdpCommEmailDataOnDemand.ddpCommEmailService;
    
    @Autowired
    DdpCommEmailRepository DdpCommEmailDataOnDemand.ddpCommEmailRepository;
    
    public DdpCommEmail DdpCommEmailDataOnDemand.getNewTransientDdpCommEmail(int index) {
        DdpCommEmail obj = new DdpCommEmail();
        setCemEmailAttachmentLimit(obj, index);
        setCemEmailBcc(obj, index);
        setCemEmailBody(obj, index);
        setCemEmailCc(obj, index);
        setCemEmailFrom(obj, index);
        setCemEmailReplyTo(obj, index);
        setCemEmailSubject(obj, index);
        setCemEmailTo(obj, index);
        setCemFtpLocation(obj, index);
        setCemUncPath(obj, index);
        return obj;
    }
    
    public void DdpCommEmailDataOnDemand.setCemEmailAttachmentLimit(DdpCommEmail obj, int index) {
        Integer cemEmailAttachmentLimit = new Integer(index);
        obj.setCemEmailAttachmentLimit(cemEmailAttachmentLimit);
    }
    
    public void DdpCommEmailDataOnDemand.setCemEmailBcc(DdpCommEmail obj, int index) {
        String cemEmailBcc = "foo" + index + "@bar.com";
        if (cemEmailBcc.length() > 1000) {
            cemEmailBcc = cemEmailBcc.substring(0, 1000);
        }
        obj.setCemEmailBcc(cemEmailBcc);
    }
    
    public void DdpCommEmailDataOnDemand.setCemEmailBody(DdpCommEmail obj, int index) {
        String cemEmailBody = "foo" + index + "@bar.com";
        if (cemEmailBody.length() > 2000) {
            cemEmailBody = cemEmailBody.substring(0, 2000);
        }
        obj.setCemEmailBody(cemEmailBody);
    }
    
    public void DdpCommEmailDataOnDemand.setCemEmailCc(DdpCommEmail obj, int index) {
        String cemEmailCc = "foo" + index + "@bar.com";
        if (cemEmailCc.length() > 1000) {
            cemEmailCc = cemEmailCc.substring(0, 1000);
        }
        obj.setCemEmailCc(cemEmailCc);
    }
    
    public void DdpCommEmailDataOnDemand.setCemEmailFrom(DdpCommEmail obj, int index) {
        String cemEmailFrom = "foo" + index + "@bar.com";
        if (cemEmailFrom.length() > 45) {
            cemEmailFrom = cemEmailFrom.substring(0, 45);
        }
        obj.setCemEmailFrom(cemEmailFrom);
    }
    
    public void DdpCommEmailDataOnDemand.setCemEmailReplyTo(DdpCommEmail obj, int index) {
        String cemEmailReplyTo = "foo" + index + "@bar.com";
        if (cemEmailReplyTo.length() > 1000) {
            cemEmailReplyTo = cemEmailReplyTo.substring(0, 1000);
        }
        obj.setCemEmailReplyTo(cemEmailReplyTo);
    }
    
    public void DdpCommEmailDataOnDemand.setCemEmailSubject(DdpCommEmail obj, int index) {
        String cemEmailSubject = "foo" + index + "@bar.com";
        if (cemEmailSubject.length() > 1000) {
            cemEmailSubject = cemEmailSubject.substring(0, 1000);
        }
        obj.setCemEmailSubject(cemEmailSubject);
    }
    
    public void DdpCommEmailDataOnDemand.setCemEmailTo(DdpCommEmail obj, int index) {
        String cemEmailTo = "foo" + index + "@bar.com";
        if (cemEmailTo.length() > 256) {
            cemEmailTo = cemEmailTo.substring(0, 256);
        }
        obj.setCemEmailTo(cemEmailTo);
    }
    
    public void DdpCommEmailDataOnDemand.setCemFtpLocation(DdpCommEmail obj, int index) {
        String cemFtpLocation = "cemFtpLocation_" + index;
        if (cemFtpLocation.length() > 128) {
            cemFtpLocation = cemFtpLocation.substring(0, 128);
        }
        obj.setCemFtpLocation(cemFtpLocation);
    }
    
    public void DdpCommEmailDataOnDemand.setCemUncPath(DdpCommEmail obj, int index) {
        String cemUncPath = "cemUncPath_" + index;
        if (cemUncPath.length() > 128) {
            cemUncPath = cemUncPath.substring(0, 128);
        }
        obj.setCemUncPath(cemUncPath);
    }
    
    public DdpCommEmail DdpCommEmailDataOnDemand.getSpecificDdpCommEmail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpCommEmail obj = data.get(index);
        Integer id = obj.getCemEmailId();
        return ddpCommEmailService.findDdpCommEmail(id);
    }
    
    public DdpCommEmail DdpCommEmailDataOnDemand.getRandomDdpCommEmail() {
        init();
        DdpCommEmail obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getCemEmailId();
        return ddpCommEmailService.findDdpCommEmail(id);
    }
    
    public boolean DdpCommEmailDataOnDemand.modifyDdpCommEmail(DdpCommEmail obj) {
        return false;
    }
    
    public void DdpCommEmailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpCommEmailService.findDdpCommEmailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpCommEmail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpCommEmail>();
        for (int i = 0; i < 10; i++) {
            DdpCommEmail obj = getNewTransientDdpCommEmail(i);
            try {
                ddpCommEmailService.saveDdpCommEmail(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpCommEmailRepository.flush();
            data.add(obj);
        }
    }
    
}
