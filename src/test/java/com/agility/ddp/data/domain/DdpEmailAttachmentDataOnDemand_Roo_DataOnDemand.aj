// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpEmailAttachment;
import com.agility.ddp.data.domain.DdpEmailAttachmentDataOnDemand;
import com.agility.ddp.data.domain.DdpEmailAttachmentRepository;
import com.agility.ddp.data.domain.DdpEmailAttachmentService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpEmailAttachmentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpEmailAttachmentDataOnDemand: @Component;
    
    private Random DdpEmailAttachmentDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpEmailAttachment> DdpEmailAttachmentDataOnDemand.data;
    
    @Autowired
    DdpEmailAttachmentService DdpEmailAttachmentDataOnDemand.ddpEmailAttachmentService;
    
    @Autowired
    DdpEmailAttachmentRepository DdpEmailAttachmentDataOnDemand.ddpEmailAttachmentRepository;
    
    public DdpEmailAttachment DdpEmailAttachmentDataOnDemand.getNewTransientDdpEmailAttachment(int index) {
        DdpEmailAttachment obj = new DdpEmailAttachment();
        setEatAttachmentNumberLimit(obj, index);
        setEatCompression(obj, index);
        setEatConversion(obj, index);
        setEatEmailId(obj, index);
        setEatHyperlink(obj, index);
        setEatHyperlinkOption(obj, index);
        setEatPdfFormat(obj, index);
        setEatPdfSignedOption(obj, index);
        setEatSize(obj, index);
        setEatStatus(obj, index);
        return obj;
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatAttachmentNumberLimit(DdpEmailAttachment obj, int index) {
        Integer eatAttachmentNumberLimit = new Integer(index);
        obj.setEatAttachmentNumberLimit(eatAttachmentNumberLimit);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatCompression(DdpEmailAttachment obj, int index) {
        String eatCompression = "eatCompression_" + index;
        if (eatCompression.length() > 45) {
            eatCompression = eatCompression.substring(0, 45);
        }
        obj.setEatCompression(eatCompression);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatConversion(DdpEmailAttachment obj, int index) {
        String eatConversion = "eatConversion_" + index;
        if (eatConversion.length() > 45) {
            eatConversion = eatConversion.substring(0, 45);
        }
        obj.setEatConversion(eatConversion);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatEmailId(DdpEmailAttachment obj, int index) {
        Integer eatEmailId = new Integer(index);
        obj.setEatEmailId(eatEmailId);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatHyperlink(DdpEmailAttachment obj, int index) {
        String eatHyperlink = "eatHyperlink_" + index;
        if (eatHyperlink.length() > 45) {
            eatHyperlink = eatHyperlink.substring(0, 45);
        }
        obj.setEatHyperlink(eatHyperlink);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatHyperlinkOption(DdpEmailAttachment obj, int index) {
        Integer eatHyperlinkOption = new Integer(index);
        obj.setEatHyperlinkOption(eatHyperlinkOption);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatPdfFormat(DdpEmailAttachment obj, int index) {
        String eatPdfFormat = "eatPdfFormat_" + index;
        if (eatPdfFormat.length() > 45) {
            eatPdfFormat = eatPdfFormat.substring(0, 45);
        }
        obj.setEatPdfFormat(eatPdfFormat);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatPdfSignedOption(DdpEmailAttachment obj, int index) {
        Integer eatPdfSignedOption = new Integer(index);
        obj.setEatPdfSignedOption(eatPdfSignedOption);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatSize(DdpEmailAttachment obj, int index) {
        Integer eatSize = new Integer(index);
        obj.setEatSize(eatSize);
    }
    
    public void DdpEmailAttachmentDataOnDemand.setEatStatus(DdpEmailAttachment obj, int index) {
        Integer eatStatus = new Integer(index);
        obj.setEatStatus(eatStatus);
    }
    
    public DdpEmailAttachment DdpEmailAttachmentDataOnDemand.getSpecificDdpEmailAttachment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpEmailAttachment obj = data.get(index);
        Integer id = obj.getEatId();
        return ddpEmailAttachmentService.findDdpEmailAttachment(id);
    }
    
    public DdpEmailAttachment DdpEmailAttachmentDataOnDemand.getRandomDdpEmailAttachment() {
        init();
        DdpEmailAttachment obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getEatId();
        return ddpEmailAttachmentService.findDdpEmailAttachment(id);
    }
    
    public boolean DdpEmailAttachmentDataOnDemand.modifyDdpEmailAttachment(DdpEmailAttachment obj) {
        return false;
    }
    
    public void DdpEmailAttachmentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpEmailAttachmentService.findDdpEmailAttachmentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpEmailAttachment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpEmailAttachment>();
        for (int i = 0; i < 10; i++) {
            DdpEmailAttachment obj = getNewTransientDdpEmailAttachment(i);
            try {
                ddpEmailAttachmentService.saveDdpEmailAttachment(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpEmailAttachmentRepository.flush();
            data.add(obj);
        }
    }
    
}
