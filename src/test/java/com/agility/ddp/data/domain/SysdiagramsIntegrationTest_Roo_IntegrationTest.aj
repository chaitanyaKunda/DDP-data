// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.SysdiagramsDataOnDemand;
import com.agility.ddp.data.domain.SysdiagramsIntegrationTest;
import com.agility.ddp.data.domain.SysdiagramsRepository;
import com.agility.ddp.data.domain.SysdiagramsService;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SysdiagramsIntegrationTest_Roo_IntegrationTest {
    
    declare @type: SysdiagramsIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: SysdiagramsIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: SysdiagramsIntegrationTest: @Transactional;
    
    @Autowired
    SysdiagramsDataOnDemand SysdiagramsIntegrationTest.dod;
    
    @Autowired
    SysdiagramsService SysdiagramsIntegrationTest.sysdiagramsService;
    
    @Autowired
    SysdiagramsRepository SysdiagramsIntegrationTest.sysdiagramsRepository;
    
    @Test
    public void SysdiagramsIntegrationTest.testCountAllSysdiagramses() {
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to initialize correctly", dod.getRandomSysdiagrams());
        long count = sysdiagramsService.countAllSysdiagramses();
        Assert.assertTrue("Counter for 'Sysdiagrams' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void SysdiagramsIntegrationTest.testFindSysdiagrams() {
        Sysdiagrams obj = dod.getRandomSysdiagrams();
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to initialize correctly", obj);
        Integer id = obj.getDiagramId();
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to provide an identifier", id);
        obj = sysdiagramsService.findSysdiagrams(id);
        Assert.assertNotNull("Find method for 'Sysdiagrams' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Sysdiagrams' returned the incorrect identifier", id, obj.getDiagramId());
    }
    
    @Test
    public void SysdiagramsIntegrationTest.testFindAllSysdiagramses() {
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to initialize correctly", dod.getRandomSysdiagrams());
        long count = sysdiagramsService.countAllSysdiagramses();
        Assert.assertTrue("Too expensive to perform a find all test for 'Sysdiagrams', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Sysdiagrams> result = sysdiagramsService.findAllSysdiagramses();
        Assert.assertNotNull("Find all method for 'Sysdiagrams' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Sysdiagrams' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void SysdiagramsIntegrationTest.testFindSysdiagramsEntries() {
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to initialize correctly", dod.getRandomSysdiagrams());
        long count = sysdiagramsService.countAllSysdiagramses();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Sysdiagrams> result = sysdiagramsService.findSysdiagramsEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Sysdiagrams' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Sysdiagrams' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void SysdiagramsIntegrationTest.testFlush() {
        Sysdiagrams obj = dod.getRandomSysdiagrams();
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to initialize correctly", obj);
        Integer id = obj.getDiagramId();
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to provide an identifier", id);
        obj = sysdiagramsService.findSysdiagrams(id);
        Assert.assertNotNull("Find method for 'Sysdiagrams' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifySysdiagrams(obj);
        Integer currentVersion = obj.getVersion();
        sysdiagramsRepository.flush();
        Assert.assertTrue("Version for 'Sysdiagrams' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void SysdiagramsIntegrationTest.testUpdateSysdiagramsUpdate() {
        Sysdiagrams obj = dod.getRandomSysdiagrams();
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to initialize correctly", obj);
        Integer id = obj.getDiagramId();
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to provide an identifier", id);
        obj = sysdiagramsService.findSysdiagrams(id);
        boolean modified =  dod.modifySysdiagrams(obj);
        Integer currentVersion = obj.getVersion();
        Sysdiagrams merged = sysdiagramsService.updateSysdiagrams(obj);
        sysdiagramsRepository.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getDiagramId(), id);
        Assert.assertTrue("Version for 'Sysdiagrams' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void SysdiagramsIntegrationTest.testSaveSysdiagrams() {
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to initialize correctly", dod.getRandomSysdiagrams());
        Sysdiagrams obj = dod.getNewTransientSysdiagrams(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Sysdiagrams' identifier to be null", obj.getDiagramId());
        try {
            sysdiagramsService.saveSysdiagrams(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        sysdiagramsRepository.flush();
        Assert.assertNotNull("Expected 'Sysdiagrams' identifier to no longer be null", obj.getDiagramId());
    }
    
    @Test
    public void SysdiagramsIntegrationTest.testDeleteSysdiagrams() {
        Sysdiagrams obj = dod.getRandomSysdiagrams();
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to initialize correctly", obj);
        Integer id = obj.getDiagramId();
        Assert.assertNotNull("Data on demand for 'Sysdiagrams' failed to provide an identifier", id);
        obj = sysdiagramsService.findSysdiagrams(id);
        sysdiagramsService.deleteSysdiagrams(obj);
        sysdiagramsRepository.flush();
        Assert.assertNull("Failed to remove 'Sysdiagrams' with identifier '" + id + "'", sysdiagramsService.findSysdiagrams(id));
    }
    
}
