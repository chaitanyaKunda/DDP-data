// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpRole;
import com.agility.ddp.data.domain.DdpRoleDataOnDemand;
import com.agility.ddp.data.domain.DdpRoleRepository;
import com.agility.ddp.data.domain.DdpRoleService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpRoleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpRoleDataOnDemand: @Component;
    
    private Random DdpRoleDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpRole> DdpRoleDataOnDemand.data;
    
    @Autowired
    DdpRoleService DdpRoleDataOnDemand.ddpRoleService;
    
    @Autowired
    DdpRoleRepository DdpRoleDataOnDemand.ddpRoleRepository;
    
    public DdpRole DdpRoleDataOnDemand.getNewTransientDdpRole(int index) {
        DdpRole obj = new DdpRole();
        setRolCreatedBy(obj, index);
        setRolCreatedDate(obj, index);
        setRolDescription(obj, index);
        setRolDisplayName(obj, index);
        setRolModifiedBy(obj, index);
        setRolModifiedDate(obj, index);
        setRolName(obj, index);
        setRolStatus(obj, index);
        return obj;
    }
    
    public void DdpRoleDataOnDemand.setRolCreatedBy(DdpRole obj, int index) {
        String rolCreatedBy = "rolCreatedBy_" + index;
        if (rolCreatedBy.length() > 120) {
            rolCreatedBy = rolCreatedBy.substring(0, 120);
        }
        obj.setRolCreatedBy(rolCreatedBy);
    }
    
    public void DdpRoleDataOnDemand.setRolCreatedDate(DdpRole obj, int index) {
        Calendar rolCreatedDate = Calendar.getInstance();
        obj.setRolCreatedDate(rolCreatedDate);
    }
    
    public void DdpRoleDataOnDemand.setRolDescription(DdpRole obj, int index) {
        String rolDescription = "rolDescription_" + index;
        if (rolDescription.length() > 256) {
            rolDescription = rolDescription.substring(0, 256);
        }
        obj.setRolDescription(rolDescription);
    }
    
    public void DdpRoleDataOnDemand.setRolDisplayName(DdpRole obj, int index) {
        String rolDisplayName = "rolDisplayName_" + index;
        if (rolDisplayName.length() > 128) {
            rolDisplayName = rolDisplayName.substring(0, 128);
        }
        obj.setRolDisplayName(rolDisplayName);
    }
    
    public void DdpRoleDataOnDemand.setRolModifiedBy(DdpRole obj, int index) {
        String rolModifiedBy = "rolModifiedBy_" + index;
        if (rolModifiedBy.length() > 120) {
            rolModifiedBy = rolModifiedBy.substring(0, 120);
        }
        obj.setRolModifiedBy(rolModifiedBy);
    }
    
    public void DdpRoleDataOnDemand.setRolModifiedDate(DdpRole obj, int index) {
        Calendar rolModifiedDate = Calendar.getInstance();
        obj.setRolModifiedDate(rolModifiedDate);
    }
    
    public void DdpRoleDataOnDemand.setRolName(DdpRole obj, int index) {
        String rolName = "rolName_" + index;
        if (rolName.length() > 32) {
            rolName = rolName.substring(0, 32);
        }
        obj.setRolName(rolName);
    }
    
    public void DdpRoleDataOnDemand.setRolStatus(DdpRole obj, int index) {
        Integer rolStatus = new Integer(index);
        obj.setRolStatus(rolStatus);
    }
    
    public DdpRole DdpRoleDataOnDemand.getSpecificDdpRole(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpRole obj = data.get(index);
        Integer id = obj.getRolId();
        return ddpRoleService.findDdpRole(id);
    }
    
    public DdpRole DdpRoleDataOnDemand.getRandomDdpRole() {
        init();
        DdpRole obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getRolId();
        return ddpRoleService.findDdpRole(id);
    }
    
    public boolean DdpRoleDataOnDemand.modifyDdpRole(DdpRole obj) {
        return false;
    }
    
    public void DdpRoleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpRoleService.findDdpRoleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpRole' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpRole>();
        for (int i = 0; i < 10; i++) {
            DdpRole obj = getNewTransientDdpRole(i);
            try {
                ddpRoleService.saveDdpRole(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpRoleRepository.flush();
            data.add(obj);
        }
    }
    
}
