// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCategorizedAuditTxn;
import com.agility.ddp.data.domain.DdpCategorizedAuditTxnDataOnDemand;
import com.agility.ddp.data.domain.DdpCategorizedAuditTxnRepository;
import com.agility.ddp.data.domain.DdpCategorizedAuditTxnService;
import com.agility.ddp.data.domain.DdpCategorizedDocs;
import com.agility.ddp.data.domain.DdpCategorizedDocsDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpCategorizedAuditTxnDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpCategorizedAuditTxnDataOnDemand: @Component;
    
    private Random DdpCategorizedAuditTxnDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpCategorizedAuditTxn> DdpCategorizedAuditTxnDataOnDemand.data;
    
    @Autowired
    DdpCategorizedDocsDataOnDemand DdpCategorizedAuditTxnDataOnDemand.ddpCategorizedDocsDataOnDemand;
    
    @Autowired
    DdpCategorizedAuditTxnService DdpCategorizedAuditTxnDataOnDemand.ddpCategorizedAuditTxnService;
    
    @Autowired
    DdpCategorizedAuditTxnRepository DdpCategorizedAuditTxnDataOnDemand.ddpCategorizedAuditTxnRepository;
    
    public DdpCategorizedAuditTxn DdpCategorizedAuditTxnDataOnDemand.getNewTransientDdpCategorizedAuditTxn(int index) {
        DdpCategorizedAuditTxn obj = new DdpCategorizedAuditTxn();
        setCaxDcdId(obj, index);
        setCaxPmInitiatedDate(obj, index);
        setCaxPmLogs(obj, index);
        setCaxPmName(obj, index);
        setCaxPmSeq(obj, index);
        return obj;
    }
    
    public void DdpCategorizedAuditTxnDataOnDemand.setCaxDcdId(DdpCategorizedAuditTxn obj, int index) {
        DdpCategorizedDocs caxDcdId = ddpCategorizedDocsDataOnDemand.getRandomDdpCategorizedDocs();
        obj.setCaxDcdId(caxDcdId);
    }
    
    public void DdpCategorizedAuditTxnDataOnDemand.setCaxPmInitiatedDate(DdpCategorizedAuditTxn obj, int index) {
        Calendar caxPmInitiatedDate = Calendar.getInstance();
        obj.setCaxPmInitiatedDate(caxPmInitiatedDate);
    }
    
    public void DdpCategorizedAuditTxnDataOnDemand.setCaxPmLogs(DdpCategorizedAuditTxn obj, int index) {
        String caxPmLogs = "caxPmLogs_" + index;
        if (caxPmLogs.length() > 250) {
            caxPmLogs = caxPmLogs.substring(0, 250);
        }
        obj.setCaxPmLogs(caxPmLogs);
    }
    
    public void DdpCategorizedAuditTxnDataOnDemand.setCaxPmName(DdpCategorizedAuditTxn obj, int index) {
        String caxPmName = "caxPmName_" + index;
        if (caxPmName.length() > 120) {
            caxPmName = caxPmName.substring(0, 120);
        }
        obj.setCaxPmName(caxPmName);
    }
    
    public void DdpCategorizedAuditTxnDataOnDemand.setCaxPmSeq(DdpCategorizedAuditTxn obj, int index) {
        Integer caxPmSeq = new Integer(index);
        obj.setCaxPmSeq(caxPmSeq);
    }
    
    public DdpCategorizedAuditTxn DdpCategorizedAuditTxnDataOnDemand.getSpecificDdpCategorizedAuditTxn(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpCategorizedAuditTxn obj = data.get(index);
        Integer id = obj.getCaxId();
        return ddpCategorizedAuditTxnService.findDdpCategorizedAuditTxn(id);
    }
    
    public DdpCategorizedAuditTxn DdpCategorizedAuditTxnDataOnDemand.getRandomDdpCategorizedAuditTxn() {
        init();
        DdpCategorizedAuditTxn obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getCaxId();
        return ddpCategorizedAuditTxnService.findDdpCategorizedAuditTxn(id);
    }
    
    public boolean DdpCategorizedAuditTxnDataOnDemand.modifyDdpCategorizedAuditTxn(DdpCategorizedAuditTxn obj) {
        return false;
    }
    
    public void DdpCategorizedAuditTxnDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpCategorizedAuditTxnService.findDdpCategorizedAuditTxnEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpCategorizedAuditTxn' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpCategorizedAuditTxn>();
        for (int i = 0; i < 10; i++) {
            DdpCategorizedAuditTxn obj = getNewTransientDdpCategorizedAuditTxn(i);
            try {
                ddpCategorizedAuditTxnService.saveDdpCategorizedAuditTxn(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpCategorizedAuditTxnRepository.flush();
            data.add(obj);
        }
    }
    
}
