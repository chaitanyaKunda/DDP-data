// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpCategorizedDetail;
import com.agility.ddp.data.domain.DdpCategorizedDetailDataOnDemand;
import com.agility.ddp.data.domain.DdpCategorizedDetailRepository;
import com.agility.ddp.data.domain.DdpCategorizedDetailService;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import com.agility.ddp.data.domain.DdpDmsDocsTxnDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DdpCategorizedDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DdpCategorizedDetailDataOnDemand: @Component;
    
    private Random DdpCategorizedDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<DdpCategorizedDetail> DdpCategorizedDetailDataOnDemand.data;
    
    @Autowired
    DdpDmsDocsTxnDataOnDemand DdpCategorizedDetailDataOnDemand.ddpDmsDocsTxnDataOnDemand;
    
    @Autowired
    DdpCategorizedDetailService DdpCategorizedDetailDataOnDemand.ddpCategorizedDetailService;
    
    @Autowired
    DdpCategorizedDetailRepository DdpCategorizedDetailDataOnDemand.ddpCategorizedDetailRepository;
    
    public DdpCategorizedDetail DdpCategorizedDetailDataOnDemand.getNewTransientDdpCategorizedDetail(int index) {
        DdpCategorizedDetail obj = new DdpCategorizedDetail();
        setCadCreatedBy(obj, index);
        setCadCreatedDate(obj, index);
        setCadDtxId(obj, index);
        setCadModifiedBy(obj, index);
        setCadModifiedDate(obj, index);
        setCadOriginSysId(obj, index);
        setCadRObjectId(obj, index);
        setCadRulesCompletedCount(obj, index);
        setCadRulesFailedCount(obj, index);
        setCadRulesInProgressCount(obj, index);
        setCadServiceType(obj, index);
        setCadStatus(obj, index);
        setCadTotalRulesReqCount(obj, index);
        setCadTransMessage(obj, index);
        return obj;
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadCreatedBy(DdpCategorizedDetail obj, int index) {
        String cadCreatedBy = "cadCreatedBy_" + index;
        if (cadCreatedBy.length() > 120) {
            cadCreatedBy = cadCreatedBy.substring(0, 120);
        }
        obj.setCadCreatedBy(cadCreatedBy);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadCreatedDate(DdpCategorizedDetail obj, int index) {
        Calendar cadCreatedDate = Calendar.getInstance();
        obj.setCadCreatedDate(cadCreatedDate);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadDtxId(DdpCategorizedDetail obj, int index) {
        DdpDmsDocsTxn cadDtxId = ddpDmsDocsTxnDataOnDemand.getRandomDdpDmsDocsTxn();
        obj.setCadDtxId(cadDtxId);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadModifiedBy(DdpCategorizedDetail obj, int index) {
        String cadModifiedBy = "cadModifiedBy_" + index;
        if (cadModifiedBy.length() > 120) {
            cadModifiedBy = cadModifiedBy.substring(0, 120);
        }
        obj.setCadModifiedBy(cadModifiedBy);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadModifiedDate(DdpCategorizedDetail obj, int index) {
        Calendar cadModifiedDate = Calendar.getInstance();
        obj.setCadModifiedDate(cadModifiedDate);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadOriginSysId(DdpCategorizedDetail obj, int index) {
        Integer cadOriginSysId = new Integer(index);
        obj.setCadOriginSysId(cadOriginSysId);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadRObjectId(DdpCategorizedDetail obj, int index) {
        String cadRObjectId = "cadRObjectId_" + index;
        if (cadRObjectId.length() > 16) {
            cadRObjectId = cadRObjectId.substring(0, 16);
        }
        obj.setCadRObjectId(cadRObjectId);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadRulesCompletedCount(DdpCategorizedDetail obj, int index) {
        Integer cadRulesCompletedCount = new Integer(index);
        obj.setCadRulesCompletedCount(cadRulesCompletedCount);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadRulesFailedCount(DdpCategorizedDetail obj, int index) {
        Integer cadRulesFailedCount = new Integer(index);
        obj.setCadRulesFailedCount(cadRulesFailedCount);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadRulesInProgressCount(DdpCategorizedDetail obj, int index) {
        Integer cadRulesInProgressCount = new Integer(index);
        obj.setCadRulesInProgressCount(cadRulesInProgressCount);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadServiceType(DdpCategorizedDetail obj, int index) {
        String cadServiceType = "cadServiceType_" + index;
        if (cadServiceType.length() > 45) {
            cadServiceType = cadServiceType.substring(0, 45);
        }
        obj.setCadServiceType(cadServiceType);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadStatus(DdpCategorizedDetail obj, int index) {
        Integer cadStatus = new Integer(index);
        obj.setCadStatus(cadStatus);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadTotalRulesReqCount(DdpCategorizedDetail obj, int index) {
        Integer cadTotalRulesReqCount = new Integer(index);
        obj.setCadTotalRulesReqCount(cadTotalRulesReqCount);
    }
    
    public void DdpCategorizedDetailDataOnDemand.setCadTransMessage(DdpCategorizedDetail obj, int index) {
        String cadTransMessage = "cadTransMessage_" + index;
        if (cadTransMessage.length() > 1000) {
            cadTransMessage = cadTransMessage.substring(0, 1000);
        }
        obj.setCadTransMessage(cadTransMessage);
    }
    
    public DdpCategorizedDetail DdpCategorizedDetailDataOnDemand.getSpecificDdpCategorizedDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DdpCategorizedDetail obj = data.get(index);
        Integer id = obj.getCadId();
        return ddpCategorizedDetailService.findDdpCategorizedDetail(id);
    }
    
    public DdpCategorizedDetail DdpCategorizedDetailDataOnDemand.getRandomDdpCategorizedDetail() {
        init();
        DdpCategorizedDetail obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getCadId();
        return ddpCategorizedDetailService.findDdpCategorizedDetail(id);
    }
    
    public boolean DdpCategorizedDetailDataOnDemand.modifyDdpCategorizedDetail(DdpCategorizedDetail obj) {
        return false;
    }
    
    public void DdpCategorizedDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ddpCategorizedDetailService.findDdpCategorizedDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DdpCategorizedDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DdpCategorizedDetail>();
        for (int i = 0; i < 10; i++) {
            DdpCategorizedDetail obj = getNewTransientDdpCategorizedDetail(i);
            try {
                ddpCategorizedDetailService.saveDdpCategorizedDetail(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            ddpCategorizedDetailRepository.flush();
            data.add(obj);
        }
    }
    
}
