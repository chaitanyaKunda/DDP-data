// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.data.domain;

import com.agility.ddp.data.domain.DdpSourceSystemDetailDataOnDemand;
import com.agility.ddp.data.domain.DdpSourceSystemDetailIntegrationTest;
import com.agility.ddp.data.domain.DdpSourceSystemDetailRepository;
import com.agility.ddp.data.domain.DdpSourceSystemDetailService;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DdpSourceSystemDetailIntegrationTest_Roo_IntegrationTest {
    
    declare @type: DdpSourceSystemDetailIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: DdpSourceSystemDetailIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: DdpSourceSystemDetailIntegrationTest: @Transactional;
    
    @Autowired
    DdpSourceSystemDetailDataOnDemand DdpSourceSystemDetailIntegrationTest.dod;
    
    @Autowired
    DdpSourceSystemDetailService DdpSourceSystemDetailIntegrationTest.ddpSourceSystemDetailService;
    
    @Autowired
    DdpSourceSystemDetailRepository DdpSourceSystemDetailIntegrationTest.ddpSourceSystemDetailRepository;
    
    @Test
    public void DdpSourceSystemDetailIntegrationTest.testCountAllDdpSourceSystemDetails() {
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to initialize correctly", dod.getRandomDdpSourceSystemDetail());
        long count = ddpSourceSystemDetailService.countAllDdpSourceSystemDetails();
        Assert.assertTrue("Counter for 'DdpSourceSystemDetail' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void DdpSourceSystemDetailIntegrationTest.testFindDdpSourceSystemDetail() {
        DdpSourceSystemDetail obj = dod.getRandomDdpSourceSystemDetail();
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to initialize correctly", obj);
        Integer id = obj.getSsdId();
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to provide an identifier", id);
        obj = ddpSourceSystemDetailService.findDdpSourceSystemDetail(id);
        Assert.assertNotNull("Find method for 'DdpSourceSystemDetail' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'DdpSourceSystemDetail' returned the incorrect identifier", id, obj.getSsdId());
    }
    
    @Test
    public void DdpSourceSystemDetailIntegrationTest.testFindAllDdpSourceSystemDetails() {
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to initialize correctly", dod.getRandomDdpSourceSystemDetail());
        long count = ddpSourceSystemDetailService.countAllDdpSourceSystemDetails();
        Assert.assertTrue("Too expensive to perform a find all test for 'DdpSourceSystemDetail', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<DdpSourceSystemDetail> result = ddpSourceSystemDetailService.findAllDdpSourceSystemDetails();
        Assert.assertNotNull("Find all method for 'DdpSourceSystemDetail' illegally returned null", result);
        Assert.assertTrue("Find all method for 'DdpSourceSystemDetail' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void DdpSourceSystemDetailIntegrationTest.testFindDdpSourceSystemDetailEntries() {
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to initialize correctly", dod.getRandomDdpSourceSystemDetail());
        long count = ddpSourceSystemDetailService.countAllDdpSourceSystemDetails();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<DdpSourceSystemDetail> result = ddpSourceSystemDetailService.findDdpSourceSystemDetailEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'DdpSourceSystemDetail' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'DdpSourceSystemDetail' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void DdpSourceSystemDetailIntegrationTest.testSaveDdpSourceSystemDetail() {
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to initialize correctly", dod.getRandomDdpSourceSystemDetail());
        DdpSourceSystemDetail obj = dod.getNewTransientDdpSourceSystemDetail(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'DdpSourceSystemDetail' identifier to be null", obj.getSsdId());
        try {
            ddpSourceSystemDetailService.saveDdpSourceSystemDetail(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        ddpSourceSystemDetailRepository.flush();
        Assert.assertNotNull("Expected 'DdpSourceSystemDetail' identifier to no longer be null", obj.getSsdId());
    }
    
    @Test
    public void DdpSourceSystemDetailIntegrationTest.testDeleteDdpSourceSystemDetail() {
        DdpSourceSystemDetail obj = dod.getRandomDdpSourceSystemDetail();
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to initialize correctly", obj);
        Integer id = obj.getSsdId();
        Assert.assertNotNull("Data on demand for 'DdpSourceSystemDetail' failed to provide an identifier", id);
        obj = ddpSourceSystemDetailService.findDdpSourceSystemDetail(id);
        ddpSourceSystemDetailService.deleteDdpSourceSystemDetail(obj);
        ddpSourceSystemDetailRepository.flush();
        Assert.assertNull("Failed to remove 'DdpSourceSystemDetail' with identifier '" + id + "'", ddpSourceSystemDetailService.findDdpSourceSystemDetail(id));
    }
    
}
